
proba_i2c_lab_dom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008374  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08008574  08008574  00018574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085f0  080085f0  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  080085f0  080085f0  000185f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085f8  080085f8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085f8  080085f8  000185f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085fc  080085fc  000185fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08008600  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006cc  20000080  08008680  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000074c  08008680  0002074c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d9cc  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fa5  00000000  00000000  0003da7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c8  00000000  00000000  00041a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001500  00000000  00000000  000430e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b189  00000000  00000000  000445e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d552  00000000  00000000  0006f771  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105568  00000000  00000000  0008ccc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cc  00000000  00000000  0019222b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000626c  00000000  00000000  001922f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	0800855c 	.word	0x0800855c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	0800855c 	.word	0x0800855c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005de:	463b      	mov	r3, r7
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ea:	4b21      	ldr	r3, [pc, #132]	; (8000670 <MX_ADC1_Init+0x98>)
 80005ec:	4a21      	ldr	r2, [pc, #132]	; (8000674 <MX_ADC1_Init+0x9c>)
 80005ee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005f0:	4b1f      	ldr	r3, [pc, #124]	; (8000670 <MX_ADC1_Init+0x98>)
 80005f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005f8:	4b1d      	ldr	r3, [pc, #116]	; (8000670 <MX_ADC1_Init+0x98>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005fe:	4b1c      	ldr	r3, [pc, #112]	; (8000670 <MX_ADC1_Init+0x98>)
 8000600:	2200      	movs	r2, #0
 8000602:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000604:	4b1a      	ldr	r3, [pc, #104]	; (8000670 <MX_ADC1_Init+0x98>)
 8000606:	2200      	movs	r2, #0
 8000608:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800060a:	4b19      	ldr	r3, [pc, #100]	; (8000670 <MX_ADC1_Init+0x98>)
 800060c:	2200      	movs	r2, #0
 800060e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000612:	4b17      	ldr	r3, [pc, #92]	; (8000670 <MX_ADC1_Init+0x98>)
 8000614:	2200      	movs	r2, #0
 8000616:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000618:	4b15      	ldr	r3, [pc, #84]	; (8000670 <MX_ADC1_Init+0x98>)
 800061a:	4a17      	ldr	r2, [pc, #92]	; (8000678 <MX_ADC1_Init+0xa0>)
 800061c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800061e:	4b14      	ldr	r3, [pc, #80]	; (8000670 <MX_ADC1_Init+0x98>)
 8000620:	2200      	movs	r2, #0
 8000622:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <MX_ADC1_Init+0x98>)
 8000626:	2201      	movs	r2, #1
 8000628:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_ADC1_Init+0x98>)
 800062c:	2200      	movs	r2, #0
 800062e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000632:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <MX_ADC1_Init+0x98>)
 8000634:	2201      	movs	r2, #1
 8000636:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000638:	480d      	ldr	r0, [pc, #52]	; (8000670 <MX_ADC1_Init+0x98>)
 800063a:	f001 f8af 	bl	800179c <HAL_ADC_Init>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000644:	f000 fc80 	bl	8000f48 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000648:	2303      	movs	r3, #3
 800064a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800064c:	2301      	movs	r3, #1
 800064e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000654:	463b      	mov	r3, r7
 8000656:	4619      	mov	r1, r3
 8000658:	4805      	ldr	r0, [pc, #20]	; (8000670 <MX_ADC1_Init+0x98>)
 800065a:	f001 fb1d 	bl	8001c98 <HAL_ADC_ConfigChannel>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000664:	f000 fc70 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000668:	bf00      	nop
 800066a:	3710      	adds	r7, #16
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	200000c4 	.word	0x200000c4
 8000674:	40012000 	.word	0x40012000
 8000678:	0f000001 	.word	0x0f000001

0800067c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08a      	sub	sp, #40	; 0x28
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a19      	ldr	r2, [pc, #100]	; (8000700 <HAL_ADC_MspInit+0x84>)
 800069a:	4293      	cmp	r3, r2
 800069c:	d12b      	bne.n	80006f6 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800069e:	4b19      	ldr	r3, [pc, #100]	; (8000704 <HAL_ADC_MspInit+0x88>)
 80006a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006a2:	4a18      	ldr	r2, [pc, #96]	; (8000704 <HAL_ADC_MspInit+0x88>)
 80006a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006a8:	6453      	str	r3, [r2, #68]	; 0x44
 80006aa:	4b16      	ldr	r3, [pc, #88]	; (8000704 <HAL_ADC_MspInit+0x88>)
 80006ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006b2:	613b      	str	r3, [r7, #16]
 80006b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	4b13      	ldr	r3, [pc, #76]	; (8000704 <HAL_ADC_MspInit+0x88>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a12      	ldr	r2, [pc, #72]	; (8000704 <HAL_ADC_MspInit+0x88>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <HAL_ADC_MspInit+0x88>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	60fb      	str	r3, [r7, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006ce:	2308      	movs	r3, #8
 80006d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d2:	2303      	movs	r3, #3
 80006d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4619      	mov	r1, r3
 80006e0:	4809      	ldr	r0, [pc, #36]	; (8000708 <HAL_ADC_MspInit+0x8c>)
 80006e2:	f001 fed9 	bl	8002498 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2100      	movs	r1, #0
 80006ea:	2012      	movs	r0, #18
 80006ec:	f001 fdfd 	bl	80022ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80006f0:	2012      	movs	r0, #18
 80006f2:	f001 fe16 	bl	8002322 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006f6:	bf00      	nop
 80006f8:	3728      	adds	r7, #40	; 0x28
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40012000 	.word	0x40012000
 8000704:	40023800 	.word	0x40023800
 8000708:	40020000 	.word	0x40020000

0800070c <BH1750_Init>:
 */

#include "bh_1750.h"

void BH1750_Init(BH1750_HandleTypeDef* hbh1750)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b086      	sub	sp, #24
 8000710:	af02      	add	r7, sp, #8
 8000712:	6078      	str	r0, [r7, #4]
	uint8_t a = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	73bb      	strb	r3, [r7, #14]

	a = BH1750_POWER_ON;
 8000718:	2301      	movs	r3, #1
 800071a:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef try = HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address , &a, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	6818      	ldr	r0, [r3, #0]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	791b      	ldrb	r3, [r3, #4]
 8000724:	b299      	uxth	r1, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	689b      	ldr	r3, [r3, #8]
 800072a:	f107 020e 	add.w	r2, r7, #14
 800072e:	9300      	str	r3, [sp, #0]
 8000730:	2301      	movs	r3, #1
 8000732:	f002 f907 	bl	8002944 <HAL_I2C_Master_Transmit>
 8000736:	4603      	mov	r3, r0
 8000738:	73fb      	strb	r3, [r7, #15]

	a = BH1750_CONTINOUS_H_RES_MODE;
 800073a:	2310      	movs	r3, #16
 800073c:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(hbh1750 -> I2C, hbh1750->Address , &a, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	6818      	ldr	r0, [r3, #0]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	791b      	ldrb	r3, [r3, #4]
 8000746:	b299      	uxth	r1, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	689b      	ldr	r3, [r3, #8]
 800074c:	f107 020e 	add.w	r2, r7, #14
 8000750:	9300      	str	r3, [sp, #0]
 8000752:	2301      	movs	r3, #1
 8000754:	f002 f8f6 	bl	8002944 <HAL_I2C_Master_Transmit>
}
 8000758:	bf00      	nop
 800075a:	3710      	adds	r7, #16
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <BH1750_ReadLux>:

float BH1750_ReadLux(BH1750_HandleTypeDef* hbh1750)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b086      	sub	sp, #24
 8000764:	af02      	add	r7, sp, #8
 8000766:	6078      	str	r0, [r7, #4]
	uint8_t rxarray[BH1750_DATA_SIZE];

	HAL_StatusTypeDef dupa = HAL_I2C_Master_Receive(hbh1750->I2C, hbh1750->Address, rxarray, BH1750_DATA_SIZE, hbh1750->Timeout);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	6818      	ldr	r0, [r3, #0]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	791b      	ldrb	r3, [r3, #4]
 8000770:	b299      	uxth	r1, r3
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	689b      	ldr	r3, [r3, #8]
 8000776:	f107 020c 	add.w	r2, r7, #12
 800077a:	9300      	str	r3, [sp, #0]
 800077c:	2302      	movs	r3, #2
 800077e:	f002 f9d5 	bl	8002b2c <HAL_I2C_Master_Receive>
 8000782:	4603      	mov	r3, r0
 8000784:	73fb      	strb	r3, [r7, #15]

	return ((rxarray[BH1750_DATA_MSB]<<8) | rxarray[BH1750_DATA_LSB]) / 1.2; // '|' sumuje oba wyrazenia binarne
 8000786:	7b3b      	ldrb	r3, [r7, #12]
 8000788:	021b      	lsls	r3, r3, #8
 800078a:	7b7a      	ldrb	r2, [r7, #13]
 800078c:	4313      	orrs	r3, r2
 800078e:	ee07 3a90 	vmov	s15, r3
 8000792:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000796:	ed9f 5b06 	vldr	d5, [pc, #24]	; 80007b0 <BH1750_ReadLux+0x50>
 800079a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800079e:	eef7 7bc7 	vcvt.f32.f64	s15, d7

}
 80007a2:	eeb0 0a67 	vmov.f32	s0, s15
 80007a6:	3710      	adds	r7, #16
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	f3af 8000 	nop.w
 80007b0:	33333333 	.word	0x33333333
 80007b4:	3ff33333 	.word	0x3ff33333

080007b8 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08c      	sub	sp, #48	; 0x30
 80007bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	f107 031c 	add.w	r3, r7, #28
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	4b67      	ldr	r3, [pc, #412]	; (800096c <MX_GPIO_Init+0x1b4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a66      	ldr	r2, [pc, #408]	; (800096c <MX_GPIO_Init+0x1b4>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b64      	ldr	r3, [pc, #400]	; (800096c <MX_GPIO_Init+0x1b4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	61bb      	str	r3, [r7, #24]
 80007e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e6:	4b61      	ldr	r3, [pc, #388]	; (800096c <MX_GPIO_Init+0x1b4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a60      	ldr	r2, [pc, #384]	; (800096c <MX_GPIO_Init+0x1b4>)
 80007ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b5e      	ldr	r3, [pc, #376]	; (800096c <MX_GPIO_Init+0x1b4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fa:	617b      	str	r3, [r7, #20]
 80007fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	4b5b      	ldr	r3, [pc, #364]	; (800096c <MX_GPIO_Init+0x1b4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a5a      	ldr	r2, [pc, #360]	; (800096c <MX_GPIO_Init+0x1b4>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b58      	ldr	r3, [pc, #352]	; (800096c <MX_GPIO_Init+0x1b4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	4b55      	ldr	r3, [pc, #340]	; (800096c <MX_GPIO_Init+0x1b4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a54      	ldr	r2, [pc, #336]	; (800096c <MX_GPIO_Init+0x1b4>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b52      	ldr	r3, [pc, #328]	; (800096c <MX_GPIO_Init+0x1b4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082e:	4b4f      	ldr	r3, [pc, #316]	; (800096c <MX_GPIO_Init+0x1b4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	4a4e      	ldr	r2, [pc, #312]	; (800096c <MX_GPIO_Init+0x1b4>)
 8000834:	f043 0308 	orr.w	r3, r3, #8
 8000838:	6313      	str	r3, [r2, #48]	; 0x30
 800083a:	4b4c      	ldr	r3, [pc, #304]	; (800096c <MX_GPIO_Init+0x1b4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	f003 0308 	and.w	r3, r3, #8
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000846:	4b49      	ldr	r3, [pc, #292]	; (800096c <MX_GPIO_Init+0x1b4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a48      	ldr	r2, [pc, #288]	; (800096c <MX_GPIO_Init+0x1b4>)
 800084c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b46      	ldr	r3, [pc, #280]	; (800096c <MX_GPIO_Init+0x1b4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	f244 0181 	movw	r1, #16513	; 0x4081
 8000864:	4842      	ldr	r0, [pc, #264]	; (8000970 <MX_GPIO_Init+0x1b8>)
 8000866:	f001 ffc3 	bl	80027f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2140      	movs	r1, #64	; 0x40
 800086e:	4841      	ldr	r0, [pc, #260]	; (8000974 <MX_GPIO_Init+0x1bc>)
 8000870:	f001 ffbe 	bl	80027f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000874:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800087a:	4b3f      	ldr	r3, [pc, #252]	; (8000978 <MX_GPIO_Init+0x1c0>)
 800087c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	483c      	ldr	r0, [pc, #240]	; (800097c <MX_GPIO_Init+0x1c4>)
 800088a:	f001 fe05 	bl	8002498 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800088e:	2332      	movs	r3, #50	; 0x32
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000892:	2302      	movs	r3, #2
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089a:	2303      	movs	r3, #3
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800089e:	230b      	movs	r3, #11
 80008a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	4834      	ldr	r0, [pc, #208]	; (800097c <MX_GPIO_Init+0x1c4>)
 80008aa:	f001 fdf5 	bl	8002498 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80008ae:	2386      	movs	r3, #134	; 0x86
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b2:	2302      	movs	r3, #2
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ba:	2303      	movs	r3, #3
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008be:	230b      	movs	r3, #11
 80008c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	482d      	ldr	r0, [pc, #180]	; (8000980 <MX_GPIO_Init+0x1c8>)
 80008ca:	f001 fde5 	bl	8002498 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008ce:	f244 0381 	movw	r3, #16513	; 0x4081
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	4822      	ldr	r0, [pc, #136]	; (8000970 <MX_GPIO_Init+0x1b8>)
 80008e8:	f001 fdd6 	bl	8002498 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80008ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f2:	2302      	movs	r3, #2
 80008f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fa:	2303      	movs	r3, #3
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008fe:	230b      	movs	r3, #11
 8000900:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	4619      	mov	r1, r3
 8000908:	4819      	ldr	r0, [pc, #100]	; (8000970 <MX_GPIO_Init+0x1b8>)
 800090a:	f001 fdc5 	bl	8002498 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800090e:	2340      	movs	r3, #64	; 0x40
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	4813      	ldr	r0, [pc, #76]	; (8000974 <MX_GPIO_Init+0x1bc>)
 8000926:	f001 fdb7 	bl	8002498 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800092a:	2380      	movs	r3, #128	; 0x80
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092e:	2300      	movs	r3, #0
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	480d      	ldr	r0, [pc, #52]	; (8000974 <MX_GPIO_Init+0x1bc>)
 800093e:	f001 fdab 	bl	8002498 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000942:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000948:	2302      	movs	r3, #2
 800094a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000950:	2303      	movs	r3, #3
 8000952:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000954:	230b      	movs	r3, #11
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4619      	mov	r1, r3
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_GPIO_Init+0x1bc>)
 8000960:	f001 fd9a 	bl	8002498 <HAL_GPIO_Init>

}
 8000964:	bf00      	nop
 8000966:	3730      	adds	r7, #48	; 0x30
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40023800 	.word	0x40023800
 8000970:	40020400 	.word	0x40020400
 8000974:	40021800 	.word	0x40021800
 8000978:	10110000 	.word	0x10110000
 800097c:	40020800 	.word	0x40020800
 8000980:	40020000 	.word	0x40020000

08000984 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000988:	4b1b      	ldr	r3, [pc, #108]	; (80009f8 <MX_I2C1_Init+0x74>)
 800098a:	4a1c      	ldr	r2, [pc, #112]	; (80009fc <MX_I2C1_Init+0x78>)
 800098c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800098e:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <MX_I2C1_Init+0x74>)
 8000990:	4a1b      	ldr	r2, [pc, #108]	; (8000a00 <MX_I2C1_Init+0x7c>)
 8000992:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000994:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <MX_I2C1_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800099a:	4b17      	ldr	r3, [pc, #92]	; (80009f8 <MX_I2C1_Init+0x74>)
 800099c:	2201      	movs	r2, #1
 800099e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009a0:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <MX_I2C1_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009a6:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <MX_I2C1_Init+0x74>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009ac:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <MX_I2C1_Init+0x74>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_I2C1_Init+0x74>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <MX_I2C1_Init+0x74>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009be:	480e      	ldr	r0, [pc, #56]	; (80009f8 <MX_I2C1_Init+0x74>)
 80009c0:	f001 ff30 	bl	8002824 <HAL_I2C_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009ca:	f000 fabd 	bl	8000f48 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ce:	2100      	movs	r1, #0
 80009d0:	4809      	ldr	r0, [pc, #36]	; (80009f8 <MX_I2C1_Init+0x74>)
 80009d2:	f003 f8f5 	bl	8003bc0 <HAL_I2CEx_ConfigAnalogFilter>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009dc:	f000 fab4 	bl	8000f48 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009e0:	2100      	movs	r1, #0
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_I2C1_Init+0x74>)
 80009e4:	f003 f937 	bl	8003c56 <HAL_I2CEx_ConfigDigitalFilter>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009ee:	f000 faab 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	2000010c 	.word	0x2000010c
 80009fc:	40005400 	.word	0x40005400
 8000a00:	20303e5d 	.word	0x20303e5d

08000a04 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b08a      	sub	sp, #40	; 0x28
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a1f      	ldr	r2, [pc, #124]	; (8000aa0 <HAL_I2C_MspInit+0x9c>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d138      	bne.n	8000a98 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a26:	4b1f      	ldr	r3, [pc, #124]	; (8000aa4 <HAL_I2C_MspInit+0xa0>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a1e      	ldr	r2, [pc, #120]	; (8000aa4 <HAL_I2C_MspInit+0xa0>)
 8000a2c:	f043 0302 	orr.w	r3, r3, #2
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b1c      	ldr	r3, [pc, #112]	; (8000aa4 <HAL_I2C_MspInit+0xa0>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0302 	and.w	r3, r3, #2
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a3e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a44:	2312      	movs	r3, #18
 8000a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a50:	2304      	movs	r3, #4
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4813      	ldr	r0, [pc, #76]	; (8000aa8 <HAL_I2C_MspInit+0xa4>)
 8000a5c:	f001 fd1c 	bl	8002498 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a60:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <HAL_I2C_MspInit+0xa0>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a64:	4a0f      	ldr	r2, [pc, #60]	; (8000aa4 <HAL_I2C_MspInit+0xa0>)
 8000a66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6c:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <HAL_I2C_MspInit+0xa0>)
 8000a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	201f      	movs	r0, #31
 8000a7e:	f001 fc34 	bl	80022ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000a82:	201f      	movs	r0, #31
 8000a84:	f001 fc4d 	bl	8002322 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	2020      	movs	r0, #32
 8000a8e:	f001 fc2c 	bl	80022ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000a92:	2020      	movs	r0, #32
 8000a94:	f001 fc45 	bl	8002322 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a98:	bf00      	nop
 8000a9a:	3728      	adds	r7, #40	; 0x28
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40005400 	.word	0x40005400
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40020400 	.word	0x40020400

08000aac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	PID.Kp = PID_PARAM_KP;
 8000ab0:	4b1c      	ldr	r3, [pc, #112]	; (8000b24 <main+0x78>)
 8000ab2:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8000ab6:	619a      	str	r2, [r3, #24]
	PID.Ki = PID_PARAM_KI;
 8000ab8:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <main+0x78>)
 8000aba:	4a1b      	ldr	r2, [pc, #108]	; (8000b28 <main+0x7c>)
 8000abc:	61da      	str	r2, [r3, #28]
	PID.Kd = PID_PARAM_KD;
 8000abe:	4b19      	ldr	r3, [pc, #100]	; (8000b24 <main+0x78>)
 8000ac0:	f04f 0200 	mov.w	r2, #0
 8000ac4:	621a      	str	r2, [r3, #32]

	arm_pid_init_f32(&PID, 1);
 8000ac6:	2101      	movs	r1, #1
 8000ac8:	4816      	ldr	r0, [pc, #88]	; (8000b24 <main+0x78>)
 8000aca:	f007 f8c9 	bl	8007c60 <arm_pid_init_f32>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ace:	f000 fde4 	bl	800169a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ad2:	f000 f839 	bl	8000b48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad6:	f7ff fe6f 	bl	80007b8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000ada:	f000 fcaf 	bl	800143c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ade:	f000 fd29 	bl	8001534 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000ae2:	f7ff ff4f 	bl	8000984 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000ae6:	f000 fb07 	bl	80010f8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000aea:	f000 fb53 	bl	8001194 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000aee:	f7ff fd73 	bl	80005d8 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000af2:	f000 fbc7 	bl	8001284 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

	//inicjalizacja czujnika światła
	BH1750_Init(&hbh1750_1);
 8000af6:	480d      	ldr	r0, [pc, #52]	; (8000b2c <main+0x80>)
 8000af8:	f7ff fe08 	bl	800070c <BH1750_Init>

	//start timera odpowiadającego za cykliczny pomiar i realizację sterowania
	HAL_TIM_Base_Start_IT(&htim2);
 8000afc:	480c      	ldr	r0, [pc, #48]	; (8000b30 <main+0x84>)
 8000afe:	f004 fbcf 	bl	80052a0 <HAL_TIM_Base_Start_IT>
	//start timera odpowiadającego za przesyłanie wartości na port szeregowy
	HAL_TIM_Base_Start_IT(&htim4);
 8000b02:	480c      	ldr	r0, [pc, #48]	; (8000b34 <main+0x88>)
 8000b04:	f004 fbcc 	bl	80052a0 <HAL_TIM_Base_Start_IT>
	//wystartowanie PWM
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000b08:	2100      	movs	r1, #0
 8000b0a:	480b      	ldr	r0, [pc, #44]	; (8000b38 <main+0x8c>)
 8000b0c:	f004 fca2 	bl	8005454 <HAL_TIM_PWM_Start>
	//przypisanie wypełnienia do kanału pwm
	//__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm);
	//nasłuch na komendę z terminala UART w trybie przerwaniowym
	HAL_UART_Receive_IT(&huart3, (uint8_t*)user_val, 4);
 8000b10:	2204      	movs	r2, #4
 8000b12:	490a      	ldr	r1, [pc, #40]	; (8000b3c <main+0x90>)
 8000b14:	480a      	ldr	r0, [pc, #40]	; (8000b40 <main+0x94>)
 8000b16:	f005 fe00 	bl	800671a <HAL_UART_Receive_IT>

	//Start ADC w trybieprzerwaniowym
	HAL_ADC_Start_IT(&hadc1);
 8000b1a:	480a      	ldr	r0, [pc, #40]	; (8000b44 <main+0x98>)
 8000b1c:	f000 fe82 	bl	8001824 <HAL_ADC_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000b20:	e7fe      	b.n	8000b20 <main+0x74>
 8000b22:	bf00      	nop
 8000b24:	20000158 	.word	0x20000158
 8000b28:	3dcccccd 	.word	0x3dcccccd
 8000b2c:	20000000 	.word	0x20000000
 8000b30:	20000264 	.word	0x20000264
 8000b34:	200001cc 	.word	0x200001cc
 8000b38:	20000218 	.word	0x20000218
 8000b3c:	20000184 	.word	0x20000184
 8000b40:	200002b0 	.word	0x200002b0
 8000b44:	200000c4 	.word	0x200000c4

08000b48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b0b8      	sub	sp, #224	; 0xe0
 8000b4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b4e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b52:	2234      	movs	r2, #52	; 0x34
 8000b54:	2100      	movs	r1, #0
 8000b56:	4618      	mov	r0, r3
 8000b58:	f007 f8ca 	bl	8007cf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b5c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b6c:	f107 0308 	add.w	r3, r7, #8
 8000b70:	2290      	movs	r2, #144	; 0x90
 8000b72:	2100      	movs	r1, #0
 8000b74:	4618      	mov	r0, r3
 8000b76:	f007 f8bb 	bl	8007cf0 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b7a:	f003 fa01 	bl	8003f80 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7e:	4b3d      	ldr	r3, [pc, #244]	; (8000c74 <SystemClock_Config+0x12c>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	4a3c      	ldr	r2, [pc, #240]	; (8000c74 <SystemClock_Config+0x12c>)
 8000b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b88:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8a:	4b3a      	ldr	r3, [pc, #232]	; (8000c74 <SystemClock_Config+0x12c>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b96:	4b38      	ldr	r3, [pc, #224]	; (8000c78 <SystemClock_Config+0x130>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b9e:	4a36      	ldr	r2, [pc, #216]	; (8000c78 <SystemClock_Config+0x130>)
 8000ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba4:	6013      	str	r3, [r2, #0]
 8000ba6:	4b34      	ldr	r3, [pc, #208]	; (8000c78 <SystemClock_Config+0x130>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bb8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000bbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bc6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bce:	2304      	movs	r3, #4
 8000bd0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000bd4:	2360      	movs	r3, #96	; 0x60
 8000bd6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000be0:	2304      	movs	r3, #4
 8000be2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000be6:	2302      	movs	r3, #2
 8000be8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bec:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f003 fa25 	bl	8004040 <HAL_RCC_OscConfig>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000bfc:	f000 f9a4 	bl	8000f48 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c00:	f003 f9ce 	bl	8003fa0 <HAL_PWREx_EnableOverDrive>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000c0a:	f000 f99d 	bl	8000f48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c0e:	230f      	movs	r3, #15
 8000c10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c14:	2302      	movs	r3, #2
 8000c16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c2e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000c32:	2103      	movs	r1, #3
 8000c34:	4618      	mov	r0, r3
 8000c36:	f003 fcb1 	bl	800459c <HAL_RCC_ClockConfig>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000c40:	f000 f982 	bl	8000f48 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 8000c44:	4b0d      	ldr	r3, [pc, #52]	; (8000c7c <SystemClock_Config+0x134>)
 8000c46:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c56:	f107 0308 	add.w	r3, r7, #8
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f003 fea0 	bl	80049a0 <HAL_RCCEx_PeriphCLKConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <SystemClock_Config+0x122>
  {
    Error_Handler();
 8000c66:	f000 f96f 	bl	8000f48 <Error_Handler>
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	37e0      	adds	r7, #224	; 0xe0
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40007000 	.word	0x40007000
 8000c7c:	00204100 	.word	0x00204100

08000c80 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 4 */


////przerwanie od portu szeregowego przyjmujące i przypisujące do zmiennej zadaną wartość
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]

	//obliczenie żądanej wartości natężenia oświetlenia
	lux_by_UART = 1000*((int)user_val[0] - 48) + 100*((int)user_val[1] - 48) + 10*((int)user_val[2] - 48) + 1*((int)user_val[3] - 48);
 8000c88:	4b18      	ldr	r3, [pc, #96]	; (8000cec <HAL_UART_RxCpltCallback+0x6c>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	3b30      	subs	r3, #48	; 0x30
 8000c8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c92:	fb02 f203 	mul.w	r2, r2, r3
 8000c96:	4b15      	ldr	r3, [pc, #84]	; (8000cec <HAL_UART_RxCpltCallback+0x6c>)
 8000c98:	785b      	ldrb	r3, [r3, #1]
 8000c9a:	3b30      	subs	r3, #48	; 0x30
 8000c9c:	2164      	movs	r1, #100	; 0x64
 8000c9e:	fb01 f303 	mul.w	r3, r1, r3
 8000ca2:	18d1      	adds	r1, r2, r3
 8000ca4:	4b11      	ldr	r3, [pc, #68]	; (8000cec <HAL_UART_RxCpltCallback+0x6c>)
 8000ca6:	789b      	ldrb	r3, [r3, #2]
 8000ca8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000cac:	4613      	mov	r3, r2
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	4413      	add	r3, r2
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	18ca      	adds	r2, r1, r3
 8000cb6:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <HAL_UART_RxCpltCallback+0x6c>)
 8000cb8:	78db      	ldrb	r3, [r3, #3]
 8000cba:	3b30      	subs	r3, #48	; 0x30
 8000cbc:	4413      	add	r3, r2
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <HAL_UART_RxCpltCallback+0x70>)
 8000cc2:	601a      	str	r2, [r3, #0]

	if(lux_by_UART > max_lux)
 8000cc4:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <HAL_UART_RxCpltCallback+0x70>)
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	4b0a      	ldr	r3, [pc, #40]	; (8000cf4 <HAL_UART_RxCpltCallback+0x74>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d903      	bls.n	8000cd8 <HAL_UART_RxCpltCallback+0x58>
	{
		lux_by_UART = max_lux;
 8000cd0:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <HAL_UART_RxCpltCallback+0x74>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a06      	ldr	r2, [pc, #24]	; (8000cf0 <HAL_UART_RxCpltCallback+0x70>)
 8000cd6:	6013      	str	r3, [r2, #0]
	}

	//__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm);
	HAL_UART_Receive_IT(&huart3, (uint8_t*)user_val, 4);
 8000cd8:	2204      	movs	r2, #4
 8000cda:	4904      	ldr	r1, [pc, #16]	; (8000cec <HAL_UART_RxCpltCallback+0x6c>)
 8000cdc:	4806      	ldr	r0, [pc, #24]	; (8000cf8 <HAL_UART_RxCpltCallback+0x78>)
 8000cde:	f005 fd1c 	bl	800671a <HAL_UART_Receive_IT>
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000184 	.word	0x20000184
 8000cf0:	200000ac 	.word	0x200000ac
 8000cf4:	2000000c 	.word	0x2000000c
 8000cf8:	200002b0 	.word	0x200002b0
 8000cfc:	00000000 	.word	0x00000000

08000d00 <HAL_ADC_ConvCpltCallback>:

//przerwanie od ADC
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]

		ADC_measurement = HAL_ADC_GetValue(&hadc1);
 8000d08:	4821      	ldr	r0, [pc, #132]	; (8000d90 <HAL_ADC_ConvCpltCallback+0x90>)
 8000d0a:	f000 ffa4 	bl	8001c56 <HAL_ADC_GetValue>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	4a20      	ldr	r2, [pc, #128]	; (8000d94 <HAL_ADC_ConvCpltCallback+0x94>)
 8000d12:	6013      	str	r3, [r2, #0]
		ADC_voltage = ((float)ADC_measurement / (float)ADC_REG_MAX) * ADC_VOLTAGE_MAX;
 8000d14:	4b1f      	ldr	r3, [pc, #124]	; (8000d94 <HAL_ADC_ConvCpltCallback+0x94>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	ee07 3a90 	vmov	s15, r3
 8000d1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000d20:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8000d98 <HAL_ADC_ConvCpltCallback+0x98>
 8000d24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d2c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000d9c <HAL_ADC_ConvCpltCallback+0x9c>
 8000d30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d34:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <HAL_ADC_ConvCpltCallback+0xa0>)
 8000d36:	edc3 7a00 	vstr	s15, [r3]
		ADC_voltage_mV = (uint32_t)(1000.0*ADC_voltage);
 8000d3a:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <HAL_ADC_ConvCpltCallback+0xa0>)
 8000d3c:	edd3 7a00 	vldr	s15, [r3]
 8000d40:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000d44:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8000d80 <HAL_ADC_ConvCpltCallback+0x80>
 8000d48:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000d4c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000d50:	ee17 2a90 	vmov	r2, s15
 8000d54:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <HAL_ADC_ConvCpltCallback+0xa4>)
 8000d56:	601a      	str	r2, [r3, #0]


	lux_by_ADC = ADC_voltage_mV * LUXTOMV_RATIO;
 8000d58:	4b12      	ldr	r3, [pc, #72]	; (8000da4 <HAL_ADC_ConvCpltCallback+0xa4>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	ee07 3a90 	vmov	s15, r3
 8000d60:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000d64:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8000d88 <HAL_ADC_ConvCpltCallback+0x88>
 8000d68:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000d6c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000d70:	4b0d      	ldr	r3, [pc, #52]	; (8000da8 <HAL_ADC_ConvCpltCallback+0xa8>)
 8000d72:	edc3 7a00 	vstr	s15, [r3]
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	00000000 	.word	0x00000000
 8000d84:	408f4000 	.word	0x408f4000
 8000d88:	8db8bac7 	.word	0x8db8bac7
 8000d8c:	3fdaf006 	.word	0x3fdaf006
 8000d90:	200000c4 	.word	0x200000c4
 8000d94:	2000009c 	.word	0x2000009c
 8000d98:	00000fff 	.word	0x00000fff
 8000d9c:	40533333 	.word	0x40533333
 8000da0:	200000a0 	.word	0x200000a0
 8000da4:	200000a4 	.word	0x200000a4
 8000da8:	200000a8 	.word	0x200000a8

08000dac <HAL_TIM_PeriodElapsedCallback>:

//przerwanie od timera realizujące pomiar oraz sterowanie co odp czest.
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b088      	sub	sp, #32
 8000db0:	af02      	add	r7, sp, #8
 8000db2:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dbc:	d177      	bne.n	8000eae <HAL_TIM_PeriodElapsedCallback+0x102>
	{
		// odczyt natężenia światła
			light = BH1750_ReadLux(&hbh1750_1);
 8000dbe:	4851      	ldr	r0, [pc, #324]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000dc0:	f7ff fcce 	bl	8000760 <BH1750_ReadLux>
 8000dc4:	eef0 7a40 	vmov.f32	s15, s0
 8000dc8:	4b4f      	ldr	r3, [pc, #316]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000dca:	edc3 7a00 	vstr	s15, [r3]

			pid_error = lux_by_ADC - light;
 8000dce:	4b4f      	ldr	r3, [pc, #316]	; (8000f0c <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000dd0:	ed93 7a00 	vldr	s14, [r3]
 8000dd4:	4b4c      	ldr	r3, [pc, #304]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000dd6:	edd3 7a00 	vldr	s15, [r3]
 8000dda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dde:	4b4c      	ldr	r3, [pc, #304]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000de0:	edc3 7a00 	vstr	s15, [r3]

			duty = arm_pid_f32(&PID, pid_error);
 8000de4:	4b4a      	ldr	r3, [pc, #296]	; (8000f10 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a4a      	ldr	r2, [pc, #296]	; (8000f14 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000dea:	617a      	str	r2, [r7, #20]
 8000dec:	613b      	str	r3, [r7, #16]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	ed93 7a00 	vldr	s14, [r3]
 8000df4:	edd7 7a04 	vldr	s15, [r7, #16]
 8000df8:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	edd3 6a01 	vldr	s13, [r3, #4]
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	edd3 7a03 	vldr	s15, [r3, #12]
 8000e08:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8000e0c:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	edd3 6a02 	vldr	s13, [r3, #8]
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	edd3 7a04 	vldr	s15, [r3, #16]
 8000e1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8000e2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e2e:	edc7 7a03 	vstr	s15, [r7, #12]

    /* Update state */
    S->state[1] = S->state[0];
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	68da      	ldr	r2, [r3, #12]
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	4a33      	ldr	r2, [pc, #204]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000e4a:	6013      	str	r3, [r2, #0]

			if (duty > 1000) {
 8000e4c:	4b32      	ldr	r3, [pc, #200]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000e4e:	edd3 7a00 	vldr	s15, [r3]
 8000e52:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8000f1c <HAL_TIM_PeriodElapsedCallback+0x170>
 8000e56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e5e:	dd03      	ble.n	8000e68 <HAL_TIM_PeriodElapsedCallback+0xbc>
				duty = 1000;
 8000e60:	4b2d      	ldr	r3, [pc, #180]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000e62:	4a2f      	ldr	r2, [pc, #188]	; (8000f20 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	e00b      	b.n	8000e80 <HAL_TIM_PeriodElapsedCallback+0xd4>
			} else if (duty < 0) {
 8000e68:	4b2b      	ldr	r3, [pc, #172]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000e6a:	edd3 7a00 	vldr	s15, [r3]
 8000e6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e76:	d503      	bpl.n	8000e80 <HAL_TIM_PeriodElapsedCallback+0xd4>
				duty = 0;
 8000e78:	4b27      	ldr	r3, [pc, #156]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000e7a:	f04f 0200 	mov.w	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
			}

			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, duty);
 8000e80:	4b25      	ldr	r3, [pc, #148]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000e82:	edd3 7a00 	vldr	s15, [r3]
 8000e86:	4b27      	ldr	r3, [pc, #156]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e8e:	ee17 2a90 	vmov	r2, s15
 8000e92:	635a      	str	r2, [r3, #52]	; 0x34


			// odczyt natężenia światła - całkowity
			light_calkowite = (uint16_t)light;
 8000e94:	4b1c      	ldr	r3, [pc, #112]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000e96:	edd3 7a00 	vldr	s15, [r3]
 8000e9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e9e:	ee17 3a90 	vmov	r3, s15
 8000ea2:	b29a      	uxth	r2, r3
 8000ea4:	4b20      	ldr	r3, [pc, #128]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000ea6:	801a      	strh	r2, [r3, #0]

			//Start ADC w trybieprzerwaniowym
		HAL_ADC_Start_IT(&hadc1);
 8000ea8:	4820      	ldr	r0, [pc, #128]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000eaa:	f000 fcbb 	bl	8001824 <HAL_ADC_Start_IT>
	}
	if(htim -> Instance == TIM4)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a1f      	ldr	r2, [pc, #124]	; (8000f30 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d120      	bne.n	8000efa <HAL_TIM_PeriodElapsedCallback+0x14e>
	{
		length = sprintf(data_msg, " POM: %d \[lux\] , REF: %d \[lux\] , STER: %d \r\n", (int)light,  lux_by_UART, (int)duty);
 8000eb8:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000eba:	edd3 7a00 	vldr	s15, [r3]
 8000ebe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8000ec2:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a14      	ldr	r2, [pc, #80]	; (8000f18 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000ec8:	edd2 7a00 	vldr	s15, [r2]
 8000ecc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ed0:	ee17 2a90 	vmov	r2, s15
 8000ed4:	9200      	str	r2, [sp, #0]
 8000ed6:	ee17 2a10 	vmov	r2, s14
 8000eda:	4917      	ldr	r1, [pc, #92]	; (8000f38 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000edc:	4817      	ldr	r0, [pc, #92]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000ede:	f006 ff0f 	bl	8007d00 <siprintf>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	4a16      	ldr	r2, [pc, #88]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000ee6:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart3, data_msg, length, 0xffff);
 8000ee8:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ef2:	4912      	ldr	r1, [pc, #72]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000ef4:	4813      	ldr	r0, [pc, #76]	; (8000f44 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000ef6:	f005 fb7d 	bl	80065f4 <HAL_UART_Transmit>
	}
}
 8000efa:	bf00      	nop
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000000 	.word	0x20000000
 8000f08:	20000180 	.word	0x20000180
 8000f0c:	200000a8 	.word	0x200000a8
 8000f10:	200000b0 	.word	0x200000b0
 8000f14:	20000158 	.word	0x20000158
 8000f18:	200000b4 	.word	0x200000b4
 8000f1c:	447a0000 	.word	0x447a0000
 8000f20:	447a0000 	.word	0x447a0000
 8000f24:	20000218 	.word	0x20000218
 8000f28:	20000188 	.word	0x20000188
 8000f2c:	200000c4 	.word	0x200000c4
 8000f30:	40000800 	.word	0x40000800
 8000f34:	200000ac 	.word	0x200000ac
 8000f38:	08008574 	.word	0x08008574
 8000f3c:	2000018c 	.word	0x2000018c
 8000f40:	2000017c 	.word	0x2000017c
 8000f44:	200002b0 	.word	0x200002b0

08000f48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f4c:	b672      	cpsid	i
}
 8000f4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000f50:	e7fe      	b.n	8000f50 <Error_Handler+0x8>
	...

08000f54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000f5a:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <HAL_MspInit+0x44>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	4a0e      	ldr	r2, [pc, #56]	; (8000f98 <HAL_MspInit+0x44>)
 8000f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f64:	6413      	str	r3, [r2, #64]	; 0x40
 8000f66:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <HAL_MspInit+0x44>)
 8000f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f72:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <HAL_MspInit+0x44>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	4a08      	ldr	r2, [pc, #32]	; (8000f98 <HAL_MspInit+0x44>)
 8000f78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_MspInit+0x44>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	40023800 	.word	0x40023800

08000f9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <NMI_Handler+0x4>

08000fa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa6:	e7fe      	b.n	8000fa6 <HardFault_Handler+0x4>

08000fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fac:	e7fe      	b.n	8000fac <MemManage_Handler+0x4>

08000fae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fb2:	e7fe      	b.n	8000fb2 <BusFault_Handler+0x4>

08000fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb8:	e7fe      	b.n	8000fb8 <UsageFault_Handler+0x4>

08000fba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe8:	f000 fb94 	bl	8001714 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ff4:	4802      	ldr	r0, [pc, #8]	; (8001000 <ADC_IRQHandler+0x10>)
 8000ff6:	f000 fced 	bl	80019d4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	200000c4 	.word	0x200000c4

08001004 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001008:	4802      	ldr	r0, [pc, #8]	; (8001014 <TIM2_IRQHandler+0x10>)
 800100a:	f004 fb1d 	bl	8005648 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000264 	.word	0x20000264

08001018 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <TIM4_IRQHandler+0x10>)
 800101e:	f004 fb13 	bl	8005648 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200001cc 	.word	0x200001cc

0800102c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001030:	4802      	ldr	r0, [pc, #8]	; (800103c <I2C1_EV_IRQHandler+0x10>)
 8001032:	f001 fe71 	bl	8002d18 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	2000010c 	.word	0x2000010c

08001040 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001044:	4802      	ldr	r0, [pc, #8]	; (8001050 <I2C1_ER_IRQHandler+0x10>)
 8001046:	f001 fe81 	bl	8002d4c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	2000010c 	.word	0x2000010c

08001054 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001058:	4802      	ldr	r0, [pc, #8]	; (8001064 <USART3_IRQHandler+0x10>)
 800105a:	f005 fb9b 	bl	8006794 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200002b0 	.word	0x200002b0

08001068 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001070:	4a14      	ldr	r2, [pc, #80]	; (80010c4 <_sbrk+0x5c>)
 8001072:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <_sbrk+0x60>)
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800107c:	4b13      	ldr	r3, [pc, #76]	; (80010cc <_sbrk+0x64>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d102      	bne.n	800108a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001084:	4b11      	ldr	r3, [pc, #68]	; (80010cc <_sbrk+0x64>)
 8001086:	4a12      	ldr	r2, [pc, #72]	; (80010d0 <_sbrk+0x68>)
 8001088:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <_sbrk+0x64>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	429a      	cmp	r2, r3
 8001096:	d207      	bcs.n	80010a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001098:	f006 fe00 	bl	8007c9c <__errno>
 800109c:	4603      	mov	r3, r0
 800109e:	220c      	movs	r2, #12
 80010a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010a2:	f04f 33ff 	mov.w	r3, #4294967295
 80010a6:	e009      	b.n	80010bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010a8:	4b08      	ldr	r3, [pc, #32]	; (80010cc <_sbrk+0x64>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ae:	4b07      	ldr	r3, [pc, #28]	; (80010cc <_sbrk+0x64>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4413      	add	r3, r2
 80010b6:	4a05      	ldr	r2, [pc, #20]	; (80010cc <_sbrk+0x64>)
 80010b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ba:	68fb      	ldr	r3, [r7, #12]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20080000 	.word	0x20080000
 80010c8:	00000400 	.word	0x00000400
 80010cc:	200000b8 	.word	0x200000b8
 80010d0:	20000750 	.word	0x20000750

080010d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <SystemInit+0x20>)
 80010da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010de:	4a05      	ldr	r2, [pc, #20]	; (80010f4 <SystemInit+0x20>)
 80010e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010fe:	f107 0310 	add.w	r3, r7, #16
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001116:	4b1e      	ldr	r3, [pc, #120]	; (8001190 <MX_TIM2_Init+0x98>)
 8001118:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800111c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9600-1;
 800111e:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <MX_TIM2_Init+0x98>)
 8001120:	f242 527f 	movw	r2, #9599	; 0x257f
 8001124:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001126:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <MX_TIM2_Init+0x98>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800112c:	4b18      	ldr	r3, [pc, #96]	; (8001190 <MX_TIM2_Init+0x98>)
 800112e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001132:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001134:	4b16      	ldr	r3, [pc, #88]	; (8001190 <MX_TIM2_Init+0x98>)
 8001136:	2200      	movs	r2, #0
 8001138:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <MX_TIM2_Init+0x98>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001140:	4813      	ldr	r0, [pc, #76]	; (8001190 <MX_TIM2_Init+0x98>)
 8001142:	f004 f855 	bl	80051f0 <HAL_TIM_Base_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800114c:	f7ff fefc 	bl	8000f48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001150:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001154:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001156:	f107 0310 	add.w	r3, r7, #16
 800115a:	4619      	mov	r1, r3
 800115c:	480c      	ldr	r0, [pc, #48]	; (8001190 <MX_TIM2_Init+0x98>)
 800115e:	f004 fca3 	bl	8005aa8 <HAL_TIM_ConfigClockSource>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001168:	f7ff feee 	bl	8000f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116c:	2300      	movs	r3, #0
 800116e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	4619      	mov	r1, r3
 8001178:	4805      	ldr	r0, [pc, #20]	; (8001190 <MX_TIM2_Init+0x98>)
 800117a:	f005 f941 	bl	8006400 <HAL_TIMEx_MasterConfigSynchronization>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001184:	f7ff fee0 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	3720      	adds	r7, #32
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000264 	.word	0x20000264

08001194 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08e      	sub	sp, #56	; 0x38
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800119a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a8:	f107 031c 	add.w	r3, r7, #28
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011b4:	463b      	mov	r3, r7
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
 80011c0:	611a      	str	r2, [r3, #16]
 80011c2:	615a      	str	r2, [r3, #20]
 80011c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011c6:	4b2d      	ldr	r3, [pc, #180]	; (800127c <MX_TIM3_Init+0xe8>)
 80011c8:	4a2d      	ldr	r2, [pc, #180]	; (8001280 <MX_TIM3_Init+0xec>)
 80011ca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 96-1;
 80011cc:	4b2b      	ldr	r3, [pc, #172]	; (800127c <MX_TIM3_Init+0xe8>)
 80011ce:	225f      	movs	r2, #95	; 0x5f
 80011d0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d2:	4b2a      	ldr	r3, [pc, #168]	; (800127c <MX_TIM3_Init+0xe8>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80011d8:	4b28      	ldr	r3, [pc, #160]	; (800127c <MX_TIM3_Init+0xe8>)
 80011da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e0:	4b26      	ldr	r3, [pc, #152]	; (800127c <MX_TIM3_Init+0xe8>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e6:	4b25      	ldr	r3, [pc, #148]	; (800127c <MX_TIM3_Init+0xe8>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011ec:	4823      	ldr	r0, [pc, #140]	; (800127c <MX_TIM3_Init+0xe8>)
 80011ee:	f003 ffff 	bl	80051f0 <HAL_TIM_Base_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80011f8:	f7ff fea6 	bl	8000f48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001200:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001202:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001206:	4619      	mov	r1, r3
 8001208:	481c      	ldr	r0, [pc, #112]	; (800127c <MX_TIM3_Init+0xe8>)
 800120a:	f004 fc4d 	bl	8005aa8 <HAL_TIM_ConfigClockSource>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001214:	f7ff fe98 	bl	8000f48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001218:	4818      	ldr	r0, [pc, #96]	; (800127c <MX_TIM3_Init+0xe8>)
 800121a:	f004 f8b9 	bl	8005390 <HAL_TIM_PWM_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001224:	f7ff fe90 	bl	8000f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001228:	2300      	movs	r3, #0
 800122a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800122c:	2300      	movs	r3, #0
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001230:	f107 031c 	add.w	r3, r7, #28
 8001234:	4619      	mov	r1, r3
 8001236:	4811      	ldr	r0, [pc, #68]	; (800127c <MX_TIM3_Init+0xe8>)
 8001238:	f005 f8e2 	bl	8006400 <HAL_TIMEx_MasterConfigSynchronization>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001242:	f7ff fe81 	bl	8000f48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001246:	2360      	movs	r3, #96	; 0x60
 8001248:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800124e:	2300      	movs	r3, #0
 8001250:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001256:	463b      	mov	r3, r7
 8001258:	2200      	movs	r2, #0
 800125a:	4619      	mov	r1, r3
 800125c:	4807      	ldr	r0, [pc, #28]	; (800127c <MX_TIM3_Init+0xe8>)
 800125e:	f004 fb13 	bl	8005888 <HAL_TIM_PWM_ConfigChannel>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001268:	f7ff fe6e 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800126c:	4803      	ldr	r0, [pc, #12]	; (800127c <MX_TIM3_Init+0xe8>)
 800126e:	f000 f8ad 	bl	80013cc <HAL_TIM_MspPostInit>

}
 8001272:	bf00      	nop
 8001274:	3738      	adds	r7, #56	; 0x38
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000218 	.word	0x20000218
 8001280:	40000400 	.word	0x40000400

08001284 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800128a:	f107 0310 	add.w	r3, r7, #16
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001298:	1d3b      	adds	r3, r7, #4
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	605a      	str	r2, [r3, #4]
 80012a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012a2:	4b1e      	ldr	r3, [pc, #120]	; (800131c <MX_TIM4_Init+0x98>)
 80012a4:	4a1e      	ldr	r2, [pc, #120]	; (8001320 <MX_TIM4_Init+0x9c>)
 80012a6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9600-1;
 80012a8:	4b1c      	ldr	r3, [pc, #112]	; (800131c <MX_TIM4_Init+0x98>)
 80012aa:	f242 527f 	movw	r2, #9599	; 0x257f
 80012ae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b0:	4b1a      	ldr	r3, [pc, #104]	; (800131c <MX_TIM4_Init+0x98>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 80012b6:	4b19      	ldr	r3, [pc, #100]	; (800131c <MX_TIM4_Init+0x98>)
 80012b8:	f242 720f 	movw	r2, #9999	; 0x270f
 80012bc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012be:	4b17      	ldr	r3, [pc, #92]	; (800131c <MX_TIM4_Init+0x98>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c4:	4b15      	ldr	r3, [pc, #84]	; (800131c <MX_TIM4_Init+0x98>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80012ca:	4814      	ldr	r0, [pc, #80]	; (800131c <MX_TIM4_Init+0x98>)
 80012cc:	f003 ff90 	bl	80051f0 <HAL_TIM_Base_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80012d6:	f7ff fe37 	bl	8000f48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80012e0:	f107 0310 	add.w	r3, r7, #16
 80012e4:	4619      	mov	r1, r3
 80012e6:	480d      	ldr	r0, [pc, #52]	; (800131c <MX_TIM4_Init+0x98>)
 80012e8:	f004 fbde 	bl	8005aa8 <HAL_TIM_ConfigClockSource>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80012f2:	f7ff fe29 	bl	8000f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	4619      	mov	r1, r3
 8001302:	4806      	ldr	r0, [pc, #24]	; (800131c <MX_TIM4_Init+0x98>)
 8001304:	f005 f87c 	bl	8006400 <HAL_TIMEx_MasterConfigSynchronization>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 800130e:	f7ff fe1b 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001312:	bf00      	nop
 8001314:	3720      	adds	r7, #32
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200001cc 	.word	0x200001cc
 8001320:	40000800 	.word	0x40000800

08001324 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001334:	d114      	bne.n	8001360 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001336:	4b22      	ldr	r3, [pc, #136]	; (80013c0 <HAL_TIM_Base_MspInit+0x9c>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	4a21      	ldr	r2, [pc, #132]	; (80013c0 <HAL_TIM_Base_MspInit+0x9c>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6413      	str	r3, [r2, #64]	; 0x40
 8001342:	4b1f      	ldr	r3, [pc, #124]	; (80013c0 <HAL_TIM_Base_MspInit+0x9c>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2100      	movs	r1, #0
 8001352:	201c      	movs	r0, #28
 8001354:	f000 ffc9 	bl	80022ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001358:	201c      	movs	r0, #28
 800135a:	f000 ffe2 	bl	8002322 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800135e:	e02a      	b.n	80013b6 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM3)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a17      	ldr	r2, [pc, #92]	; (80013c4 <HAL_TIM_Base_MspInit+0xa0>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d10c      	bne.n	8001384 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800136a:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <HAL_TIM_Base_MspInit+0x9c>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	4a14      	ldr	r2, [pc, #80]	; (80013c0 <HAL_TIM_Base_MspInit+0x9c>)
 8001370:	f043 0302 	orr.w	r3, r3, #2
 8001374:	6413      	str	r3, [r2, #64]	; 0x40
 8001376:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <HAL_TIM_Base_MspInit+0x9c>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	693b      	ldr	r3, [r7, #16]
}
 8001382:	e018      	b.n	80013b6 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM4)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a0f      	ldr	r2, [pc, #60]	; (80013c8 <HAL_TIM_Base_MspInit+0xa4>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d113      	bne.n	80013b6 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800138e:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <HAL_TIM_Base_MspInit+0x9c>)
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	4a0b      	ldr	r2, [pc, #44]	; (80013c0 <HAL_TIM_Base_MspInit+0x9c>)
 8001394:	f043 0304 	orr.w	r3, r3, #4
 8001398:	6413      	str	r3, [r2, #64]	; 0x40
 800139a:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <HAL_TIM_Base_MspInit+0x9c>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	f003 0304 	and.w	r3, r3, #4
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2100      	movs	r1, #0
 80013aa:	201e      	movs	r0, #30
 80013ac:	f000 ff9d 	bl	80022ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80013b0:	201e      	movs	r0, #30
 80013b2:	f000 ffb6 	bl	8002322 <HAL_NVIC_EnableIRQ>
}
 80013b6:	bf00      	nop
 80013b8:	3718      	adds	r7, #24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40000400 	.word	0x40000400
 80013c8:	40000800 	.word	0x40000800

080013cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b088      	sub	sp, #32
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 030c 	add.w	r3, r7, #12
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a11      	ldr	r2, [pc, #68]	; (8001430 <HAL_TIM_MspPostInit+0x64>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d11b      	bne.n	8001426 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ee:	4b11      	ldr	r3, [pc, #68]	; (8001434 <HAL_TIM_MspPostInit+0x68>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a10      	ldr	r2, [pc, #64]	; (8001434 <HAL_TIM_MspPostInit+0x68>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <HAL_TIM_MspPostInit+0x68>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001406:	2340      	movs	r3, #64	; 0x40
 8001408:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140a:	2302      	movs	r3, #2
 800140c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001412:	2300      	movs	r3, #0
 8001414:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001416:	2302      	movs	r3, #2
 8001418:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800141a:	f107 030c 	add.w	r3, r7, #12
 800141e:	4619      	mov	r1, r3
 8001420:	4805      	ldr	r0, [pc, #20]	; (8001438 <HAL_TIM_MspPostInit+0x6c>)
 8001422:	f001 f839 	bl	8002498 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001426:	bf00      	nop
 8001428:	3720      	adds	r7, #32
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40000400 	.word	0x40000400
 8001434:	40023800 	.word	0x40023800
 8001438:	40020000 	.word	0x40020000

0800143c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001440:	4b14      	ldr	r3, [pc, #80]	; (8001494 <MX_USART3_UART_Init+0x58>)
 8001442:	4a15      	ldr	r2, [pc, #84]	; (8001498 <MX_USART3_UART_Init+0x5c>)
 8001444:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001446:	4b13      	ldr	r3, [pc, #76]	; (8001494 <MX_USART3_UART_Init+0x58>)
 8001448:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800144c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <MX_USART3_UART_Init+0x58>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001454:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <MX_USART3_UART_Init+0x58>)
 8001456:	2200      	movs	r2, #0
 8001458:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <MX_USART3_UART_Init+0x58>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <MX_USART3_UART_Init+0x58>)
 8001462:	220c      	movs	r2, #12
 8001464:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <MX_USART3_UART_Init+0x58>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800146c:	4b09      	ldr	r3, [pc, #36]	; (8001494 <MX_USART3_UART_Init+0x58>)
 800146e:	2200      	movs	r2, #0
 8001470:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001472:	4b08      	ldr	r3, [pc, #32]	; (8001494 <MX_USART3_UART_Init+0x58>)
 8001474:	2200      	movs	r2, #0
 8001476:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <MX_USART3_UART_Init+0x58>)
 800147a:	2200      	movs	r2, #0
 800147c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800147e:	4805      	ldr	r0, [pc, #20]	; (8001494 <MX_USART3_UART_Init+0x58>)
 8001480:	f005 f86a 	bl	8006558 <HAL_UART_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800148a:	f7ff fd5d 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200002b0 	.word	0x200002b0
 8001498:	40004800 	.word	0x40004800

0800149c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08a      	sub	sp, #40	; 0x28
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a1b      	ldr	r2, [pc, #108]	; (8001528 <HAL_UART_MspInit+0x8c>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d130      	bne.n	8001520 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014be:	4b1b      	ldr	r3, [pc, #108]	; (800152c <HAL_UART_MspInit+0x90>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	4a1a      	ldr	r2, [pc, #104]	; (800152c <HAL_UART_MspInit+0x90>)
 80014c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014c8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ca:	4b18      	ldr	r3, [pc, #96]	; (800152c <HAL_UART_MspInit+0x90>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014d2:	613b      	str	r3, [r7, #16]
 80014d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d6:	4b15      	ldr	r3, [pc, #84]	; (800152c <HAL_UART_MspInit+0x90>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a14      	ldr	r2, [pc, #80]	; (800152c <HAL_UART_MspInit+0x90>)
 80014dc:	f043 0308 	orr.w	r3, r3, #8
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b12      	ldr	r3, [pc, #72]	; (800152c <HAL_UART_MspInit+0x90>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80014ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f4:	2302      	movs	r3, #2
 80014f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fc:	2303      	movs	r3, #3
 80014fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001500:	2307      	movs	r3, #7
 8001502:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001504:	f107 0314 	add.w	r3, r7, #20
 8001508:	4619      	mov	r1, r3
 800150a:	4809      	ldr	r0, [pc, #36]	; (8001530 <HAL_UART_MspInit+0x94>)
 800150c:	f000 ffc4 	bl	8002498 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001510:	2200      	movs	r2, #0
 8001512:	2100      	movs	r1, #0
 8001514:	2027      	movs	r0, #39	; 0x27
 8001516:	f000 fee8 	bl	80022ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800151a:	2027      	movs	r0, #39	; 0x27
 800151c:	f000 ff01 	bl	8002322 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001520:	bf00      	nop
 8001522:	3728      	adds	r7, #40	; 0x28
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40004800 	.word	0x40004800
 800152c:	40023800 	.word	0x40023800
 8001530:	40020c00 	.word	0x40020c00

08001534 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001538:	4b14      	ldr	r3, [pc, #80]	; (800158c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800153a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800153e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001540:	4b12      	ldr	r3, [pc, #72]	; (800158c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001542:	2206      	movs	r2, #6
 8001544:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001546:	4b11      	ldr	r3, [pc, #68]	; (800158c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001548:	2202      	movs	r2, #2
 800154a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800154c:	4b0f      	ldr	r3, [pc, #60]	; (800158c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800154e:	2200      	movs	r2, #0
 8001550:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001554:	2202      	movs	r2, #2
 8001556:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001558:	4b0c      	ldr	r3, [pc, #48]	; (800158c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800155a:	2201      	movs	r2, #1
 800155c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800155e:	4b0b      	ldr	r3, [pc, #44]	; (800158c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001560:	2200      	movs	r2, #0
 8001562:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001564:	4b09      	ldr	r3, [pc, #36]	; (800158c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001566:	2200      	movs	r2, #0
 8001568:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800156a:	4b08      	ldr	r3, [pc, #32]	; (800158c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800156c:	2201      	movs	r2, #1
 800156e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001572:	2200      	movs	r2, #0
 8001574:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001576:	4805      	ldr	r0, [pc, #20]	; (800158c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001578:	f002 fbb9 	bl	8003cee <HAL_PCD_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001582:	f7ff fce1 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000334 	.word	0x20000334

08001590 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08a      	sub	sp, #40	; 0x28
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015b0:	d141      	bne.n	8001636 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b2:	4b23      	ldr	r3, [pc, #140]	; (8001640 <HAL_PCD_MspInit+0xb0>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a22      	ldr	r2, [pc, #136]	; (8001640 <HAL_PCD_MspInit+0xb0>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b20      	ldr	r3, [pc, #128]	; (8001640 <HAL_PCD_MspInit+0xb0>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	613b      	str	r3, [r7, #16]
 80015c8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80015ca:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80015ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	2302      	movs	r3, #2
 80015d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d8:	2303      	movs	r3, #3
 80015da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80015dc:	230a      	movs	r3, #10
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	4619      	mov	r1, r3
 80015e6:	4817      	ldr	r0, [pc, #92]	; (8001644 <HAL_PCD_MspInit+0xb4>)
 80015e8:	f000 ff56 	bl	8002498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80015ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	4619      	mov	r1, r3
 8001600:	4810      	ldr	r0, [pc, #64]	; (8001644 <HAL_PCD_MspInit+0xb4>)
 8001602:	f000 ff49 	bl	8002498 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001606:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <HAL_PCD_MspInit+0xb0>)
 8001608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800160a:	4a0d      	ldr	r2, [pc, #52]	; (8001640 <HAL_PCD_MspInit+0xb0>)
 800160c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001610:	6353      	str	r3, [r2, #52]	; 0x34
 8001612:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <HAL_PCD_MspInit+0xb0>)
 8001614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	4b08      	ldr	r3, [pc, #32]	; (8001640 <HAL_PCD_MspInit+0xb0>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001622:	4a07      	ldr	r2, [pc, #28]	; (8001640 <HAL_PCD_MspInit+0xb0>)
 8001624:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001628:	6453      	str	r3, [r2, #68]	; 0x44
 800162a:	4b05      	ldr	r3, [pc, #20]	; (8001640 <HAL_PCD_MspInit+0xb0>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001636:	bf00      	nop
 8001638:	3728      	adds	r7, #40	; 0x28
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40023800 	.word	0x40023800
 8001644:	40020000 	.word	0x40020000

08001648 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001648:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001680 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800164c:	480d      	ldr	r0, [pc, #52]	; (8001684 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800164e:	490e      	ldr	r1, [pc, #56]	; (8001688 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001650:	4a0e      	ldr	r2, [pc, #56]	; (800168c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001654:	e002      	b.n	800165c <LoopCopyDataInit>

08001656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800165a:	3304      	adds	r3, #4

0800165c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800165c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800165e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001660:	d3f9      	bcc.n	8001656 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001662:	4a0b      	ldr	r2, [pc, #44]	; (8001690 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001664:	4c0b      	ldr	r4, [pc, #44]	; (8001694 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001668:	e001      	b.n	800166e <LoopFillZerobss>

0800166a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800166a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800166c:	3204      	adds	r2, #4

0800166e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800166e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001670:	d3fb      	bcc.n	800166a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001672:	f7ff fd2f 	bl	80010d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001676:	f006 fb17 	bl	8007ca8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800167a:	f7ff fa17 	bl	8000aac <main>
  bx  lr    
 800167e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001680:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001688:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800168c:	08008600 	.word	0x08008600
  ldr r2, =_sbss
 8001690:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001694:	2000074c 	.word	0x2000074c

08001698 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001698:	e7fe      	b.n	8001698 <CAN1_RX0_IRQHandler>

0800169a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800169e:	2003      	movs	r0, #3
 80016a0:	f000 fe18 	bl	80022d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016a4:	2000      	movs	r0, #0
 80016a6:	f000 f805 	bl	80016b4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80016aa:	f7ff fc53 	bl	8000f54 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016bc:	4b12      	ldr	r3, [pc, #72]	; (8001708 <HAL_InitTick+0x54>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <HAL_InitTick+0x58>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	4619      	mov	r1, r3
 80016c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d2:	4618      	mov	r0, r3
 80016d4:	f000 fe33 	bl	800233e <HAL_SYSTICK_Config>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e00e      	b.n	8001700 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b0f      	cmp	r3, #15
 80016e6:	d80a      	bhi.n	80016fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e8:	2200      	movs	r2, #0
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	f04f 30ff 	mov.w	r0, #4294967295
 80016f0:	f000 fdfb 	bl	80022ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f4:	4a06      	ldr	r2, [pc, #24]	; (8001710 <HAL_InitTick+0x5c>)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016fa:	2300      	movs	r3, #0
 80016fc:	e000      	b.n	8001700 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
}
 8001700:	4618      	mov	r0, r3
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000010 	.word	0x20000010
 800170c:	20000018 	.word	0x20000018
 8001710:	20000014 	.word	0x20000014

08001714 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001718:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_IncTick+0x20>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	461a      	mov	r2, r3
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_IncTick+0x24>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4413      	add	r3, r2
 8001724:	4a04      	ldr	r2, [pc, #16]	; (8001738 <HAL_IncTick+0x24>)
 8001726:	6013      	str	r3, [r2, #0]
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	20000018 	.word	0x20000018
 8001738:	20000738 	.word	0x20000738

0800173c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return uwTick;
 8001740:	4b03      	ldr	r3, [pc, #12]	; (8001750 <HAL_GetTick+0x14>)
 8001742:	681b      	ldr	r3, [r3, #0]
}
 8001744:	4618      	mov	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	20000738 	.word	0x20000738

08001754 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800175c:	f7ff ffee 	bl	800173c <HAL_GetTick>
 8001760:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800176c:	d005      	beq.n	800177a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800176e:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <HAL_Delay+0x44>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	461a      	mov	r2, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	4413      	add	r3, r2
 8001778:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800177a:	bf00      	nop
 800177c:	f7ff ffde 	bl	800173c <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	429a      	cmp	r2, r3
 800178a:	d8f7      	bhi.n	800177c <HAL_Delay+0x28>
  {
  }
}
 800178c:	bf00      	nop
 800178e:	bf00      	nop
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000018 	.word	0x20000018

0800179c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017a4:	2300      	movs	r3, #0
 80017a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e031      	b.n	8001816 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d109      	bne.n	80017ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7fe ff5e 	bl	800067c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	f003 0310 	and.w	r3, r3, #16
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d116      	bne.n	8001808 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <HAL_ADC_Init+0x84>)
 80017e0:	4013      	ands	r3, r2
 80017e2:	f043 0202 	orr.w	r2, r3, #2
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 fb9e 	bl	8001f2c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	f023 0303 	bic.w	r3, r3, #3
 80017fe:	f043 0201 	orr.w	r2, r3, #1
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	641a      	str	r2, [r3, #64]	; 0x40
 8001806:	e001      	b.n	800180c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001814:	7bfb      	ldrb	r3, [r7, #15]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	ffffeefd 	.word	0xffffeefd

08001824 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800182c:	2300      	movs	r3, #0
 800182e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001836:	2b01      	cmp	r3, #1
 8001838:	d101      	bne.n	800183e <HAL_ADC_Start_IT+0x1a>
 800183a:	2302      	movs	r3, #2
 800183c:	e0b5      	b.n	80019aa <HAL_ADC_Start_IT+0x186>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2201      	movs	r2, #1
 8001842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	2b01      	cmp	r3, #1
 8001852:	d018      	beq.n	8001886 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	689a      	ldr	r2, [r3, #8]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f042 0201 	orr.w	r2, r2, #1
 8001862:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001864:	4b54      	ldr	r3, [pc, #336]	; (80019b8 <HAL_ADC_Start_IT+0x194>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a54      	ldr	r2, [pc, #336]	; (80019bc <HAL_ADC_Start_IT+0x198>)
 800186a:	fba2 2303 	umull	r2, r3, r2, r3
 800186e:	0c9a      	lsrs	r2, r3, #18
 8001870:	4613      	mov	r3, r2
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	4413      	add	r3, r2
 8001876:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001878:	e002      	b.n	8001880 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	3b01      	subs	r3, #1
 800187e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f9      	bne.n	800187a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	2b01      	cmp	r3, #1
 8001892:	d17d      	bne.n	8001990 <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001898:	4b49      	ldr	r3, [pc, #292]	; (80019c0 <HAL_ADC_Start_IT+0x19c>)
 800189a:	4013      	ands	r3, r2
 800189c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d007      	beq.n	80018c2 <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018ce:	d106      	bne.n	80018de <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d4:	f023 0206 	bic.w	r2, r3, #6
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	645a      	str	r2, [r3, #68]	; 0x44
 80018dc:	e002      	b.n	80018e4 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80018f4:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6859      	ldr	r1, [r3, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4b30      	ldr	r3, [pc, #192]	; (80019c4 <HAL_ADC_Start_IT+0x1a0>)
 8001902:	430b      	orrs	r3, r1
 8001904:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001906:	4b30      	ldr	r3, [pc, #192]	; (80019c8 <HAL_ADC_Start_IT+0x1a4>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f003 031f 	and.w	r3, r3, #31
 800190e:	2b00      	cmp	r3, #0
 8001910:	d10f      	bne.n	8001932 <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d143      	bne.n	80019a8 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	689a      	ldr	r2, [r3, #8]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	e03a      	b.n	80019a8 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a25      	ldr	r2, [pc, #148]	; (80019cc <HAL_ADC_Start_IT+0x1a8>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d10e      	bne.n	800195a <HAL_ADC_Start_IT+0x136>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d107      	bne.n	800195a <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001958:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800195a:	4b1b      	ldr	r3, [pc, #108]	; (80019c8 <HAL_ADC_Start_IT+0x1a4>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f003 0310 	and.w	r3, r3, #16
 8001962:	2b00      	cmp	r3, #0
 8001964:	d120      	bne.n	80019a8 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a19      	ldr	r2, [pc, #100]	; (80019d0 <HAL_ADC_Start_IT+0x1ac>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d11b      	bne.n	80019a8 <HAL_ADC_Start_IT+0x184>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d114      	bne.n	80019a8 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800198c:	609a      	str	r2, [r3, #8]
 800198e:	e00b      	b.n	80019a8 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001994:	f043 0210 	orr.w	r2, r3, #16
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a0:	f043 0201 	orr.w	r2, r3, #1
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	20000010 	.word	0x20000010
 80019bc:	431bde83 	.word	0x431bde83
 80019c0:	fffff8fe 	.word	0xfffff8fe
 80019c4:	04000020 	.word	0x04000020
 80019c8:	40012300 	.word	0x40012300
 80019cc:	40012000 	.word	0x40012000
 80019d0:	40012200 	.word	0x40012200

080019d4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	2300      	movs	r3, #0
 80019e2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	bf0c      	ite	eq
 80019f2:	2301      	moveq	r3, #1
 80019f4:	2300      	movne	r3, #0
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 0320 	and.w	r3, r3, #32
 8001a04:	2b20      	cmp	r3, #32
 8001a06:	bf0c      	ite	eq
 8001a08:	2301      	moveq	r3, #1
 8001a0a:	2300      	movne	r3, #0
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d049      	beq.n	8001aaa <HAL_ADC_IRQHandler+0xd6>
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d046      	beq.n	8001aaa <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a20:	f003 0310 	and.w	r3, r3, #16
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d105      	bne.n	8001a34 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d12b      	bne.n	8001a9a <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d127      	bne.n	8001a9a <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a50:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d006      	beq.n	8001a66 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d119      	bne.n	8001a9a <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f022 0220 	bic.w	r2, r2, #32
 8001a74:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d105      	bne.n	8001a9a <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	f043 0201 	orr.w	r2, r3, #1
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff f930 	bl	8000d00 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f06f 0212 	mvn.w	r2, #18
 8001aa8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0304 	and.w	r3, r3, #4
 8001ab4:	2b04      	cmp	r3, #4
 8001ab6:	bf0c      	ite	eq
 8001ab8:	2301      	moveq	r3, #1
 8001aba:	2300      	movne	r3, #0
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aca:	2b80      	cmp	r3, #128	; 0x80
 8001acc:	bf0c      	ite	eq
 8001ace:	2301      	moveq	r3, #1
 8001ad0:	2300      	movne	r3, #0
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d057      	beq.n	8001b8c <HAL_ADC_IRQHandler+0x1b8>
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d054      	beq.n	8001b8c <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	f003 0310 	and.w	r3, r3, #16
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d105      	bne.n	8001afa <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d139      	bne.n	8001b7c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b0e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d006      	beq.n	8001b24 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d12b      	bne.n	8001b7c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d124      	bne.n	8001b7c <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d11d      	bne.n	8001b7c <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d119      	bne.n	8001b7c <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b56:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d105      	bne.n	8001b7c <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b74:	f043 0201 	orr.w	r2, r3, #1
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f000 facf 	bl	8002120 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f06f 020c 	mvn.w	r2, #12
 8001b8a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	bf0c      	ite	eq
 8001b9a:	2301      	moveq	r3, #1
 8001b9c:	2300      	movne	r3, #0
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bac:	2b40      	cmp	r3, #64	; 0x40
 8001bae:	bf0c      	ite	eq
 8001bb0:	2301      	moveq	r3, #1
 8001bb2:	2300      	movne	r3, #0
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d017      	beq.n	8001bee <HAL_ADC_IRQHandler+0x21a>
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d014      	beq.n	8001bee <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d10d      	bne.n	8001bee <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 f846 	bl	8001c70 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f06f 0201 	mvn.w	r2, #1
 8001bec:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0320 	and.w	r3, r3, #32
 8001bf8:	2b20      	cmp	r3, #32
 8001bfa:	bf0c      	ite	eq
 8001bfc:	2301      	moveq	r3, #1
 8001bfe:	2300      	movne	r3, #0
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001c12:	bf0c      	ite	eq
 8001c14:	2301      	moveq	r3, #1
 8001c16:	2300      	movne	r3, #0
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d015      	beq.n	8001c4e <HAL_ADC_IRQHandler+0x27a>
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d012      	beq.n	8001c4e <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2c:	f043 0202 	orr.w	r2, r3, #2
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f06f 0220 	mvn.w	r2, #32
 8001c3c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 f820 	bl	8001c84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f06f 0220 	mvn.w	r2, #32
 8001c4c:	601a      	str	r2, [r3, #0]
  }
}
 8001c4e:	bf00      	nop
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d101      	bne.n	8001cb4 <HAL_ADC_ConfigChannel+0x1c>
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	e12a      	b.n	8001f0a <HAL_ADC_ConfigChannel+0x272>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b09      	cmp	r3, #9
 8001cc2:	d93a      	bls.n	8001d3a <HAL_ADC_ConfigChannel+0xa2>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ccc:	d035      	beq.n	8001d3a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68d9      	ldr	r1, [r3, #12]
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	461a      	mov	r2, r3
 8001cdc:	4613      	mov	r3, r2
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	4413      	add	r3, r2
 8001ce2:	3b1e      	subs	r3, #30
 8001ce4:	2207      	movs	r2, #7
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43da      	mvns	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	400a      	ands	r2, r1
 8001cf2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a87      	ldr	r2, [pc, #540]	; (8001f18 <HAL_ADC_ConfigChannel+0x280>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d10a      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68d9      	ldr	r1, [r3, #12]
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	061a      	lsls	r2, r3, #24
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d12:	e035      	b.n	8001d80 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68d9      	ldr	r1, [r3, #12]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	689a      	ldr	r2, [r3, #8]
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	4618      	mov	r0, r3
 8001d26:	4603      	mov	r3, r0
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	4403      	add	r3, r0
 8001d2c:	3b1e      	subs	r3, #30
 8001d2e:	409a      	lsls	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	430a      	orrs	r2, r1
 8001d36:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d38:	e022      	b.n	8001d80 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6919      	ldr	r1, [r3, #16]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	461a      	mov	r2, r3
 8001d48:	4613      	mov	r3, r2
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	4413      	add	r3, r2
 8001d4e:	2207      	movs	r2, #7
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43da      	mvns	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	400a      	ands	r2, r1
 8001d5c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6919      	ldr	r1, [r3, #16]
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	689a      	ldr	r2, [r3, #8]
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	4618      	mov	r0, r3
 8001d70:	4603      	mov	r3, r0
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	4403      	add	r3, r0
 8001d76:	409a      	lsls	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b06      	cmp	r3, #6
 8001d86:	d824      	bhi.n	8001dd2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	4613      	mov	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	3b05      	subs	r3, #5
 8001d9a:	221f      	movs	r2, #31
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	43da      	mvns	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	400a      	ands	r2, r1
 8001da8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	4618      	mov	r0, r3
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	3b05      	subs	r3, #5
 8001dc4:	fa00 f203 	lsl.w	r2, r0, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	635a      	str	r2, [r3, #52]	; 0x34
 8001dd0:	e04c      	b.n	8001e6c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2b0c      	cmp	r3, #12
 8001dd8:	d824      	bhi.n	8001e24 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	4613      	mov	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	4413      	add	r3, r2
 8001dea:	3b23      	subs	r3, #35	; 0x23
 8001dec:	221f      	movs	r2, #31
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43da      	mvns	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	400a      	ands	r2, r1
 8001dfa:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	4618      	mov	r0, r3
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	4413      	add	r3, r2
 8001e14:	3b23      	subs	r3, #35	; 0x23
 8001e16:	fa00 f203 	lsl.w	r2, r0, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	631a      	str	r2, [r3, #48]	; 0x30
 8001e22:	e023      	b.n	8001e6c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	3b41      	subs	r3, #65	; 0x41
 8001e36:	221f      	movs	r2, #31
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	43da      	mvns	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	400a      	ands	r2, r1
 8001e44:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	4618      	mov	r0, r3
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	3b41      	subs	r3, #65	; 0x41
 8001e60:	fa00 f203 	lsl.w	r2, r0, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a2a      	ldr	r2, [pc, #168]	; (8001f1c <HAL_ADC_ConfigChannel+0x284>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d10a      	bne.n	8001e8c <HAL_ADC_ConfigChannel+0x1f4>
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e7e:	d105      	bne.n	8001e8c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001e80:	4b27      	ldr	r3, [pc, #156]	; (8001f20 <HAL_ADC_ConfigChannel+0x288>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	4a26      	ldr	r2, [pc, #152]	; (8001f20 <HAL_ADC_ConfigChannel+0x288>)
 8001e86:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001e8a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a22      	ldr	r2, [pc, #136]	; (8001f1c <HAL_ADC_ConfigChannel+0x284>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d109      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x212>
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2b12      	cmp	r3, #18
 8001e9c:	d105      	bne.n	8001eaa <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001e9e:	4b20      	ldr	r3, [pc, #128]	; (8001f20 <HAL_ADC_ConfigChannel+0x288>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	4a1f      	ldr	r2, [pc, #124]	; (8001f20 <HAL_ADC_ConfigChannel+0x288>)
 8001ea4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ea8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a1b      	ldr	r2, [pc, #108]	; (8001f1c <HAL_ADC_ConfigChannel+0x284>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d125      	bne.n	8001f00 <HAL_ADC_ConfigChannel+0x268>
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a17      	ldr	r2, [pc, #92]	; (8001f18 <HAL_ADC_ConfigChannel+0x280>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d003      	beq.n	8001ec6 <HAL_ADC_ConfigChannel+0x22e>
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2b11      	cmp	r3, #17
 8001ec4:	d11c      	bne.n	8001f00 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001ec6:	4b16      	ldr	r3, [pc, #88]	; (8001f20 <HAL_ADC_ConfigChannel+0x288>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	4a15      	ldr	r2, [pc, #84]	; (8001f20 <HAL_ADC_ConfigChannel+0x288>)
 8001ecc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ed0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a10      	ldr	r2, [pc, #64]	; (8001f18 <HAL_ADC_ConfigChannel+0x280>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d111      	bne.n	8001f00 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001edc:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <HAL_ADC_ConfigChannel+0x28c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a11      	ldr	r2, [pc, #68]	; (8001f28 <HAL_ADC_ConfigChannel+0x290>)
 8001ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee6:	0c9a      	lsrs	r2, r3, #18
 8001ee8:	4613      	mov	r3, r2
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4413      	add	r3, r2
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001ef2:	e002      	b.n	8001efa <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1f9      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3714      	adds	r7, #20
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	10000012 	.word	0x10000012
 8001f1c:	40012000 	.word	0x40012000
 8001f20:	40012300 	.word	0x40012300
 8001f24:	20000010 	.word	0x20000010
 8001f28:	431bde83 	.word	0x431bde83

08001f2c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001f34:	4b78      	ldr	r3, [pc, #480]	; (8002118 <ADC_Init+0x1ec>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	4a77      	ldr	r2, [pc, #476]	; (8002118 <ADC_Init+0x1ec>)
 8001f3a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001f3e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001f40:	4b75      	ldr	r3, [pc, #468]	; (8002118 <ADC_Init+0x1ec>)
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	4973      	ldr	r1, [pc, #460]	; (8002118 <ADC_Init+0x1ec>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6859      	ldr	r1, [r3, #4]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	021a      	lsls	r2, r3, #8
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6859      	ldr	r1, [r3, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689a      	ldr	r2, [r3, #8]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fa2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6899      	ldr	r1, [r3, #8]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68da      	ldr	r2, [r3, #12]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fba:	4a58      	ldr	r2, [pc, #352]	; (800211c <ADC_Init+0x1f0>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d022      	beq.n	8002006 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	689a      	ldr	r2, [r3, #8]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6899      	ldr	r1, [r3, #8]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ff0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6899      	ldr	r1, [r3, #8]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	430a      	orrs	r2, r1
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	e00f      	b.n	8002026 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002014:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002024:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 0202 	bic.w	r2, r2, #2
 8002034:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6899      	ldr	r1, [r3, #8]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	005a      	lsls	r2, r3, #1
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	430a      	orrs	r2, r1
 8002048:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d01b      	beq.n	800208c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	685a      	ldr	r2, [r3, #4]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002062:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002072:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6859      	ldr	r1, [r3, #4]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207e:	3b01      	subs	r3, #1
 8002080:	035a      	lsls	r2, r3, #13
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	e007      	b.n	800209c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	685a      	ldr	r2, [r3, #4]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800209a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80020aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	051a      	lsls	r2, r3, #20
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6899      	ldr	r1, [r3, #8]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020de:	025a      	lsls	r2, r3, #9
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689a      	ldr	r2, [r3, #8]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6899      	ldr	r1, [r3, #8]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	029a      	lsls	r2, r3, #10
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	430a      	orrs	r2, r1
 800210a:	609a      	str	r2, [r3, #8]
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	40012300 	.word	0x40012300
 800211c:	0f000001 	.word	0x0f000001

08002120 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002144:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <__NVIC_SetPriorityGrouping+0x40>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002150:	4013      	ands	r3, r2
 8002152:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800215c:	4b06      	ldr	r3, [pc, #24]	; (8002178 <__NVIC_SetPriorityGrouping+0x44>)
 800215e:	4313      	orrs	r3, r2
 8002160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002162:	4a04      	ldr	r2, [pc, #16]	; (8002174 <__NVIC_SetPriorityGrouping+0x40>)
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	60d3      	str	r3, [r2, #12]
}
 8002168:	bf00      	nop
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	e000ed00 	.word	0xe000ed00
 8002178:	05fa0000 	.word	0x05fa0000

0800217c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002180:	4b04      	ldr	r3, [pc, #16]	; (8002194 <__NVIC_GetPriorityGrouping+0x18>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	0a1b      	lsrs	r3, r3, #8
 8002186:	f003 0307 	and.w	r3, r3, #7
}
 800218a:	4618      	mov	r0, r3
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	db0b      	blt.n	80021c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	f003 021f 	and.w	r2, r3, #31
 80021b0:	4907      	ldr	r1, [pc, #28]	; (80021d0 <__NVIC_EnableIRQ+0x38>)
 80021b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b6:	095b      	lsrs	r3, r3, #5
 80021b8:	2001      	movs	r0, #1
 80021ba:	fa00 f202 	lsl.w	r2, r0, r2
 80021be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	e000e100 	.word	0xe000e100

080021d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	6039      	str	r1, [r7, #0]
 80021de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	db0a      	blt.n	80021fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	490c      	ldr	r1, [pc, #48]	; (8002220 <__NVIC_SetPriority+0x4c>)
 80021ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f2:	0112      	lsls	r2, r2, #4
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	440b      	add	r3, r1
 80021f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021fc:	e00a      	b.n	8002214 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	b2da      	uxtb	r2, r3
 8002202:	4908      	ldr	r1, [pc, #32]	; (8002224 <__NVIC_SetPriority+0x50>)
 8002204:	79fb      	ldrb	r3, [r7, #7]
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	3b04      	subs	r3, #4
 800220c:	0112      	lsls	r2, r2, #4
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	440b      	add	r3, r1
 8002212:	761a      	strb	r2, [r3, #24]
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	e000e100 	.word	0xe000e100
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002228:	b480      	push	{r7}
 800222a:	b089      	sub	sp, #36	; 0x24
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	f1c3 0307 	rsb	r3, r3, #7
 8002242:	2b04      	cmp	r3, #4
 8002244:	bf28      	it	cs
 8002246:	2304      	movcs	r3, #4
 8002248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	3304      	adds	r3, #4
 800224e:	2b06      	cmp	r3, #6
 8002250:	d902      	bls.n	8002258 <NVIC_EncodePriority+0x30>
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	3b03      	subs	r3, #3
 8002256:	e000      	b.n	800225a <NVIC_EncodePriority+0x32>
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800225c:	f04f 32ff 	mov.w	r2, #4294967295
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43da      	mvns	r2, r3
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	401a      	ands	r2, r3
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002270:	f04f 31ff 	mov.w	r1, #4294967295
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	fa01 f303 	lsl.w	r3, r1, r3
 800227a:	43d9      	mvns	r1, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002280:	4313      	orrs	r3, r2
         );
}
 8002282:	4618      	mov	r0, r3
 8002284:	3724      	adds	r7, #36	; 0x24
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
	...

08002290 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3b01      	subs	r3, #1
 800229c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022a0:	d301      	bcc.n	80022a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022a2:	2301      	movs	r3, #1
 80022a4:	e00f      	b.n	80022c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022a6:	4a0a      	ldr	r2, [pc, #40]	; (80022d0 <SysTick_Config+0x40>)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ae:	210f      	movs	r1, #15
 80022b0:	f04f 30ff 	mov.w	r0, #4294967295
 80022b4:	f7ff ff8e 	bl	80021d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022b8:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <SysTick_Config+0x40>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022be:	4b04      	ldr	r3, [pc, #16]	; (80022d0 <SysTick_Config+0x40>)
 80022c0:	2207      	movs	r2, #7
 80022c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	e000e010 	.word	0xe000e010

080022d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff ff29 	bl	8002134 <__NVIC_SetPriorityGrouping>
}
 80022e2:	bf00      	nop
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b086      	sub	sp, #24
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	4603      	mov	r3, r0
 80022f2:	60b9      	str	r1, [r7, #8]
 80022f4:	607a      	str	r2, [r7, #4]
 80022f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022f8:	2300      	movs	r3, #0
 80022fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022fc:	f7ff ff3e 	bl	800217c <__NVIC_GetPriorityGrouping>
 8002300:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	68b9      	ldr	r1, [r7, #8]
 8002306:	6978      	ldr	r0, [r7, #20]
 8002308:	f7ff ff8e 	bl	8002228 <NVIC_EncodePriority>
 800230c:	4602      	mov	r2, r0
 800230e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002312:	4611      	mov	r1, r2
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff ff5d 	bl	80021d4 <__NVIC_SetPriority>
}
 800231a:	bf00      	nop
 800231c:	3718      	adds	r7, #24
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	af00      	add	r7, sp, #0
 8002328:	4603      	mov	r3, r0
 800232a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800232c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff ff31 	bl	8002198 <__NVIC_EnableIRQ>
}
 8002336:	bf00      	nop
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b082      	sub	sp, #8
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7ff ffa2 	bl	8002290 <SysTick_Config>
 800234c:	4603      	mov	r3, r0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b084      	sub	sp, #16
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002362:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002364:	f7ff f9ea 	bl	800173c <HAL_GetTick>
 8002368:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d008      	beq.n	8002388 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2280      	movs	r2, #128	; 0x80
 800237a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e052      	b.n	800242e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 0216 	bic.w	r2, r2, #22
 8002396:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	695a      	ldr	r2, [r3, #20]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023a6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d103      	bne.n	80023b8 <HAL_DMA_Abort+0x62>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d007      	beq.n	80023c8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0208 	bic.w	r2, r2, #8
 80023c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0201 	bic.w	r2, r2, #1
 80023d6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023d8:	e013      	b.n	8002402 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023da:	f7ff f9af 	bl	800173c <HAL_GetTick>
 80023de:	4602      	mov	r2, r0
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	1ad3      	subs	r3, r2, r3
 80023e4:	2b05      	cmp	r3, #5
 80023e6:	d90c      	bls.n	8002402 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2220      	movs	r2, #32
 80023ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2203      	movs	r2, #3
 80023fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e015      	b.n	800242e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1e4      	bne.n	80023da <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002414:	223f      	movs	r2, #63	; 0x3f
 8002416:	409a      	lsls	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002436:	b480      	push	{r7}
 8002438:	b083      	sub	sp, #12
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d004      	beq.n	8002454 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2280      	movs	r2, #128	; 0x80
 800244e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e00c      	b.n	800246e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2205      	movs	r2, #5
 8002458:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f022 0201 	bic.w	r2, r2, #1
 800246a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002488:	b2db      	uxtb	r3, r3
}
 800248a:	4618      	mov	r0, r3
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
	...

08002498 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002498:	b480      	push	{r7}
 800249a:	b089      	sub	sp, #36	; 0x24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80024aa:	2300      	movs	r3, #0
 80024ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80024b2:	2300      	movs	r3, #0
 80024b4:	61fb      	str	r3, [r7, #28]
 80024b6:	e175      	b.n	80027a4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80024b8:	2201      	movs	r2, #1
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	4013      	ands	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	f040 8164 	bne.w	800279e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d00b      	beq.n	80024f6 <HAL_GPIO_Init+0x5e>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d007      	beq.n	80024f6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80024ea:	2b11      	cmp	r3, #17
 80024ec:	d003      	beq.n	80024f6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b12      	cmp	r3, #18
 80024f4:	d130      	bne.n	8002558 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	005b      	lsls	r3, r3, #1
 8002500:	2203      	movs	r2, #3
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43db      	mvns	r3, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4013      	ands	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4313      	orrs	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800252c:	2201      	movs	r2, #1
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	091b      	lsrs	r3, r3, #4
 8002542:	f003 0201 	and.w	r2, r3, #1
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	2203      	movs	r2, #3
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4013      	ands	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	689a      	ldr	r2, [r3, #8]
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	2b02      	cmp	r3, #2
 800258e:	d003      	beq.n	8002598 <HAL_GPIO_Init+0x100>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2b12      	cmp	r3, #18
 8002596:	d123      	bne.n	80025e0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	08da      	lsrs	r2, r3, #3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3208      	adds	r2, #8
 80025a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	220f      	movs	r2, #15
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43db      	mvns	r3, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4013      	ands	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	691a      	ldr	r2, [r3, #16]
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	08da      	lsrs	r2, r3, #3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3208      	adds	r2, #8
 80025da:	69b9      	ldr	r1, [r7, #24]
 80025dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	2203      	movs	r2, #3
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43db      	mvns	r3, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4013      	ands	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 0203 	and.w	r2, r3, #3
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4313      	orrs	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 80be 	beq.w	800279e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002622:	4b66      	ldr	r3, [pc, #408]	; (80027bc <HAL_GPIO_Init+0x324>)
 8002624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002626:	4a65      	ldr	r2, [pc, #404]	; (80027bc <HAL_GPIO_Init+0x324>)
 8002628:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800262c:	6453      	str	r3, [r2, #68]	; 0x44
 800262e:	4b63      	ldr	r3, [pc, #396]	; (80027bc <HAL_GPIO_Init+0x324>)
 8002630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800263a:	4a61      	ldr	r2, [pc, #388]	; (80027c0 <HAL_GPIO_Init+0x328>)
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	089b      	lsrs	r3, r3, #2
 8002640:	3302      	adds	r3, #2
 8002642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002646:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	f003 0303 	and.w	r3, r3, #3
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	220f      	movs	r2, #15
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	43db      	mvns	r3, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4013      	ands	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a58      	ldr	r2, [pc, #352]	; (80027c4 <HAL_GPIO_Init+0x32c>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d037      	beq.n	80026d6 <HAL_GPIO_Init+0x23e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a57      	ldr	r2, [pc, #348]	; (80027c8 <HAL_GPIO_Init+0x330>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d031      	beq.n	80026d2 <HAL_GPIO_Init+0x23a>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a56      	ldr	r2, [pc, #344]	; (80027cc <HAL_GPIO_Init+0x334>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d02b      	beq.n	80026ce <HAL_GPIO_Init+0x236>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a55      	ldr	r2, [pc, #340]	; (80027d0 <HAL_GPIO_Init+0x338>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d025      	beq.n	80026ca <HAL_GPIO_Init+0x232>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a54      	ldr	r2, [pc, #336]	; (80027d4 <HAL_GPIO_Init+0x33c>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d01f      	beq.n	80026c6 <HAL_GPIO_Init+0x22e>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a53      	ldr	r2, [pc, #332]	; (80027d8 <HAL_GPIO_Init+0x340>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d019      	beq.n	80026c2 <HAL_GPIO_Init+0x22a>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a52      	ldr	r2, [pc, #328]	; (80027dc <HAL_GPIO_Init+0x344>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d013      	beq.n	80026be <HAL_GPIO_Init+0x226>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a51      	ldr	r2, [pc, #324]	; (80027e0 <HAL_GPIO_Init+0x348>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d00d      	beq.n	80026ba <HAL_GPIO_Init+0x222>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a50      	ldr	r2, [pc, #320]	; (80027e4 <HAL_GPIO_Init+0x34c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d007      	beq.n	80026b6 <HAL_GPIO_Init+0x21e>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a4f      	ldr	r2, [pc, #316]	; (80027e8 <HAL_GPIO_Init+0x350>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d101      	bne.n	80026b2 <HAL_GPIO_Init+0x21a>
 80026ae:	2309      	movs	r3, #9
 80026b0:	e012      	b.n	80026d8 <HAL_GPIO_Init+0x240>
 80026b2:	230a      	movs	r3, #10
 80026b4:	e010      	b.n	80026d8 <HAL_GPIO_Init+0x240>
 80026b6:	2308      	movs	r3, #8
 80026b8:	e00e      	b.n	80026d8 <HAL_GPIO_Init+0x240>
 80026ba:	2307      	movs	r3, #7
 80026bc:	e00c      	b.n	80026d8 <HAL_GPIO_Init+0x240>
 80026be:	2306      	movs	r3, #6
 80026c0:	e00a      	b.n	80026d8 <HAL_GPIO_Init+0x240>
 80026c2:	2305      	movs	r3, #5
 80026c4:	e008      	b.n	80026d8 <HAL_GPIO_Init+0x240>
 80026c6:	2304      	movs	r3, #4
 80026c8:	e006      	b.n	80026d8 <HAL_GPIO_Init+0x240>
 80026ca:	2303      	movs	r3, #3
 80026cc:	e004      	b.n	80026d8 <HAL_GPIO_Init+0x240>
 80026ce:	2302      	movs	r3, #2
 80026d0:	e002      	b.n	80026d8 <HAL_GPIO_Init+0x240>
 80026d2:	2301      	movs	r3, #1
 80026d4:	e000      	b.n	80026d8 <HAL_GPIO_Init+0x240>
 80026d6:	2300      	movs	r3, #0
 80026d8:	69fa      	ldr	r2, [r7, #28]
 80026da:	f002 0203 	and.w	r2, r2, #3
 80026de:	0092      	lsls	r2, r2, #2
 80026e0:	4093      	lsls	r3, r2
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80026e8:	4935      	ldr	r1, [pc, #212]	; (80027c0 <HAL_GPIO_Init+0x328>)
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	089b      	lsrs	r3, r3, #2
 80026ee:	3302      	adds	r3, #2
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026f6:	4b3d      	ldr	r3, [pc, #244]	; (80027ec <HAL_GPIO_Init+0x354>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	43db      	mvns	r3, r3
 8002700:	69ba      	ldr	r2, [r7, #24]
 8002702:	4013      	ands	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	4313      	orrs	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800271a:	4a34      	ldr	r2, [pc, #208]	; (80027ec <HAL_GPIO_Init+0x354>)
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002720:	4b32      	ldr	r3, [pc, #200]	; (80027ec <HAL_GPIO_Init+0x354>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	43db      	mvns	r3, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4013      	ands	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d003      	beq.n	8002744 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	4313      	orrs	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002744:	4a29      	ldr	r2, [pc, #164]	; (80027ec <HAL_GPIO_Init+0x354>)
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800274a:	4b28      	ldr	r3, [pc, #160]	; (80027ec <HAL_GPIO_Init+0x354>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	43db      	mvns	r3, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4013      	ands	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d003      	beq.n	800276e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	4313      	orrs	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800276e:	4a1f      	ldr	r2, [pc, #124]	; (80027ec <HAL_GPIO_Init+0x354>)
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002774:	4b1d      	ldr	r3, [pc, #116]	; (80027ec <HAL_GPIO_Init+0x354>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	43db      	mvns	r3, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d003      	beq.n	8002798 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	4313      	orrs	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002798:	4a14      	ldr	r2, [pc, #80]	; (80027ec <HAL_GPIO_Init+0x354>)
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	3301      	adds	r3, #1
 80027a2:	61fb      	str	r3, [r7, #28]
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	2b0f      	cmp	r3, #15
 80027a8:	f67f ae86 	bls.w	80024b8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80027ac:	bf00      	nop
 80027ae:	bf00      	nop
 80027b0:	3724      	adds	r7, #36	; 0x24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	40023800 	.word	0x40023800
 80027c0:	40013800 	.word	0x40013800
 80027c4:	40020000 	.word	0x40020000
 80027c8:	40020400 	.word	0x40020400
 80027cc:	40020800 	.word	0x40020800
 80027d0:	40020c00 	.word	0x40020c00
 80027d4:	40021000 	.word	0x40021000
 80027d8:	40021400 	.word	0x40021400
 80027dc:	40021800 	.word	0x40021800
 80027e0:	40021c00 	.word	0x40021c00
 80027e4:	40022000 	.word	0x40022000
 80027e8:	40022400 	.word	0x40022400
 80027ec:	40013c00 	.word	0x40013c00

080027f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	460b      	mov	r3, r1
 80027fa:	807b      	strh	r3, [r7, #2]
 80027fc:	4613      	mov	r3, r2
 80027fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002800:	787b      	ldrb	r3, [r7, #1]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002806:	887a      	ldrh	r2, [r7, #2]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800280c:	e003      	b.n	8002816 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800280e:	887b      	ldrh	r3, [r7, #2]
 8002810:	041a      	lsls	r2, r3, #16
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	619a      	str	r2, [r3, #24]
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
	...

08002824 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e07f      	b.n	8002936 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d106      	bne.n	8002850 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7fe f8da 	bl	8000a04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2224      	movs	r2, #36	; 0x24
 8002854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0201 	bic.w	r2, r2, #1
 8002866:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002874:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002884:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d107      	bne.n	800289e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689a      	ldr	r2, [r3, #8]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800289a:	609a      	str	r2, [r3, #8]
 800289c:	e006      	b.n	80028ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689a      	ldr	r2, [r3, #8]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80028aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d104      	bne.n	80028be <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6859      	ldr	r1, [r3, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	4b1d      	ldr	r3, [pc, #116]	; (8002940 <HAL_I2C_Init+0x11c>)
 80028ca:	430b      	orrs	r3, r1
 80028cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68da      	ldr	r2, [r3, #12]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	691a      	ldr	r2, [r3, #16]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	ea42 0103 	orr.w	r1, r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	021a      	lsls	r2, r3, #8
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69d9      	ldr	r1, [r3, #28]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a1a      	ldr	r2, [r3, #32]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 0201 	orr.w	r2, r2, #1
 8002916:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2220      	movs	r2, #32
 8002922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	02008000 	.word	0x02008000

08002944 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b088      	sub	sp, #32
 8002948:	af02      	add	r7, sp, #8
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	607a      	str	r2, [r7, #4]
 800294e:	461a      	mov	r2, r3
 8002950:	460b      	mov	r3, r1
 8002952:	817b      	strh	r3, [r7, #10]
 8002954:	4613      	mov	r3, r2
 8002956:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b20      	cmp	r3, #32
 8002962:	f040 80da 	bne.w	8002b1a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800296c:	2b01      	cmp	r3, #1
 800296e:	d101      	bne.n	8002974 <HAL_I2C_Master_Transmit+0x30>
 8002970:	2302      	movs	r3, #2
 8002972:	e0d3      	b.n	8002b1c <HAL_I2C_Master_Transmit+0x1d8>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800297c:	f7fe fede 	bl	800173c <HAL_GetTick>
 8002980:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	2319      	movs	r3, #25
 8002988:	2201      	movs	r2, #1
 800298a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 fefb 	bl	800378a <I2C_WaitOnFlagUntilTimeout>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e0be      	b.n	8002b1c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2221      	movs	r2, #33	; 0x21
 80029a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2210      	movs	r2, #16
 80029aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	893a      	ldrh	r2, [r7, #8]
 80029be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	2bff      	cmp	r3, #255	; 0xff
 80029ce:	d90e      	bls.n	80029ee <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	22ff      	movs	r2, #255	; 0xff
 80029d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	8979      	ldrh	r1, [r7, #10]
 80029de:	4b51      	ldr	r3, [pc, #324]	; (8002b24 <HAL_I2C_Master_Transmit+0x1e0>)
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f001 f85e 	bl	8003aa8 <I2C_TransferConfig>
 80029ec:	e06c      	b.n	8002ac8 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	8979      	ldrh	r1, [r7, #10]
 8002a00:	4b48      	ldr	r3, [pc, #288]	; (8002b24 <HAL_I2C_Master_Transmit+0x1e0>)
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f001 f84d 	bl	8003aa8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002a0e:	e05b      	b.n	8002ac8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	6a39      	ldr	r1, [r7, #32]
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f000 fef8 	bl	800380a <I2C_WaitOnTXISFlagUntilTimeout>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e07b      	b.n	8002b1c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a28:	781a      	ldrb	r2, [r3, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	1c5a      	adds	r2, r3, #1
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	3b01      	subs	r3, #1
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d034      	beq.n	8002ac8 <HAL_I2C_Master_Transmit+0x184>
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d130      	bne.n	8002ac8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	6a3b      	ldr	r3, [r7, #32]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	2180      	movs	r1, #128	; 0x80
 8002a70:	68f8      	ldr	r0, [r7, #12]
 8002a72:	f000 fe8a 	bl	800378a <I2C_WaitOnFlagUntilTimeout>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e04d      	b.n	8002b1c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	2bff      	cmp	r3, #255	; 0xff
 8002a88:	d90e      	bls.n	8002aa8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	22ff      	movs	r2, #255	; 0xff
 8002a8e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	8979      	ldrh	r1, [r7, #10]
 8002a98:	2300      	movs	r3, #0
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f001 f801 	bl	8003aa8 <I2C_TransferConfig>
 8002aa6:	e00f      	b.n	8002ac8 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	8979      	ldrh	r1, [r7, #10]
 8002aba:	2300      	movs	r3, #0
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f000 fff0 	bl	8003aa8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d19e      	bne.n	8002a10 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	6a39      	ldr	r1, [r7, #32]
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f000 fed7 	bl	800388a <I2C_WaitOnSTOPFlagUntilTimeout>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e01a      	b.n	8002b1c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2220      	movs	r2, #32
 8002aec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6859      	ldr	r1, [r3, #4]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	4b0b      	ldr	r3, [pc, #44]	; (8002b28 <HAL_I2C_Master_Transmit+0x1e4>)
 8002afa:	400b      	ands	r3, r1
 8002afc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2220      	movs	r2, #32
 8002b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b16:	2300      	movs	r3, #0
 8002b18:	e000      	b.n	8002b1c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002b1a:	2302      	movs	r3, #2
  }
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3718      	adds	r7, #24
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	80002000 	.word	0x80002000
 8002b28:	fe00e800 	.word	0xfe00e800

08002b2c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b088      	sub	sp, #32
 8002b30:	af02      	add	r7, sp, #8
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	607a      	str	r2, [r7, #4]
 8002b36:	461a      	mov	r2, r3
 8002b38:	460b      	mov	r3, r1
 8002b3a:	817b      	strh	r3, [r7, #10]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b20      	cmp	r3, #32
 8002b4a:	f040 80db 	bne.w	8002d04 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d101      	bne.n	8002b5c <HAL_I2C_Master_Receive+0x30>
 8002b58:	2302      	movs	r3, #2
 8002b5a:	e0d4      	b.n	8002d06 <HAL_I2C_Master_Receive+0x1da>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b64:	f7fe fdea 	bl	800173c <HAL_GetTick>
 8002b68:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	2319      	movs	r3, #25
 8002b70:	2201      	movs	r2, #1
 8002b72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f000 fe07 	bl	800378a <I2C_WaitOnFlagUntilTimeout>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e0bf      	b.n	8002d06 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2222      	movs	r2, #34	; 0x22
 8002b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2210      	movs	r2, #16
 8002b92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	893a      	ldrh	r2, [r7, #8]
 8002ba6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	2bff      	cmp	r3, #255	; 0xff
 8002bb6:	d90e      	bls.n	8002bd6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	22ff      	movs	r2, #255	; 0xff
 8002bbc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc2:	b2da      	uxtb	r2, r3
 8002bc4:	8979      	ldrh	r1, [r7, #10]
 8002bc6:	4b52      	ldr	r3, [pc, #328]	; (8002d10 <HAL_I2C_Master_Receive+0x1e4>)
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f000 ff6a 	bl	8003aa8 <I2C_TransferConfig>
 8002bd4:	e06d      	b.n	8002cb2 <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	8979      	ldrh	r1, [r7, #10]
 8002be8:	4b49      	ldr	r3, [pc, #292]	; (8002d10 <HAL_I2C_Master_Receive+0x1e4>)
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 ff59 	bl	8003aa8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002bf6:	e05c      	b.n	8002cb2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	6a39      	ldr	r1, [r7, #32]
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	f000 fe81 	bl	8003904 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e07c      	b.n	8002d06 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c16:	b2d2      	uxtb	r2, r2
 8002c18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1e:	1c5a      	adds	r2, r3, #1
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	3b01      	subs	r3, #1
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d034      	beq.n	8002cb2 <HAL_I2C_Master_Receive+0x186>
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d130      	bne.n	8002cb2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	9300      	str	r3, [sp, #0]
 8002c54:	6a3b      	ldr	r3, [r7, #32]
 8002c56:	2200      	movs	r2, #0
 8002c58:	2180      	movs	r1, #128	; 0x80
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 fd95 	bl	800378a <I2C_WaitOnFlagUntilTimeout>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e04d      	b.n	8002d06 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	2bff      	cmp	r3, #255	; 0xff
 8002c72:	d90e      	bls.n	8002c92 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	22ff      	movs	r2, #255	; 0xff
 8002c78:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c7e:	b2da      	uxtb	r2, r3
 8002c80:	8979      	ldrh	r1, [r7, #10]
 8002c82:	2300      	movs	r3, #0
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f000 ff0c 	bl	8003aa8 <I2C_TransferConfig>
 8002c90:	e00f      	b.n	8002cb2 <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	8979      	ldrh	r1, [r7, #10]
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	9300      	str	r3, [sp, #0]
 8002ca8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f000 fefb 	bl	8003aa8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d19d      	bne.n	8002bf8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	6a39      	ldr	r1, [r7, #32]
 8002cc0:	68f8      	ldr	r0, [r7, #12]
 8002cc2:	f000 fde2 	bl	800388a <I2C_WaitOnSTOPFlagUntilTimeout>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e01a      	b.n	8002d06 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6859      	ldr	r1, [r3, #4]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	4b0c      	ldr	r3, [pc, #48]	; (8002d14 <HAL_I2C_Master_Receive+0x1e8>)
 8002ce4:	400b      	ands	r3, r1
 8002ce6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2220      	movs	r2, #32
 8002cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d00:	2300      	movs	r3, #0
 8002d02:	e000      	b.n	8002d06 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002d04:	2302      	movs	r3, #2
  }
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	80002400 	.word	0x80002400
 8002d14:	fe00e800 	.word	0xfe00e800

08002d18 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d005      	beq.n	8002d44 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d3c:	68ba      	ldr	r2, [r7, #8]
 8002d3e:	68f9      	ldr	r1, [r7, #12]
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	4798      	blx	r3
  }
}
 8002d44:	bf00      	nop
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	0a1b      	lsrs	r3, r3, #8
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d010      	beq.n	8002d92 <HAL_I2C_ER_IRQHandler+0x46>
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	09db      	lsrs	r3, r3, #7
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00a      	beq.n	8002d92 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d80:	f043 0201 	orr.w	r2, r3, #1
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d90:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	0a9b      	lsrs	r3, r3, #10
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d010      	beq.n	8002dc0 <HAL_I2C_ER_IRQHandler+0x74>
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	09db      	lsrs	r3, r3, #7
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00a      	beq.n	8002dc0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dae:	f043 0208 	orr.w	r2, r3, #8
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dbe:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	0a5b      	lsrs	r3, r3, #9
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d010      	beq.n	8002dee <HAL_I2C_ER_IRQHandler+0xa2>
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	09db      	lsrs	r3, r3, #7
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00a      	beq.n	8002dee <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ddc:	f043 0202 	orr.w	r2, r3, #2
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dec:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f003 030b 	and.w	r3, r3, #11
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8002dfe:	68f9      	ldr	r1, [r7, #12]
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 fb89 	bl	8003518 <I2C_ITError>
  }
}
 8002e06:	bf00      	nop
 8002e08:	3718      	adds	r7, #24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b083      	sub	sp, #12
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b083      	sub	sp, #12
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
 8002e3e:	460b      	mov	r3, r1
 8002e40:	70fb      	strb	r3, [r7, #3]
 8002e42:	4613      	mov	r3, r2
 8002e44:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002e46:	bf00      	nop
 8002e48:	370c      	adds	r7, #12
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b083      	sub	sp, #12
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b086      	sub	sp, #24
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	60f8      	str	r0, [r7, #12]
 8002e96:	60b9      	str	r1, [r7, #8]
 8002e98:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d101      	bne.n	8002eb2 <I2C_Slave_ISR_IT+0x24>
 8002eae:	2302      	movs	r3, #2
 8002eb0:	e0ec      	b.n	800308c <I2C_Slave_ISR_IT+0x1fe>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	095b      	lsrs	r3, r3, #5
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d009      	beq.n	8002eda <I2C_Slave_ISR_IT+0x4c>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	095b      	lsrs	r3, r3, #5
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002ed2:	6939      	ldr	r1, [r7, #16]
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f000 f9bf 	bl	8003258 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	091b      	lsrs	r3, r3, #4
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d04d      	beq.n	8002f82 <I2C_Slave_ISR_IT+0xf4>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	091b      	lsrs	r3, r3, #4
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d047      	beq.n	8002f82 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d128      	bne.n	8002f4e <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b28      	cmp	r3, #40	; 0x28
 8002f06:	d108      	bne.n	8002f1a <I2C_Slave_ISR_IT+0x8c>
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f0e:	d104      	bne.n	8002f1a <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002f10:	6939      	ldr	r1, [r7, #16]
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 faaa 	bl	800346c <I2C_ITListenCplt>
 8002f18:	e032      	b.n	8002f80 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b29      	cmp	r3, #41	; 0x29
 8002f24:	d10e      	bne.n	8002f44 <I2C_Slave_ISR_IT+0xb6>
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f2c:	d00a      	beq.n	8002f44 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2210      	movs	r2, #16
 8002f34:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 fbe5 	bl	8003706 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002f3c:	68f8      	ldr	r0, [r7, #12]
 8002f3e:	f000 f92d 	bl	800319c <I2C_ITSlaveSeqCplt>
 8002f42:	e01d      	b.n	8002f80 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2210      	movs	r2, #16
 8002f4a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002f4c:	e096      	b.n	800307c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2210      	movs	r2, #16
 8002f54:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5a:	f043 0204 	orr.w	r2, r3, #4
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d004      	beq.n	8002f72 <I2C_Slave_ISR_IT+0xe4>
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f6e:	f040 8085 	bne.w	800307c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f76:	4619      	mov	r1, r3
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f000 facd 	bl	8003518 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002f7e:	e07d      	b.n	800307c <I2C_Slave_ISR_IT+0x1ee>
 8002f80:	e07c      	b.n	800307c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	089b      	lsrs	r3, r3, #2
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d030      	beq.n	8002ff0 <I2C_Slave_ISR_IT+0x162>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	089b      	lsrs	r3, r3, #2
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d02a      	beq.n	8002ff0 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d018      	beq.n	8002fd6 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	1c5a      	adds	r2, r3, #1
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	b29a      	uxth	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d14f      	bne.n	8003080 <I2C_Slave_ISR_IT+0x1f2>
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002fe6:	d04b      	beq.n	8003080 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f000 f8d7 	bl	800319c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002fee:	e047      	b.n	8003080 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	08db      	lsrs	r3, r3, #3
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00a      	beq.n	8003012 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	08db      	lsrs	r3, r3, #3
 8003000:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003004:	2b00      	cmp	r3, #0
 8003006:	d004      	beq.n	8003012 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003008:	6939      	ldr	r1, [r7, #16]
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f000 f842 	bl	8003094 <I2C_ITAddrCplt>
 8003010:	e037      	b.n	8003082 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	085b      	lsrs	r3, r3, #1
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	d031      	beq.n	8003082 <I2C_Slave_ISR_IT+0x1f4>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	085b      	lsrs	r3, r3, #1
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d02b      	beq.n	8003082 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302e:	b29b      	uxth	r3, r3
 8003030:	2b00      	cmp	r3, #0
 8003032:	d018      	beq.n	8003066 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	781a      	ldrb	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	1c5a      	adds	r2, r3, #1
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800304e:	b29b      	uxth	r3, r3
 8003050:	3b01      	subs	r3, #1
 8003052:	b29a      	uxth	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800305c:	3b01      	subs	r3, #1
 800305e:	b29a      	uxth	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	851a      	strh	r2, [r3, #40]	; 0x28
 8003064:	e00d      	b.n	8003082 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800306c:	d002      	beq.n	8003074 <I2C_Slave_ISR_IT+0x1e6>
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d106      	bne.n	8003082 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f000 f891 	bl	800319c <I2C_ITSlaveSeqCplt>
 800307a:	e002      	b.n	8003082 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800307c:	bf00      	nop
 800307e:	e000      	b.n	8003082 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003080:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3718      	adds	r7, #24
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80030aa:	2b28      	cmp	r3, #40	; 0x28
 80030ac:	d16a      	bne.n	8003184 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	0c1b      	lsrs	r3, r3, #16
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	0c1b      	lsrs	r3, r3, #16
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80030cc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030da:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80030e8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d138      	bne.n	8003164 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80030f2:	897b      	ldrh	r3, [r7, #10]
 80030f4:	09db      	lsrs	r3, r3, #7
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	89bb      	ldrh	r3, [r7, #12]
 80030fa:	4053      	eors	r3, r2
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	f003 0306 	and.w	r3, r3, #6
 8003102:	2b00      	cmp	r3, #0
 8003104:	d11c      	bne.n	8003140 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003106:	897b      	ldrh	r3, [r7, #10]
 8003108:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800310e:	1c5a      	adds	r2, r3, #1
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003118:	2b02      	cmp	r3, #2
 800311a:	d13b      	bne.n	8003194 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2208      	movs	r2, #8
 8003128:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003132:	89ba      	ldrh	r2, [r7, #12]
 8003134:	7bfb      	ldrb	r3, [r7, #15]
 8003136:	4619      	mov	r1, r3
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f7ff fe7c 	bl	8002e36 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800313e:	e029      	b.n	8003194 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003140:	893b      	ldrh	r3, [r7, #8]
 8003142:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003144:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 fcdb 	bl	8003b04 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003156:	89ba      	ldrh	r2, [r7, #12]
 8003158:	7bfb      	ldrb	r3, [r7, #15]
 800315a:	4619      	mov	r1, r3
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f7ff fe6a 	bl	8002e36 <HAL_I2C_AddrCallback>
}
 8003162:	e017      	b.n	8003194 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003164:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 fccb 	bl	8003b04 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003176:	89ba      	ldrh	r2, [r7, #12]
 8003178:	7bfb      	ldrb	r3, [r7, #15]
 800317a:	4619      	mov	r1, r3
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f7ff fe5a 	bl	8002e36 <HAL_I2C_AddrCallback>
}
 8003182:	e007      	b.n	8003194 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2208      	movs	r2, #8
 800318a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003194:	bf00      	nop
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	0b9b      	lsrs	r3, r3, #14
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d008      	beq.n	80031d2 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	e00d      	b.n	80031ee <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	0bdb      	lsrs	r3, r3, #15
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d007      	beq.n	80031ee <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031ec:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b29      	cmp	r3, #41	; 0x29
 80031f8:	d112      	bne.n	8003220 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2228      	movs	r2, #40	; 0x28
 80031fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2221      	movs	r2, #33	; 0x21
 8003206:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003208:	2101      	movs	r1, #1
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 fc7a 	bl	8003b04 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f7ff fdf8 	bl	8002e0e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800321e:	e017      	b.n	8003250 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b2a      	cmp	r3, #42	; 0x2a
 800322a:	d111      	bne.n	8003250 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2228      	movs	r2, #40	; 0x28
 8003230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2222      	movs	r2, #34	; 0x22
 8003238:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800323a:	2102      	movs	r1, #2
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 fc61 	bl	8003b04 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7ff fde9 	bl	8002e22 <HAL_I2C_SlaveRxCpltCallback>
}
 8003250:	bf00      	nop
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003274:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2220      	movs	r2, #32
 800327c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800327e:	7bfb      	ldrb	r3, [r7, #15]
 8003280:	2b21      	cmp	r3, #33	; 0x21
 8003282:	d002      	beq.n	800328a <I2C_ITSlaveCplt+0x32>
 8003284:	7bfb      	ldrb	r3, [r7, #15]
 8003286:	2b29      	cmp	r3, #41	; 0x29
 8003288:	d108      	bne.n	800329c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800328a:	f248 0101 	movw	r1, #32769	; 0x8001
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 fc38 	bl	8003b04 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2221      	movs	r2, #33	; 0x21
 8003298:	631a      	str	r2, [r3, #48]	; 0x30
 800329a:	e00d      	b.n	80032b8 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800329c:	7bfb      	ldrb	r3, [r7, #15]
 800329e:	2b22      	cmp	r3, #34	; 0x22
 80032a0:	d002      	beq.n	80032a8 <I2C_ITSlaveCplt+0x50>
 80032a2:	7bfb      	ldrb	r3, [r7, #15]
 80032a4:	2b2a      	cmp	r3, #42	; 0x2a
 80032a6:	d107      	bne.n	80032b8 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80032a8:	f248 0102 	movw	r1, #32770	; 0x8002
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 fc29 	bl	8003b04 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2222      	movs	r2, #34	; 0x22
 80032b6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032c6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6859      	ldr	r1, [r3, #4]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	4b64      	ldr	r3, [pc, #400]	; (8003464 <I2C_ITSlaveCplt+0x20c>)
 80032d4:	400b      	ands	r3, r1
 80032d6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 fa14 	bl	8003706 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	0b9b      	lsrs	r3, r3, #14
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d013      	beq.n	8003312 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80032f8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d020      	beq.n	8003344 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	b29a      	uxth	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003310:	e018      	b.n	8003344 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	0bdb      	lsrs	r3, r3, #15
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b00      	cmp	r3, #0
 800331c:	d012      	beq.n	8003344 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800332c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003332:	2b00      	cmp	r3, #0
 8003334:	d006      	beq.n	8003344 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	b29a      	uxth	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	089b      	lsrs	r3, r3, #2
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	2b00      	cmp	r3, #0
 800334e:	d020      	beq.n	8003392 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	f023 0304 	bic.w	r3, r3, #4
 8003356:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336a:	1c5a      	adds	r2, r3, #1
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00c      	beq.n	8003392 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800337c:	3b01      	subs	r3, #1
 800337e:	b29a      	uxth	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003388:	b29b      	uxth	r3, r3
 800338a:	3b01      	subs	r3, #1
 800338c:	b29a      	uxth	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003396:	b29b      	uxth	r3, r3
 8003398:	2b00      	cmp	r3, #0
 800339a:	d005      	beq.n	80033a8 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a0:	f043 0204 	orr.w	r2, r3, #4
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d010      	beq.n	80033e0 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c2:	4619      	mov	r1, r3
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 f8a7 	bl	8003518 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b28      	cmp	r3, #40	; 0x28
 80033d4:	d141      	bne.n	800345a <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80033d6:	6979      	ldr	r1, [r7, #20]
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f000 f847 	bl	800346c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80033de:	e03c      	b.n	800345a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033e8:	d014      	beq.n	8003414 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f7ff fed6 	bl	800319c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a1d      	ldr	r2, [pc, #116]	; (8003468 <I2C_ITSlaveCplt+0x210>)
 80033f4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2220      	movs	r2, #32
 80033fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f7ff fd20 	bl	8002e52 <HAL_I2C_ListenCpltCallback>
}
 8003412:	e022      	b.n	800345a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b22      	cmp	r3, #34	; 0x22
 800341e:	d10e      	bne.n	800343e <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2220      	movs	r2, #32
 8003424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7ff fcf3 	bl	8002e22 <HAL_I2C_SlaveRxCpltCallback>
}
 800343c:	e00d      	b.n	800345a <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2220      	movs	r2, #32
 8003442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7ff fcda 	bl	8002e0e <HAL_I2C_SlaveTxCpltCallback>
}
 800345a:	bf00      	nop
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	fe00e800 	.word	0xfe00e800
 8003468:	ffff0000 	.word	0xffff0000

0800346c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a26      	ldr	r2, [pc, #152]	; (8003514 <I2C_ITListenCplt+0xa8>)
 800347a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2220      	movs	r2, #32
 8003486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	089b      	lsrs	r3, r3, #2
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d022      	beq.n	80034ea <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ae:	b2d2      	uxtb	r2, r2
 80034b0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b6:	1c5a      	adds	r2, r3, #1
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d012      	beq.n	80034ea <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c8:	3b01      	subs	r3, #1
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	3b01      	subs	r3, #1
 80034d8:	b29a      	uxth	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e2:	f043 0204 	orr.w	r2, r3, #4
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80034ea:	f248 0103 	movw	r1, #32771	; 0x8003
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 fb08 	bl	8003b04 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2210      	movs	r2, #16
 80034fa:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f7ff fca4 	bl	8002e52 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800350a:	bf00      	nop
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	ffff0000 	.word	0xffff0000

08003518 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003528:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a5d      	ldr	r2, [pc, #372]	; (80036ac <I2C_ITError+0x194>)
 8003536:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	431a      	orrs	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800354a:	7bfb      	ldrb	r3, [r7, #15]
 800354c:	2b28      	cmp	r3, #40	; 0x28
 800354e:	d005      	beq.n	800355c <I2C_ITError+0x44>
 8003550:	7bfb      	ldrb	r3, [r7, #15]
 8003552:	2b29      	cmp	r3, #41	; 0x29
 8003554:	d002      	beq.n	800355c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003556:	7bfb      	ldrb	r3, [r7, #15]
 8003558:	2b2a      	cmp	r3, #42	; 0x2a
 800355a:	d10b      	bne.n	8003574 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800355c:	2103      	movs	r1, #3
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 fad0 	bl	8003b04 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2228      	movs	r2, #40	; 0x28
 8003568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a50      	ldr	r2, [pc, #320]	; (80036b0 <I2C_ITError+0x198>)
 8003570:	635a      	str	r2, [r3, #52]	; 0x34
 8003572:	e011      	b.n	8003598 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003574:	f248 0103 	movw	r1, #32771	; 0x8003
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f000 fac3 	bl	8003b04 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b60      	cmp	r3, #96	; 0x60
 8003588:	d003      	beq.n	8003592 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2220      	movs	r2, #32
 800358e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d039      	beq.n	800361a <I2C_ITError+0x102>
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	2b11      	cmp	r3, #17
 80035aa:	d002      	beq.n	80035b2 <I2C_ITError+0x9a>
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	2b21      	cmp	r3, #33	; 0x21
 80035b0:	d133      	bne.n	800361a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035c0:	d107      	bne.n	80035d2 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80035d0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d6:	4618      	mov	r0, r3
 80035d8:	f7fe ff4f 	bl	800247a <HAL_DMA_GetState>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d017      	beq.n	8003612 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e6:	4a33      	ldr	r2, [pc, #204]	; (80036b4 <I2C_ITError+0x19c>)
 80035e8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7fe ff1d 	bl	8002436 <HAL_DMA_Abort_IT>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d04d      	beq.n	800369e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800360c:	4610      	mov	r0, r2
 800360e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003610:	e045      	b.n	800369e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f850 	bl	80036b8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003618:	e041      	b.n	800369e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800361e:	2b00      	cmp	r3, #0
 8003620:	d039      	beq.n	8003696 <I2C_ITError+0x17e>
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	2b12      	cmp	r3, #18
 8003626:	d002      	beq.n	800362e <I2C_ITError+0x116>
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	2b22      	cmp	r3, #34	; 0x22
 800362c:	d133      	bne.n	8003696 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003638:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800363c:	d107      	bne.n	800364e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800364c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003652:	4618      	mov	r0, r3
 8003654:	f7fe ff11 	bl	800247a <HAL_DMA_GetState>
 8003658:	4603      	mov	r3, r0
 800365a:	2b01      	cmp	r3, #1
 800365c:	d017      	beq.n	800368e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003662:	4a14      	ldr	r2, [pc, #80]	; (80036b4 <I2C_ITError+0x19c>)
 8003664:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003672:	4618      	mov	r0, r3
 8003674:	f7fe fedf 	bl	8002436 <HAL_DMA_Abort_IT>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d011      	beq.n	80036a2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003688:	4610      	mov	r0, r2
 800368a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800368c:	e009      	b.n	80036a2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f812 	bl	80036b8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003694:	e005      	b.n	80036a2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f80e 	bl	80036b8 <I2C_TreatErrorCallback>
  }
}
 800369c:	e002      	b.n	80036a4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800369e:	bf00      	nop
 80036a0:	e000      	b.n	80036a4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80036a2:	bf00      	nop
}
 80036a4:	bf00      	nop
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	ffff0000 	.word	0xffff0000
 80036b0:	08002e8f 	.word	0x08002e8f
 80036b4:	0800374f 	.word	0x0800374f

080036b8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b60      	cmp	r3, #96	; 0x60
 80036ca:	d10e      	bne.n	80036ea <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7ff fbc9 	bl	8002e7a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80036e8:	e009      	b.n	80036fe <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f7ff fbb4 	bl	8002e66 <HAL_I2C_ErrorCallback>
}
 80036fe:	bf00      	nop
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003706:	b480      	push	{r7}
 8003708:	b083      	sub	sp, #12
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b02      	cmp	r3, #2
 800371a:	d103      	bne.n	8003724 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2200      	movs	r2, #0
 8003722:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b01      	cmp	r3, #1
 8003730:	d007      	beq.n	8003742 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	699a      	ldr	r2, [r3, #24]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f042 0201 	orr.w	r2, r2, #1
 8003740:	619a      	str	r2, [r3, #24]
  }
}
 8003742:	bf00      	nop
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b084      	sub	sp, #16
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003760:	2b00      	cmp	r3, #0
 8003762:	d003      	beq.n	800376c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003768:	2200      	movs	r2, #0
 800376a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003770:	2b00      	cmp	r3, #0
 8003772:	d003      	beq.n	800377c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003778:	2200      	movs	r2, #0
 800377a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f7ff ff9b 	bl	80036b8 <I2C_TreatErrorCallback>
}
 8003782:	bf00      	nop
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b084      	sub	sp, #16
 800378e:	af00      	add	r7, sp, #0
 8003790:	60f8      	str	r0, [r7, #12]
 8003792:	60b9      	str	r1, [r7, #8]
 8003794:	603b      	str	r3, [r7, #0]
 8003796:	4613      	mov	r3, r2
 8003798:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800379a:	e022      	b.n	80037e2 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a2:	d01e      	beq.n	80037e2 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037a4:	f7fd ffca 	bl	800173c <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d302      	bcc.n	80037ba <I2C_WaitOnFlagUntilTimeout+0x30>
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d113      	bne.n	80037e2 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037be:	f043 0220 	orr.w	r2, r3, #32
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2220      	movs	r2, #32
 80037ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e00f      	b.n	8003802 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	699a      	ldr	r2, [r3, #24]
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	4013      	ands	r3, r2
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	bf0c      	ite	eq
 80037f2:	2301      	moveq	r3, #1
 80037f4:	2300      	movne	r3, #0
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	461a      	mov	r2, r3
 80037fa:	79fb      	ldrb	r3, [r7, #7]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d0cd      	beq.n	800379c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b084      	sub	sp, #16
 800380e:	af00      	add	r7, sp, #0
 8003810:	60f8      	str	r0, [r7, #12]
 8003812:	60b9      	str	r1, [r7, #8]
 8003814:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003816:	e02c      	b.n	8003872 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	68b9      	ldr	r1, [r7, #8]
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 f8dd 	bl	80039dc <I2C_IsAcknowledgeFailed>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e02a      	b.n	8003882 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003832:	d01e      	beq.n	8003872 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003834:	f7fd ff82 	bl	800173c <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	429a      	cmp	r2, r3
 8003842:	d302      	bcc.n	800384a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d113      	bne.n	8003872 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384e:	f043 0220 	orr.w	r2, r3, #32
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2220      	movs	r2, #32
 800385a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e007      	b.n	8003882 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	f003 0302 	and.w	r3, r3, #2
 800387c:	2b02      	cmp	r3, #2
 800387e:	d1cb      	bne.n	8003818 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b084      	sub	sp, #16
 800388e:	af00      	add	r7, sp, #0
 8003890:	60f8      	str	r0, [r7, #12]
 8003892:	60b9      	str	r1, [r7, #8]
 8003894:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003896:	e028      	b.n	80038ea <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	68b9      	ldr	r1, [r7, #8]
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 f89d 	bl	80039dc <I2C_IsAcknowledgeFailed>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e026      	b.n	80038fa <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ac:	f7fd ff46 	bl	800173c <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	68ba      	ldr	r2, [r7, #8]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d302      	bcc.n	80038c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d113      	bne.n	80038ea <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c6:	f043 0220 	orr.w	r2, r3, #32
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2220      	movs	r2, #32
 80038d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e007      	b.n	80038fa <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	699b      	ldr	r3, [r3, #24]
 80038f0:	f003 0320 	and.w	r3, r3, #32
 80038f4:	2b20      	cmp	r3, #32
 80038f6:	d1cf      	bne.n	8003898 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
	...

08003904 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003910:	e055      	b.n	80039be <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	68b9      	ldr	r1, [r7, #8]
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 f860 	bl	80039dc <I2C_IsAcknowledgeFailed>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d001      	beq.n	8003926 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e053      	b.n	80039ce <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	f003 0320 	and.w	r3, r3, #32
 8003930:	2b20      	cmp	r3, #32
 8003932:	d129      	bne.n	8003988 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	f003 0304 	and.w	r3, r3, #4
 800393e:	2b04      	cmp	r3, #4
 8003940:	d105      	bne.n	800394e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800394a:	2300      	movs	r3, #0
 800394c:	e03f      	b.n	80039ce <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2220      	movs	r2, #32
 8003954:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6859      	ldr	r1, [r3, #4]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	4b1d      	ldr	r3, [pc, #116]	; (80039d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003962:	400b      	ands	r3, r1
 8003964:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2220      	movs	r2, #32
 8003970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e022      	b.n	80039ce <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003988:	f7fd fed8 	bl	800173c <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	429a      	cmp	r2, r3
 8003996:	d302      	bcc.n	800399e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10f      	bne.n	80039be <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a2:	f043 0220 	orr.w	r2, r3, #32
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2220      	movs	r2, #32
 80039ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e007      	b.n	80039ce <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b04      	cmp	r3, #4
 80039ca:	d1a2      	bne.n	8003912 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	fe00e800 	.word	0xfe00e800

080039dc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	f003 0310 	and.w	r3, r3, #16
 80039f2:	2b10      	cmp	r3, #16
 80039f4:	d151      	bne.n	8003a9a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039f6:	e022      	b.n	8003a3e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039fe:	d01e      	beq.n	8003a3e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a00:	f7fd fe9c 	bl	800173c <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d302      	bcc.n	8003a16 <I2C_IsAcknowledgeFailed+0x3a>
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d113      	bne.n	8003a3e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1a:	f043 0220 	orr.w	r2, r3, #32
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2220      	movs	r2, #32
 8003a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e02e      	b.n	8003a9c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	f003 0320 	and.w	r3, r3, #32
 8003a48:	2b20      	cmp	r3, #32
 8003a4a:	d1d5      	bne.n	80039f8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2210      	movs	r2, #16
 8003a52:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	f7ff fe52 	bl	8003706 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6859      	ldr	r1, [r3, #4]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	4b0d      	ldr	r3, [pc, #52]	; (8003aa4 <I2C_IsAcknowledgeFailed+0xc8>)
 8003a6e:	400b      	ands	r3, r1
 8003a70:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a76:	f043 0204 	orr.w	r2, r3, #4
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2220      	movs	r2, #32
 8003a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e000      	b.n	8003a9c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	fe00e800 	.word	0xfe00e800

08003aa8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	607b      	str	r3, [r7, #4]
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	817b      	strh	r3, [r7, #10]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	0d5b      	lsrs	r3, r3, #21
 8003ac4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003ac8:	4b0d      	ldr	r3, [pc, #52]	; (8003b00 <I2C_TransferConfig+0x58>)
 8003aca:	430b      	orrs	r3, r1
 8003acc:	43db      	mvns	r3, r3
 8003ace:	ea02 0103 	and.w	r1, r2, r3
 8003ad2:	897b      	ldrh	r3, [r7, #10]
 8003ad4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003ad8:	7a7b      	ldrb	r3, [r7, #9]
 8003ada:	041b      	lsls	r3, r3, #16
 8003adc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	431a      	orrs	r2, r3
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003af2:	bf00      	nop
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	03ff63ff 	.word	0x03ff63ff

08003b04 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003b10:	2300      	movs	r3, #0
 8003b12:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003b14:	887b      	ldrh	r3, [r7, #2]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00f      	beq.n	8003b3e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003b24:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b32:	2b28      	cmp	r3, #40	; 0x28
 8003b34:	d003      	beq.n	8003b3e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003b3c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003b3e:	887b      	ldrh	r3, [r7, #2]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00f      	beq.n	8003b68 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003b4e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b5c:	2b28      	cmp	r3, #40	; 0x28
 8003b5e:	d003      	beq.n	8003b68 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003b66:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003b68:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	da03      	bge.n	8003b78 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003b76:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003b78:	887b      	ldrh	r3, [r7, #2]
 8003b7a:	2b10      	cmp	r3, #16
 8003b7c:	d103      	bne.n	8003b86 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003b84:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003b86:	887b      	ldrh	r3, [r7, #2]
 8003b88:	2b20      	cmp	r3, #32
 8003b8a:	d103      	bne.n	8003b94 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f043 0320 	orr.w	r3, r3, #32
 8003b92:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003b94:	887b      	ldrh	r3, [r7, #2]
 8003b96:	2b40      	cmp	r3, #64	; 0x40
 8003b98:	d103      	bne.n	8003ba2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ba0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6819      	ldr	r1, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	43da      	mvns	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	400a      	ands	r2, r1
 8003bb2:	601a      	str	r2, [r3, #0]
}
 8003bb4:	bf00      	nop
 8003bb6:	3714      	adds	r7, #20
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b20      	cmp	r3, #32
 8003bd4:	d138      	bne.n	8003c48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d101      	bne.n	8003be4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003be0:	2302      	movs	r3, #2
 8003be2:	e032      	b.n	8003c4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2224      	movs	r2, #36	; 0x24
 8003bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f022 0201 	bic.w	r2, r2, #1
 8003c02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6819      	ldr	r1, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f042 0201 	orr.w	r2, r2, #1
 8003c32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2220      	movs	r2, #32
 8003c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c44:	2300      	movs	r3, #0
 8003c46:	e000      	b.n	8003c4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c48:	2302      	movs	r3, #2
  }
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c56:	b480      	push	{r7}
 8003c58:	b085      	sub	sp, #20
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
 8003c5e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b20      	cmp	r3, #32
 8003c6a:	d139      	bne.n	8003ce0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d101      	bne.n	8003c7a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c76:	2302      	movs	r3, #2
 8003c78:	e033      	b.n	8003ce2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2224      	movs	r2, #36	; 0x24
 8003c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0201 	bic.w	r2, r2, #1
 8003c98:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ca8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	021b      	lsls	r3, r3, #8
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f042 0201 	orr.w	r2, r2, #1
 8003cca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	e000      	b.n	8003ce2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ce0:	2302      	movs	r3, #2
  }
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003cee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cf0:	b08f      	sub	sp, #60	; 0x3c
 8003cf2:	af0a      	add	r7, sp, #40	; 0x28
 8003cf4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d101      	bne.n	8003d00 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e116      	b.n	8003f2e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d106      	bne.n	8003d20 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7fd fc38 	bl	8001590 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2203      	movs	r2, #3
 8003d24:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d102      	bne.n	8003d3a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f003 fd2e 	bl	80077a0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	603b      	str	r3, [r7, #0]
 8003d4a:	687e      	ldr	r6, [r7, #4]
 8003d4c:	466d      	mov	r5, sp
 8003d4e:	f106 0410 	add.w	r4, r6, #16
 8003d52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d62:	1d33      	adds	r3, r6, #4
 8003d64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d66:	6838      	ldr	r0, [r7, #0]
 8003d68:	f003 fcc2 	bl	80076f0 <USB_CoreInit>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d005      	beq.n	8003d7e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2202      	movs	r2, #2
 8003d76:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e0d7      	b.n	8003f2e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2100      	movs	r1, #0
 8003d84:	4618      	mov	r0, r3
 8003d86:	f003 fd1c 	bl	80077c2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	73fb      	strb	r3, [r7, #15]
 8003d8e:	e04a      	b.n	8003e26 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d90:	7bfa      	ldrb	r2, [r7, #15]
 8003d92:	6879      	ldr	r1, [r7, #4]
 8003d94:	4613      	mov	r3, r2
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	1a9b      	subs	r3, r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	333d      	adds	r3, #61	; 0x3d
 8003da0:	2201      	movs	r2, #1
 8003da2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003da4:	7bfa      	ldrb	r2, [r7, #15]
 8003da6:	6879      	ldr	r1, [r7, #4]
 8003da8:	4613      	mov	r3, r2
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	1a9b      	subs	r3, r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	440b      	add	r3, r1
 8003db2:	333c      	adds	r3, #60	; 0x3c
 8003db4:	7bfa      	ldrb	r2, [r7, #15]
 8003db6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003db8:	7bfa      	ldrb	r2, [r7, #15]
 8003dba:	7bfb      	ldrb	r3, [r7, #15]
 8003dbc:	b298      	uxth	r0, r3
 8003dbe:	6879      	ldr	r1, [r7, #4]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	1a9b      	subs	r3, r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	440b      	add	r3, r1
 8003dca:	3342      	adds	r3, #66	; 0x42
 8003dcc:	4602      	mov	r2, r0
 8003dce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003dd0:	7bfa      	ldrb	r2, [r7, #15]
 8003dd2:	6879      	ldr	r1, [r7, #4]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	1a9b      	subs	r3, r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	440b      	add	r3, r1
 8003dde:	333f      	adds	r3, #63	; 0x3f
 8003de0:	2200      	movs	r2, #0
 8003de2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003de4:	7bfa      	ldrb	r2, [r7, #15]
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	4613      	mov	r3, r2
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	1a9b      	subs	r3, r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	3344      	adds	r3, #68	; 0x44
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003df8:	7bfa      	ldrb	r2, [r7, #15]
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	1a9b      	subs	r3, r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	3348      	adds	r3, #72	; 0x48
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e0c:	7bfa      	ldrb	r2, [r7, #15]
 8003e0e:	6879      	ldr	r1, [r7, #4]
 8003e10:	4613      	mov	r3, r2
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	1a9b      	subs	r3, r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	440b      	add	r3, r1
 8003e1a:	3350      	adds	r3, #80	; 0x50
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e20:	7bfb      	ldrb	r3, [r7, #15]
 8003e22:	3301      	adds	r3, #1
 8003e24:	73fb      	strb	r3, [r7, #15]
 8003e26:	7bfa      	ldrb	r2, [r7, #15]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	429a      	cmp	r2, r3
 8003e2e:	d3af      	bcc.n	8003d90 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e30:	2300      	movs	r3, #0
 8003e32:	73fb      	strb	r3, [r7, #15]
 8003e34:	e044      	b.n	8003ec0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e36:	7bfa      	ldrb	r2, [r7, #15]
 8003e38:	6879      	ldr	r1, [r7, #4]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	1a9b      	subs	r3, r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	440b      	add	r3, r1
 8003e44:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003e48:	2200      	movs	r2, #0
 8003e4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e4c:	7bfa      	ldrb	r2, [r7, #15]
 8003e4e:	6879      	ldr	r1, [r7, #4]
 8003e50:	4613      	mov	r3, r2
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	1a9b      	subs	r3, r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	440b      	add	r3, r1
 8003e5a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003e5e:	7bfa      	ldrb	r2, [r7, #15]
 8003e60:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003e62:	7bfa      	ldrb	r2, [r7, #15]
 8003e64:	6879      	ldr	r1, [r7, #4]
 8003e66:	4613      	mov	r3, r2
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	1a9b      	subs	r3, r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	440b      	add	r3, r1
 8003e70:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003e74:	2200      	movs	r2, #0
 8003e76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003e78:	7bfa      	ldrb	r2, [r7, #15]
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	1a9b      	subs	r3, r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	440b      	add	r3, r1
 8003e86:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e8e:	7bfa      	ldrb	r2, [r7, #15]
 8003e90:	6879      	ldr	r1, [r7, #4]
 8003e92:	4613      	mov	r3, r2
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	1a9b      	subs	r3, r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	440b      	add	r3, r1
 8003e9c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ea4:	7bfa      	ldrb	r2, [r7, #15]
 8003ea6:	6879      	ldr	r1, [r7, #4]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	1a9b      	subs	r3, r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003eba:	7bfb      	ldrb	r3, [r7, #15]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	73fb      	strb	r3, [r7, #15]
 8003ec0:	7bfa      	ldrb	r2, [r7, #15]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d3b5      	bcc.n	8003e36 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	603b      	str	r3, [r7, #0]
 8003ed0:	687e      	ldr	r6, [r7, #4]
 8003ed2:	466d      	mov	r5, sp
 8003ed4:	f106 0410 	add.w	r4, r6, #16
 8003ed8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003eda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003edc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ede:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ee0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ee4:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ee8:	1d33      	adds	r3, r6, #4
 8003eea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003eec:	6838      	ldr	r0, [r7, #0]
 8003eee:	f003 fc93 	bl	8007818 <USB_DevInit>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d005      	beq.n	8003f04 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2202      	movs	r2, #2
 8003efc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e014      	b.n	8003f2e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d102      	bne.n	8003f22 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 f80b 	bl	8003f38 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f003 fe45 	bl	8007bb6 <USB_DevDisconnect>

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3714      	adds	r7, #20
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003f38 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f66:	4b05      	ldr	r3, [pc, #20]	; (8003f7c <HAL_PCDEx_ActivateLPM+0x44>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3714      	adds	r7, #20
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr
 8003f7c:	10000003 	.word	0x10000003

08003f80 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f84:	4b05      	ldr	r3, [pc, #20]	; (8003f9c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a04      	ldr	r2, [pc, #16]	; (8003f9c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f8e:	6013      	str	r3, [r2, #0]
}
 8003f90:	bf00      	nop
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	40007000 	.word	0x40007000

08003fa0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003faa:	4b23      	ldr	r3, [pc, #140]	; (8004038 <HAL_PWREx_EnableOverDrive+0x98>)
 8003fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fae:	4a22      	ldr	r2, [pc, #136]	; (8004038 <HAL_PWREx_EnableOverDrive+0x98>)
 8003fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8003fb6:	4b20      	ldr	r3, [pc, #128]	; (8004038 <HAL_PWREx_EnableOverDrive+0x98>)
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fbe:	603b      	str	r3, [r7, #0]
 8003fc0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003fc2:	4b1e      	ldr	r3, [pc, #120]	; (800403c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a1d      	ldr	r2, [pc, #116]	; (800403c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fcc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003fce:	f7fd fbb5 	bl	800173c <HAL_GetTick>
 8003fd2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003fd4:	e009      	b.n	8003fea <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003fd6:	f7fd fbb1 	bl	800173c <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fe4:	d901      	bls.n	8003fea <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e022      	b.n	8004030 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003fea:	4b14      	ldr	r3, [pc, #80]	; (800403c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ff2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff6:	d1ee      	bne.n	8003fd6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003ff8:	4b10      	ldr	r3, [pc, #64]	; (800403c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a0f      	ldr	r2, [pc, #60]	; (800403c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ffe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004002:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004004:	f7fd fb9a 	bl	800173c <HAL_GetTick>
 8004008:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800400a:	e009      	b.n	8004020 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800400c:	f7fd fb96 	bl	800173c <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800401a:	d901      	bls.n	8004020 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e007      	b.n	8004030 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004020:	4b06      	ldr	r3, [pc, #24]	; (800403c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004028:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800402c:	d1ee      	bne.n	800400c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3708      	adds	r7, #8
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	40023800 	.word	0x40023800
 800403c:	40007000 	.word	0x40007000

08004040 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004048:	2300      	movs	r3, #0
 800404a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e29b      	b.n	800458e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b00      	cmp	r3, #0
 8004060:	f000 8087 	beq.w	8004172 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004064:	4b96      	ldr	r3, [pc, #600]	; (80042c0 <HAL_RCC_OscConfig+0x280>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f003 030c 	and.w	r3, r3, #12
 800406c:	2b04      	cmp	r3, #4
 800406e:	d00c      	beq.n	800408a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004070:	4b93      	ldr	r3, [pc, #588]	; (80042c0 <HAL_RCC_OscConfig+0x280>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f003 030c 	and.w	r3, r3, #12
 8004078:	2b08      	cmp	r3, #8
 800407a:	d112      	bne.n	80040a2 <HAL_RCC_OscConfig+0x62>
 800407c:	4b90      	ldr	r3, [pc, #576]	; (80042c0 <HAL_RCC_OscConfig+0x280>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004084:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004088:	d10b      	bne.n	80040a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800408a:	4b8d      	ldr	r3, [pc, #564]	; (80042c0 <HAL_RCC_OscConfig+0x280>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d06c      	beq.n	8004170 <HAL_RCC_OscConfig+0x130>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d168      	bne.n	8004170 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e275      	b.n	800458e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040aa:	d106      	bne.n	80040ba <HAL_RCC_OscConfig+0x7a>
 80040ac:	4b84      	ldr	r3, [pc, #528]	; (80042c0 <HAL_RCC_OscConfig+0x280>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a83      	ldr	r2, [pc, #524]	; (80042c0 <HAL_RCC_OscConfig+0x280>)
 80040b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b6:	6013      	str	r3, [r2, #0]
 80040b8:	e02e      	b.n	8004118 <HAL_RCC_OscConfig+0xd8>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10c      	bne.n	80040dc <HAL_RCC_OscConfig+0x9c>
 80040c2:	4b7f      	ldr	r3, [pc, #508]	; (80042c0 <HAL_RCC_OscConfig+0x280>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a7e      	ldr	r2, [pc, #504]	; (80042c0 <HAL_RCC_OscConfig+0x280>)
 80040c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040cc:	6013      	str	r3, [r2, #0]
 80040ce:	4b7c      	ldr	r3, [pc, #496]	; (80042c0 <HAL_RCC_OscConfig+0x280>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a7b      	ldr	r2, [pc, #492]	; (80042c0 <HAL_RCC_OscConfig+0x280>)
 80040d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040d8:	6013      	str	r3, [r2, #0]
 80040da:	e01d      	b.n	8004118 <HAL_RCC_OscConfig+0xd8>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040e4:	d10c      	bne.n	8004100 <HAL_RCC_OscConfig+0xc0>
 80040e6:	4b76      	ldr	r3, [pc, #472]	; (80042c0 <HAL_RCC_OscConfig+0x280>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a75      	ldr	r2, [pc, #468]	; (80042c0 <HAL_RCC_OscConfig+0x280>)
 80040ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040f0:	6013      	str	r3, [r2, #0]
 80040f2:	4b73      	ldr	r3, [pc, #460]	; (80042c0 <HAL_RCC_OscConfig+0x280>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a72      	ldr	r2, [pc, #456]	; (80042c0 <HAL_RCC_OscConfig+0x280>)
 80040f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040fc:	6013      	str	r3, [r2, #0]
 80040fe:	e00b      	b.n	8004118 <HAL_RCC_OscConfig+0xd8>
 8004100:	4b6f      	ldr	r3, [pc, #444]	; (80042c0 <HAL_RCC_OscConfig+0x280>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a6e      	ldr	r2, [pc, #440]	; (80042c0 <HAL_RCC_OscConfig+0x280>)
 8004106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800410a:	6013      	str	r3, [r2, #0]
 800410c:	4b6c      	ldr	r3, [pc, #432]	; (80042c0 <HAL_RCC_OscConfig+0x280>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a6b      	ldr	r2, [pc, #428]	; (80042c0 <HAL_RCC_OscConfig+0x280>)
 8004112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004116:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d013      	beq.n	8004148 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004120:	f7fd fb0c 	bl	800173c <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004128:	f7fd fb08 	bl	800173c <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b64      	cmp	r3, #100	; 0x64
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e229      	b.n	800458e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800413a:	4b61      	ldr	r3, [pc, #388]	; (80042c0 <HAL_RCC_OscConfig+0x280>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d0f0      	beq.n	8004128 <HAL_RCC_OscConfig+0xe8>
 8004146:	e014      	b.n	8004172 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004148:	f7fd faf8 	bl	800173c <HAL_GetTick>
 800414c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800414e:	e008      	b.n	8004162 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004150:	f7fd faf4 	bl	800173c <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b64      	cmp	r3, #100	; 0x64
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e215      	b.n	800458e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004162:	4b57      	ldr	r3, [pc, #348]	; (80042c0 <HAL_RCC_OscConfig+0x280>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1f0      	bne.n	8004150 <HAL_RCC_OscConfig+0x110>
 800416e:	e000      	b.n	8004172 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d069      	beq.n	8004252 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800417e:	4b50      	ldr	r3, [pc, #320]	; (80042c0 <HAL_RCC_OscConfig+0x280>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f003 030c 	and.w	r3, r3, #12
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00b      	beq.n	80041a2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800418a:	4b4d      	ldr	r3, [pc, #308]	; (80042c0 <HAL_RCC_OscConfig+0x280>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f003 030c 	and.w	r3, r3, #12
 8004192:	2b08      	cmp	r3, #8
 8004194:	d11c      	bne.n	80041d0 <HAL_RCC_OscConfig+0x190>
 8004196:	4b4a      	ldr	r3, [pc, #296]	; (80042c0 <HAL_RCC_OscConfig+0x280>)
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d116      	bne.n	80041d0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041a2:	4b47      	ldr	r3, [pc, #284]	; (80042c0 <HAL_RCC_OscConfig+0x280>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d005      	beq.n	80041ba <HAL_RCC_OscConfig+0x17a>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d001      	beq.n	80041ba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e1e9      	b.n	800458e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ba:	4b41      	ldr	r3, [pc, #260]	; (80042c0 <HAL_RCC_OscConfig+0x280>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	00db      	lsls	r3, r3, #3
 80041c8:	493d      	ldr	r1, [pc, #244]	; (80042c0 <HAL_RCC_OscConfig+0x280>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ce:	e040      	b.n	8004252 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d023      	beq.n	8004220 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041d8:	4b39      	ldr	r3, [pc, #228]	; (80042c0 <HAL_RCC_OscConfig+0x280>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a38      	ldr	r2, [pc, #224]	; (80042c0 <HAL_RCC_OscConfig+0x280>)
 80041de:	f043 0301 	orr.w	r3, r3, #1
 80041e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e4:	f7fd faaa 	bl	800173c <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041ec:	f7fd faa6 	bl	800173c <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e1c7      	b.n	800458e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041fe:	4b30      	ldr	r3, [pc, #192]	; (80042c0 <HAL_RCC_OscConfig+0x280>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d0f0      	beq.n	80041ec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800420a:	4b2d      	ldr	r3, [pc, #180]	; (80042c0 <HAL_RCC_OscConfig+0x280>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	00db      	lsls	r3, r3, #3
 8004218:	4929      	ldr	r1, [pc, #164]	; (80042c0 <HAL_RCC_OscConfig+0x280>)
 800421a:	4313      	orrs	r3, r2
 800421c:	600b      	str	r3, [r1, #0]
 800421e:	e018      	b.n	8004252 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004220:	4b27      	ldr	r3, [pc, #156]	; (80042c0 <HAL_RCC_OscConfig+0x280>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a26      	ldr	r2, [pc, #152]	; (80042c0 <HAL_RCC_OscConfig+0x280>)
 8004226:	f023 0301 	bic.w	r3, r3, #1
 800422a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422c:	f7fd fa86 	bl	800173c <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004232:	e008      	b.n	8004246 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004234:	f7fd fa82 	bl	800173c <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	2b02      	cmp	r3, #2
 8004240:	d901      	bls.n	8004246 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004242:	2303      	movs	r3, #3
 8004244:	e1a3      	b.n	800458e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004246:	4b1e      	ldr	r3, [pc, #120]	; (80042c0 <HAL_RCC_OscConfig+0x280>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1f0      	bne.n	8004234 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0308 	and.w	r3, r3, #8
 800425a:	2b00      	cmp	r3, #0
 800425c:	d038      	beq.n	80042d0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d019      	beq.n	800429a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004266:	4b16      	ldr	r3, [pc, #88]	; (80042c0 <HAL_RCC_OscConfig+0x280>)
 8004268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800426a:	4a15      	ldr	r2, [pc, #84]	; (80042c0 <HAL_RCC_OscConfig+0x280>)
 800426c:	f043 0301 	orr.w	r3, r3, #1
 8004270:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004272:	f7fd fa63 	bl	800173c <HAL_GetTick>
 8004276:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004278:	e008      	b.n	800428c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800427a:	f7fd fa5f 	bl	800173c <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	2b02      	cmp	r3, #2
 8004286:	d901      	bls.n	800428c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e180      	b.n	800458e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800428c:	4b0c      	ldr	r3, [pc, #48]	; (80042c0 <HAL_RCC_OscConfig+0x280>)
 800428e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d0f0      	beq.n	800427a <HAL_RCC_OscConfig+0x23a>
 8004298:	e01a      	b.n	80042d0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800429a:	4b09      	ldr	r3, [pc, #36]	; (80042c0 <HAL_RCC_OscConfig+0x280>)
 800429c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800429e:	4a08      	ldr	r2, [pc, #32]	; (80042c0 <HAL_RCC_OscConfig+0x280>)
 80042a0:	f023 0301 	bic.w	r3, r3, #1
 80042a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a6:	f7fd fa49 	bl	800173c <HAL_GetTick>
 80042aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042ac:	e00a      	b.n	80042c4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042ae:	f7fd fa45 	bl	800173c <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d903      	bls.n	80042c4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e166      	b.n	800458e <HAL_RCC_OscConfig+0x54e>
 80042c0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042c4:	4b92      	ldr	r3, [pc, #584]	; (8004510 <HAL_RCC_OscConfig+0x4d0>)
 80042c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1ee      	bne.n	80042ae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0304 	and.w	r3, r3, #4
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 80a4 	beq.w	8004426 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042de:	4b8c      	ldr	r3, [pc, #560]	; (8004510 <HAL_RCC_OscConfig+0x4d0>)
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10d      	bne.n	8004306 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ea:	4b89      	ldr	r3, [pc, #548]	; (8004510 <HAL_RCC_OscConfig+0x4d0>)
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	4a88      	ldr	r2, [pc, #544]	; (8004510 <HAL_RCC_OscConfig+0x4d0>)
 80042f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042f4:	6413      	str	r3, [r2, #64]	; 0x40
 80042f6:	4b86      	ldr	r3, [pc, #536]	; (8004510 <HAL_RCC_OscConfig+0x4d0>)
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042fe:	60bb      	str	r3, [r7, #8]
 8004300:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004302:	2301      	movs	r3, #1
 8004304:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004306:	4b83      	ldr	r3, [pc, #524]	; (8004514 <HAL_RCC_OscConfig+0x4d4>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800430e:	2b00      	cmp	r3, #0
 8004310:	d118      	bne.n	8004344 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004312:	4b80      	ldr	r3, [pc, #512]	; (8004514 <HAL_RCC_OscConfig+0x4d4>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a7f      	ldr	r2, [pc, #508]	; (8004514 <HAL_RCC_OscConfig+0x4d4>)
 8004318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800431c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800431e:	f7fd fa0d 	bl	800173c <HAL_GetTick>
 8004322:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004324:	e008      	b.n	8004338 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004326:	f7fd fa09 	bl	800173c <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b64      	cmp	r3, #100	; 0x64
 8004332:	d901      	bls.n	8004338 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e12a      	b.n	800458e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004338:	4b76      	ldr	r3, [pc, #472]	; (8004514 <HAL_RCC_OscConfig+0x4d4>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004340:	2b00      	cmp	r3, #0
 8004342:	d0f0      	beq.n	8004326 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d106      	bne.n	800435a <HAL_RCC_OscConfig+0x31a>
 800434c:	4b70      	ldr	r3, [pc, #448]	; (8004510 <HAL_RCC_OscConfig+0x4d0>)
 800434e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004350:	4a6f      	ldr	r2, [pc, #444]	; (8004510 <HAL_RCC_OscConfig+0x4d0>)
 8004352:	f043 0301 	orr.w	r3, r3, #1
 8004356:	6713      	str	r3, [r2, #112]	; 0x70
 8004358:	e02d      	b.n	80043b6 <HAL_RCC_OscConfig+0x376>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10c      	bne.n	800437c <HAL_RCC_OscConfig+0x33c>
 8004362:	4b6b      	ldr	r3, [pc, #428]	; (8004510 <HAL_RCC_OscConfig+0x4d0>)
 8004364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004366:	4a6a      	ldr	r2, [pc, #424]	; (8004510 <HAL_RCC_OscConfig+0x4d0>)
 8004368:	f023 0301 	bic.w	r3, r3, #1
 800436c:	6713      	str	r3, [r2, #112]	; 0x70
 800436e:	4b68      	ldr	r3, [pc, #416]	; (8004510 <HAL_RCC_OscConfig+0x4d0>)
 8004370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004372:	4a67      	ldr	r2, [pc, #412]	; (8004510 <HAL_RCC_OscConfig+0x4d0>)
 8004374:	f023 0304 	bic.w	r3, r3, #4
 8004378:	6713      	str	r3, [r2, #112]	; 0x70
 800437a:	e01c      	b.n	80043b6 <HAL_RCC_OscConfig+0x376>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	2b05      	cmp	r3, #5
 8004382:	d10c      	bne.n	800439e <HAL_RCC_OscConfig+0x35e>
 8004384:	4b62      	ldr	r3, [pc, #392]	; (8004510 <HAL_RCC_OscConfig+0x4d0>)
 8004386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004388:	4a61      	ldr	r2, [pc, #388]	; (8004510 <HAL_RCC_OscConfig+0x4d0>)
 800438a:	f043 0304 	orr.w	r3, r3, #4
 800438e:	6713      	str	r3, [r2, #112]	; 0x70
 8004390:	4b5f      	ldr	r3, [pc, #380]	; (8004510 <HAL_RCC_OscConfig+0x4d0>)
 8004392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004394:	4a5e      	ldr	r2, [pc, #376]	; (8004510 <HAL_RCC_OscConfig+0x4d0>)
 8004396:	f043 0301 	orr.w	r3, r3, #1
 800439a:	6713      	str	r3, [r2, #112]	; 0x70
 800439c:	e00b      	b.n	80043b6 <HAL_RCC_OscConfig+0x376>
 800439e:	4b5c      	ldr	r3, [pc, #368]	; (8004510 <HAL_RCC_OscConfig+0x4d0>)
 80043a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a2:	4a5b      	ldr	r2, [pc, #364]	; (8004510 <HAL_RCC_OscConfig+0x4d0>)
 80043a4:	f023 0301 	bic.w	r3, r3, #1
 80043a8:	6713      	str	r3, [r2, #112]	; 0x70
 80043aa:	4b59      	ldr	r3, [pc, #356]	; (8004510 <HAL_RCC_OscConfig+0x4d0>)
 80043ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ae:	4a58      	ldr	r2, [pc, #352]	; (8004510 <HAL_RCC_OscConfig+0x4d0>)
 80043b0:	f023 0304 	bic.w	r3, r3, #4
 80043b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d015      	beq.n	80043ea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043be:	f7fd f9bd 	bl	800173c <HAL_GetTick>
 80043c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043c4:	e00a      	b.n	80043dc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043c6:	f7fd f9b9 	bl	800173c <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d901      	bls.n	80043dc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e0d8      	b.n	800458e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043dc:	4b4c      	ldr	r3, [pc, #304]	; (8004510 <HAL_RCC_OscConfig+0x4d0>)
 80043de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d0ee      	beq.n	80043c6 <HAL_RCC_OscConfig+0x386>
 80043e8:	e014      	b.n	8004414 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ea:	f7fd f9a7 	bl	800173c <HAL_GetTick>
 80043ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043f0:	e00a      	b.n	8004408 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043f2:	f7fd f9a3 	bl	800173c <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004400:	4293      	cmp	r3, r2
 8004402:	d901      	bls.n	8004408 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	e0c2      	b.n	800458e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004408:	4b41      	ldr	r3, [pc, #260]	; (8004510 <HAL_RCC_OscConfig+0x4d0>)
 800440a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440c:	f003 0302 	and.w	r3, r3, #2
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1ee      	bne.n	80043f2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004414:	7dfb      	ldrb	r3, [r7, #23]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d105      	bne.n	8004426 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800441a:	4b3d      	ldr	r3, [pc, #244]	; (8004510 <HAL_RCC_OscConfig+0x4d0>)
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	4a3c      	ldr	r2, [pc, #240]	; (8004510 <HAL_RCC_OscConfig+0x4d0>)
 8004420:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004424:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	2b00      	cmp	r3, #0
 800442c:	f000 80ae 	beq.w	800458c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004430:	4b37      	ldr	r3, [pc, #220]	; (8004510 <HAL_RCC_OscConfig+0x4d0>)
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f003 030c 	and.w	r3, r3, #12
 8004438:	2b08      	cmp	r3, #8
 800443a:	d06d      	beq.n	8004518 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	2b02      	cmp	r3, #2
 8004442:	d14b      	bne.n	80044dc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004444:	4b32      	ldr	r3, [pc, #200]	; (8004510 <HAL_RCC_OscConfig+0x4d0>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a31      	ldr	r2, [pc, #196]	; (8004510 <HAL_RCC_OscConfig+0x4d0>)
 800444a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800444e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004450:	f7fd f974 	bl	800173c <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004458:	f7fd f970 	bl	800173c <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e091      	b.n	800458e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800446a:	4b29      	ldr	r3, [pc, #164]	; (8004510 <HAL_RCC_OscConfig+0x4d0>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1f0      	bne.n	8004458 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	69da      	ldr	r2, [r3, #28]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	431a      	orrs	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004484:	019b      	lsls	r3, r3, #6
 8004486:	431a      	orrs	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448c:	085b      	lsrs	r3, r3, #1
 800448e:	3b01      	subs	r3, #1
 8004490:	041b      	lsls	r3, r3, #16
 8004492:	431a      	orrs	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004498:	061b      	lsls	r3, r3, #24
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a0:	071b      	lsls	r3, r3, #28
 80044a2:	491b      	ldr	r1, [pc, #108]	; (8004510 <HAL_RCC_OscConfig+0x4d0>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044a8:	4b19      	ldr	r3, [pc, #100]	; (8004510 <HAL_RCC_OscConfig+0x4d0>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a18      	ldr	r2, [pc, #96]	; (8004510 <HAL_RCC_OscConfig+0x4d0>)
 80044ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b4:	f7fd f942 	bl	800173c <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ba:	e008      	b.n	80044ce <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044bc:	f7fd f93e 	bl	800173c <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e05f      	b.n	800458e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ce:	4b10      	ldr	r3, [pc, #64]	; (8004510 <HAL_RCC_OscConfig+0x4d0>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0f0      	beq.n	80044bc <HAL_RCC_OscConfig+0x47c>
 80044da:	e057      	b.n	800458c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044dc:	4b0c      	ldr	r3, [pc, #48]	; (8004510 <HAL_RCC_OscConfig+0x4d0>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a0b      	ldr	r2, [pc, #44]	; (8004510 <HAL_RCC_OscConfig+0x4d0>)
 80044e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e8:	f7fd f928 	bl	800173c <HAL_GetTick>
 80044ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ee:	e008      	b.n	8004502 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044f0:	f7fd f924 	bl	800173c <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e045      	b.n	800458e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004502:	4b03      	ldr	r3, [pc, #12]	; (8004510 <HAL_RCC_OscConfig+0x4d0>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1f0      	bne.n	80044f0 <HAL_RCC_OscConfig+0x4b0>
 800450e:	e03d      	b.n	800458c <HAL_RCC_OscConfig+0x54c>
 8004510:	40023800 	.word	0x40023800
 8004514:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004518:	4b1f      	ldr	r3, [pc, #124]	; (8004598 <HAL_RCC_OscConfig+0x558>)
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d030      	beq.n	8004588 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004530:	429a      	cmp	r2, r3
 8004532:	d129      	bne.n	8004588 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800453e:	429a      	cmp	r2, r3
 8004540:	d122      	bne.n	8004588 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004548:	4013      	ands	r3, r2
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800454e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004550:	4293      	cmp	r3, r2
 8004552:	d119      	bne.n	8004588 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455e:	085b      	lsrs	r3, r3, #1
 8004560:	3b01      	subs	r3, #1
 8004562:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004564:	429a      	cmp	r2, r3
 8004566:	d10f      	bne.n	8004588 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004572:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004574:	429a      	cmp	r2, r3
 8004576:	d107      	bne.n	8004588 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004582:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004584:	429a      	cmp	r2, r3
 8004586:	d001      	beq.n	800458c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e000      	b.n	800458e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3718      	adds	r7, #24
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	40023800 	.word	0x40023800

0800459c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80045a6:	2300      	movs	r3, #0
 80045a8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d101      	bne.n	80045b4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e0d0      	b.n	8004756 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045b4:	4b6a      	ldr	r3, [pc, #424]	; (8004760 <HAL_RCC_ClockConfig+0x1c4>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 030f 	and.w	r3, r3, #15
 80045bc:	683a      	ldr	r2, [r7, #0]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d910      	bls.n	80045e4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045c2:	4b67      	ldr	r3, [pc, #412]	; (8004760 <HAL_RCC_ClockConfig+0x1c4>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f023 020f 	bic.w	r2, r3, #15
 80045ca:	4965      	ldr	r1, [pc, #404]	; (8004760 <HAL_RCC_ClockConfig+0x1c4>)
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045d2:	4b63      	ldr	r3, [pc, #396]	; (8004760 <HAL_RCC_ClockConfig+0x1c4>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 030f 	and.w	r3, r3, #15
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d001      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e0b8      	b.n	8004756 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d020      	beq.n	8004632 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0304 	and.w	r3, r3, #4
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d005      	beq.n	8004608 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045fc:	4b59      	ldr	r3, [pc, #356]	; (8004764 <HAL_RCC_ClockConfig+0x1c8>)
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	4a58      	ldr	r2, [pc, #352]	; (8004764 <HAL_RCC_ClockConfig+0x1c8>)
 8004602:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004606:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0308 	and.w	r3, r3, #8
 8004610:	2b00      	cmp	r3, #0
 8004612:	d005      	beq.n	8004620 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004614:	4b53      	ldr	r3, [pc, #332]	; (8004764 <HAL_RCC_ClockConfig+0x1c8>)
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	4a52      	ldr	r2, [pc, #328]	; (8004764 <HAL_RCC_ClockConfig+0x1c8>)
 800461a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800461e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004620:	4b50      	ldr	r3, [pc, #320]	; (8004764 <HAL_RCC_ClockConfig+0x1c8>)
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	494d      	ldr	r1, [pc, #308]	; (8004764 <HAL_RCC_ClockConfig+0x1c8>)
 800462e:	4313      	orrs	r3, r2
 8004630:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d040      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d107      	bne.n	8004656 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004646:	4b47      	ldr	r3, [pc, #284]	; (8004764 <HAL_RCC_ClockConfig+0x1c8>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d115      	bne.n	800467e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e07f      	b.n	8004756 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	2b02      	cmp	r3, #2
 800465c:	d107      	bne.n	800466e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800465e:	4b41      	ldr	r3, [pc, #260]	; (8004764 <HAL_RCC_ClockConfig+0x1c8>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d109      	bne.n	800467e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e073      	b.n	8004756 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800466e:	4b3d      	ldr	r3, [pc, #244]	; (8004764 <HAL_RCC_ClockConfig+0x1c8>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e06b      	b.n	8004756 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800467e:	4b39      	ldr	r3, [pc, #228]	; (8004764 <HAL_RCC_ClockConfig+0x1c8>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f023 0203 	bic.w	r2, r3, #3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	4936      	ldr	r1, [pc, #216]	; (8004764 <HAL_RCC_ClockConfig+0x1c8>)
 800468c:	4313      	orrs	r3, r2
 800468e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004690:	f7fd f854 	bl	800173c <HAL_GetTick>
 8004694:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004696:	e00a      	b.n	80046ae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004698:	f7fd f850 	bl	800173c <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e053      	b.n	8004756 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ae:	4b2d      	ldr	r3, [pc, #180]	; (8004764 <HAL_RCC_ClockConfig+0x1c8>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f003 020c 	and.w	r2, r3, #12
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	429a      	cmp	r2, r3
 80046be:	d1eb      	bne.n	8004698 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046c0:	4b27      	ldr	r3, [pc, #156]	; (8004760 <HAL_RCC_ClockConfig+0x1c4>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 030f 	and.w	r3, r3, #15
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d210      	bcs.n	80046f0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ce:	4b24      	ldr	r3, [pc, #144]	; (8004760 <HAL_RCC_ClockConfig+0x1c4>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f023 020f 	bic.w	r2, r3, #15
 80046d6:	4922      	ldr	r1, [pc, #136]	; (8004760 <HAL_RCC_ClockConfig+0x1c4>)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	4313      	orrs	r3, r2
 80046dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046de:	4b20      	ldr	r3, [pc, #128]	; (8004760 <HAL_RCC_ClockConfig+0x1c4>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 030f 	and.w	r3, r3, #15
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d001      	beq.n	80046f0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e032      	b.n	8004756 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d008      	beq.n	800470e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046fc:	4b19      	ldr	r3, [pc, #100]	; (8004764 <HAL_RCC_ClockConfig+0x1c8>)
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	4916      	ldr	r1, [pc, #88]	; (8004764 <HAL_RCC_ClockConfig+0x1c8>)
 800470a:	4313      	orrs	r3, r2
 800470c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0308 	and.w	r3, r3, #8
 8004716:	2b00      	cmp	r3, #0
 8004718:	d009      	beq.n	800472e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800471a:	4b12      	ldr	r3, [pc, #72]	; (8004764 <HAL_RCC_ClockConfig+0x1c8>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	00db      	lsls	r3, r3, #3
 8004728:	490e      	ldr	r1, [pc, #56]	; (8004764 <HAL_RCC_ClockConfig+0x1c8>)
 800472a:	4313      	orrs	r3, r2
 800472c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800472e:	f000 f821 	bl	8004774 <HAL_RCC_GetSysClockFreq>
 8004732:	4602      	mov	r2, r0
 8004734:	4b0b      	ldr	r3, [pc, #44]	; (8004764 <HAL_RCC_ClockConfig+0x1c8>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	091b      	lsrs	r3, r3, #4
 800473a:	f003 030f 	and.w	r3, r3, #15
 800473e:	490a      	ldr	r1, [pc, #40]	; (8004768 <HAL_RCC_ClockConfig+0x1cc>)
 8004740:	5ccb      	ldrb	r3, [r1, r3]
 8004742:	fa22 f303 	lsr.w	r3, r2, r3
 8004746:	4a09      	ldr	r2, [pc, #36]	; (800476c <HAL_RCC_ClockConfig+0x1d0>)
 8004748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800474a:	4b09      	ldr	r3, [pc, #36]	; (8004770 <HAL_RCC_ClockConfig+0x1d4>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4618      	mov	r0, r3
 8004750:	f7fc ffb0 	bl	80016b4 <HAL_InitTick>

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	40023c00 	.word	0x40023c00
 8004764:	40023800 	.word	0x40023800
 8004768:	080085a4 	.word	0x080085a4
 800476c:	20000010 	.word	0x20000010
 8004770:	20000014 	.word	0x20000014

08004774 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004774:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004778:	b084      	sub	sp, #16
 800477a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800477c:	2300      	movs	r3, #0
 800477e:	607b      	str	r3, [r7, #4]
 8004780:	2300      	movs	r3, #0
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	2300      	movs	r3, #0
 8004786:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004788:	2300      	movs	r3, #0
 800478a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800478c:	4b67      	ldr	r3, [pc, #412]	; (800492c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f003 030c 	and.w	r3, r3, #12
 8004794:	2b08      	cmp	r3, #8
 8004796:	d00d      	beq.n	80047b4 <HAL_RCC_GetSysClockFreq+0x40>
 8004798:	2b08      	cmp	r3, #8
 800479a:	f200 80bd 	bhi.w	8004918 <HAL_RCC_GetSysClockFreq+0x1a4>
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d002      	beq.n	80047a8 <HAL_RCC_GetSysClockFreq+0x34>
 80047a2:	2b04      	cmp	r3, #4
 80047a4:	d003      	beq.n	80047ae <HAL_RCC_GetSysClockFreq+0x3a>
 80047a6:	e0b7      	b.n	8004918 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047a8:	4b61      	ldr	r3, [pc, #388]	; (8004930 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80047aa:	60bb      	str	r3, [r7, #8]
      break;
 80047ac:	e0b7      	b.n	800491e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047ae:	4b61      	ldr	r3, [pc, #388]	; (8004934 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80047b0:	60bb      	str	r3, [r7, #8]
      break;
 80047b2:	e0b4      	b.n	800491e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047b4:	4b5d      	ldr	r3, [pc, #372]	; (800492c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047bc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80047be:	4b5b      	ldr	r3, [pc, #364]	; (800492c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d04d      	beq.n	8004866 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047ca:	4b58      	ldr	r3, [pc, #352]	; (800492c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	099b      	lsrs	r3, r3, #6
 80047d0:	461a      	mov	r2, r3
 80047d2:	f04f 0300 	mov.w	r3, #0
 80047d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80047da:	f04f 0100 	mov.w	r1, #0
 80047de:	ea02 0800 	and.w	r8, r2, r0
 80047e2:	ea03 0901 	and.w	r9, r3, r1
 80047e6:	4640      	mov	r0, r8
 80047e8:	4649      	mov	r1, r9
 80047ea:	f04f 0200 	mov.w	r2, #0
 80047ee:	f04f 0300 	mov.w	r3, #0
 80047f2:	014b      	lsls	r3, r1, #5
 80047f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80047f8:	0142      	lsls	r2, r0, #5
 80047fa:	4610      	mov	r0, r2
 80047fc:	4619      	mov	r1, r3
 80047fe:	ebb0 0008 	subs.w	r0, r0, r8
 8004802:	eb61 0109 	sbc.w	r1, r1, r9
 8004806:	f04f 0200 	mov.w	r2, #0
 800480a:	f04f 0300 	mov.w	r3, #0
 800480e:	018b      	lsls	r3, r1, #6
 8004810:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004814:	0182      	lsls	r2, r0, #6
 8004816:	1a12      	subs	r2, r2, r0
 8004818:	eb63 0301 	sbc.w	r3, r3, r1
 800481c:	f04f 0000 	mov.w	r0, #0
 8004820:	f04f 0100 	mov.w	r1, #0
 8004824:	00d9      	lsls	r1, r3, #3
 8004826:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800482a:	00d0      	lsls	r0, r2, #3
 800482c:	4602      	mov	r2, r0
 800482e:	460b      	mov	r3, r1
 8004830:	eb12 0208 	adds.w	r2, r2, r8
 8004834:	eb43 0309 	adc.w	r3, r3, r9
 8004838:	f04f 0000 	mov.w	r0, #0
 800483c:	f04f 0100 	mov.w	r1, #0
 8004840:	0259      	lsls	r1, r3, #9
 8004842:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004846:	0250      	lsls	r0, r2, #9
 8004848:	4602      	mov	r2, r0
 800484a:	460b      	mov	r3, r1
 800484c:	4610      	mov	r0, r2
 800484e:	4619      	mov	r1, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	461a      	mov	r2, r3
 8004854:	f04f 0300 	mov.w	r3, #0
 8004858:	f7fb fd42 	bl	80002e0 <__aeabi_uldivmod>
 800485c:	4602      	mov	r2, r0
 800485e:	460b      	mov	r3, r1
 8004860:	4613      	mov	r3, r2
 8004862:	60fb      	str	r3, [r7, #12]
 8004864:	e04a      	b.n	80048fc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004866:	4b31      	ldr	r3, [pc, #196]	; (800492c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	099b      	lsrs	r3, r3, #6
 800486c:	461a      	mov	r2, r3
 800486e:	f04f 0300 	mov.w	r3, #0
 8004872:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004876:	f04f 0100 	mov.w	r1, #0
 800487a:	ea02 0400 	and.w	r4, r2, r0
 800487e:	ea03 0501 	and.w	r5, r3, r1
 8004882:	4620      	mov	r0, r4
 8004884:	4629      	mov	r1, r5
 8004886:	f04f 0200 	mov.w	r2, #0
 800488a:	f04f 0300 	mov.w	r3, #0
 800488e:	014b      	lsls	r3, r1, #5
 8004890:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004894:	0142      	lsls	r2, r0, #5
 8004896:	4610      	mov	r0, r2
 8004898:	4619      	mov	r1, r3
 800489a:	1b00      	subs	r0, r0, r4
 800489c:	eb61 0105 	sbc.w	r1, r1, r5
 80048a0:	f04f 0200 	mov.w	r2, #0
 80048a4:	f04f 0300 	mov.w	r3, #0
 80048a8:	018b      	lsls	r3, r1, #6
 80048aa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80048ae:	0182      	lsls	r2, r0, #6
 80048b0:	1a12      	subs	r2, r2, r0
 80048b2:	eb63 0301 	sbc.w	r3, r3, r1
 80048b6:	f04f 0000 	mov.w	r0, #0
 80048ba:	f04f 0100 	mov.w	r1, #0
 80048be:	00d9      	lsls	r1, r3, #3
 80048c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048c4:	00d0      	lsls	r0, r2, #3
 80048c6:	4602      	mov	r2, r0
 80048c8:	460b      	mov	r3, r1
 80048ca:	1912      	adds	r2, r2, r4
 80048cc:	eb45 0303 	adc.w	r3, r5, r3
 80048d0:	f04f 0000 	mov.w	r0, #0
 80048d4:	f04f 0100 	mov.w	r1, #0
 80048d8:	0299      	lsls	r1, r3, #10
 80048da:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80048de:	0290      	lsls	r0, r2, #10
 80048e0:	4602      	mov	r2, r0
 80048e2:	460b      	mov	r3, r1
 80048e4:	4610      	mov	r0, r2
 80048e6:	4619      	mov	r1, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	461a      	mov	r2, r3
 80048ec:	f04f 0300 	mov.w	r3, #0
 80048f0:	f7fb fcf6 	bl	80002e0 <__aeabi_uldivmod>
 80048f4:	4602      	mov	r2, r0
 80048f6:	460b      	mov	r3, r1
 80048f8:	4613      	mov	r3, r2
 80048fa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80048fc:	4b0b      	ldr	r3, [pc, #44]	; (800492c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	0c1b      	lsrs	r3, r3, #16
 8004902:	f003 0303 	and.w	r3, r3, #3
 8004906:	3301      	adds	r3, #1
 8004908:	005b      	lsls	r3, r3, #1
 800490a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	fbb2 f3f3 	udiv	r3, r2, r3
 8004914:	60bb      	str	r3, [r7, #8]
      break;
 8004916:	e002      	b.n	800491e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004918:	4b05      	ldr	r3, [pc, #20]	; (8004930 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800491a:	60bb      	str	r3, [r7, #8]
      break;
 800491c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800491e:	68bb      	ldr	r3, [r7, #8]
}
 8004920:	4618      	mov	r0, r3
 8004922:	3710      	adds	r7, #16
 8004924:	46bd      	mov	sp, r7
 8004926:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800492a:	bf00      	nop
 800492c:	40023800 	.word	0x40023800
 8004930:	00f42400 	.word	0x00f42400
 8004934:	007a1200 	.word	0x007a1200

08004938 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004938:	b480      	push	{r7}
 800493a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800493c:	4b03      	ldr	r3, [pc, #12]	; (800494c <HAL_RCC_GetHCLKFreq+0x14>)
 800493e:	681b      	ldr	r3, [r3, #0]
}
 8004940:	4618      	mov	r0, r3
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	20000010 	.word	0x20000010

08004950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004954:	f7ff fff0 	bl	8004938 <HAL_RCC_GetHCLKFreq>
 8004958:	4602      	mov	r2, r0
 800495a:	4b05      	ldr	r3, [pc, #20]	; (8004970 <HAL_RCC_GetPCLK1Freq+0x20>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	0a9b      	lsrs	r3, r3, #10
 8004960:	f003 0307 	and.w	r3, r3, #7
 8004964:	4903      	ldr	r1, [pc, #12]	; (8004974 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004966:	5ccb      	ldrb	r3, [r1, r3]
 8004968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800496c:	4618      	mov	r0, r3
 800496e:	bd80      	pop	{r7, pc}
 8004970:	40023800 	.word	0x40023800
 8004974:	080085b4 	.word	0x080085b4

08004978 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800497c:	f7ff ffdc 	bl	8004938 <HAL_RCC_GetHCLKFreq>
 8004980:	4602      	mov	r2, r0
 8004982:	4b05      	ldr	r3, [pc, #20]	; (8004998 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	0b5b      	lsrs	r3, r3, #13
 8004988:	f003 0307 	and.w	r3, r3, #7
 800498c:	4903      	ldr	r1, [pc, #12]	; (800499c <HAL_RCC_GetPCLK2Freq+0x24>)
 800498e:	5ccb      	ldrb	r3, [r1, r3]
 8004990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004994:	4618      	mov	r0, r3
 8004996:	bd80      	pop	{r7, pc}
 8004998:	40023800 	.word	0x40023800
 800499c:	080085b4 	.word	0x080085b4

080049a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b088      	sub	sp, #32
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80049a8:	2300      	movs	r3, #0
 80049aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80049ac:	2300      	movs	r3, #0
 80049ae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80049b0:	2300      	movs	r3, #0
 80049b2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80049b4:	2300      	movs	r3, #0
 80049b6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80049b8:	2300      	movs	r3, #0
 80049ba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d012      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80049c8:	4b69      	ldr	r3, [pc, #420]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	4a68      	ldr	r2, [pc, #416]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ce:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80049d2:	6093      	str	r3, [r2, #8]
 80049d4:	4b66      	ldr	r3, [pc, #408]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049d6:	689a      	ldr	r2, [r3, #8]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049dc:	4964      	ldr	r1, [pc, #400]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80049ea:	2301      	movs	r3, #1
 80049ec:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d017      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049fa:	4b5d      	ldr	r3, [pc, #372]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a08:	4959      	ldr	r1, [pc, #356]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a18:	d101      	bne.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004a26:	2301      	movs	r3, #1
 8004a28:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d017      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a36:	4b4e      	ldr	r3, [pc, #312]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a3c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a44:	494a      	ldr	r1, [pc, #296]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a54:	d101      	bne.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004a56:	2301      	movs	r3, #1
 8004a58:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d101      	bne.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004a62:	2301      	movs	r3, #1
 8004a64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004a72:	2301      	movs	r3, #1
 8004a74:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0320 	and.w	r3, r3, #32
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f000 808b 	beq.w	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a84:	4b3a      	ldr	r3, [pc, #232]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a88:	4a39      	ldr	r2, [pc, #228]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a8e:	6413      	str	r3, [r2, #64]	; 0x40
 8004a90:	4b37      	ldr	r3, [pc, #220]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a98:	60bb      	str	r3, [r7, #8]
 8004a9a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a9c:	4b35      	ldr	r3, [pc, #212]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a34      	ldr	r2, [pc, #208]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aa6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aa8:	f7fc fe48 	bl	800173c <HAL_GetTick>
 8004aac:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004aae:	e008      	b.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ab0:	f7fc fe44 	bl	800173c <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b64      	cmp	r3, #100	; 0x64
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e38f      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004ac2:	4b2c      	ldr	r3, [pc, #176]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d0f0      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ace:	4b28      	ldr	r3, [pc, #160]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ad6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d035      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d02e      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004aec:	4b20      	ldr	r3, [pc, #128]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004af4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004af6:	4b1e      	ldr	r3, [pc, #120]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afa:	4a1d      	ldr	r2, [pc, #116]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004afc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b00:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004b02:	4b1b      	ldr	r3, [pc, #108]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b06:	4a1a      	ldr	r2, [pc, #104]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b0c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004b0e:	4a18      	ldr	r2, [pc, #96]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004b14:	4b16      	ldr	r3, [pc, #88]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d114      	bne.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b20:	f7fc fe0c 	bl	800173c <HAL_GetTick>
 8004b24:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b26:	e00a      	b.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b28:	f7fc fe08 	bl	800173c <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e351      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b3e:	4b0c      	ldr	r3, [pc, #48]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d0ee      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b56:	d111      	bne.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004b58:	4b05      	ldr	r3, [pc, #20]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b64:	4b04      	ldr	r3, [pc, #16]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004b66:	400b      	ands	r3, r1
 8004b68:	4901      	ldr	r1, [pc, #4]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	608b      	str	r3, [r1, #8]
 8004b6e:	e00b      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004b70:	40023800 	.word	0x40023800
 8004b74:	40007000 	.word	0x40007000
 8004b78:	0ffffcff 	.word	0x0ffffcff
 8004b7c:	4bb3      	ldr	r3, [pc, #716]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	4ab2      	ldr	r2, [pc, #712]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b82:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b86:	6093      	str	r3, [r2, #8]
 8004b88:	4bb0      	ldr	r3, [pc, #704]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b94:	49ad      	ldr	r1, [pc, #692]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0310 	and.w	r3, r3, #16
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d010      	beq.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ba6:	4ba9      	ldr	r3, [pc, #676]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bac:	4aa7      	ldr	r2, [pc, #668]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004bae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bb2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004bb6:	4ba5      	ldr	r3, [pc, #660]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004bb8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc0:	49a2      	ldr	r1, [pc, #648]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d00a      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bd4:	4b9d      	ldr	r3, [pc, #628]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bda:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004be2:	499a      	ldr	r1, [pc, #616]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00a      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bf6:	4b95      	ldr	r3, [pc, #596]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bfc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c04:	4991      	ldr	r1, [pc, #580]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d00a      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004c18:	4b8c      	ldr	r3, [pc, #560]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c26:	4989      	ldr	r1, [pc, #548]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00a      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c3a:	4b84      	ldr	r3, [pc, #528]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c40:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c48:	4980      	ldr	r1, [pc, #512]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00a      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c5c:	4b7b      	ldr	r3, [pc, #492]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c62:	f023 0203 	bic.w	r2, r3, #3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c6a:	4978      	ldr	r1, [pc, #480]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00a      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c7e:	4b73      	ldr	r3, [pc, #460]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c84:	f023 020c 	bic.w	r2, r3, #12
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c8c:	496f      	ldr	r1, [pc, #444]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00a      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ca0:	4b6a      	ldr	r3, [pc, #424]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cae:	4967      	ldr	r1, [pc, #412]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00a      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004cc2:	4b62      	ldr	r3, [pc, #392]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cd0:	495e      	ldr	r1, [pc, #376]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00a      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ce4:	4b59      	ldr	r3, [pc, #356]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf2:	4956      	ldr	r1, [pc, #344]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00a      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004d06:	4b51      	ldr	r3, [pc, #324]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d14:	494d      	ldr	r1, [pc, #308]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00a      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004d28:	4b48      	ldr	r3, [pc, #288]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d2e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d36:	4945      	ldr	r1, [pc, #276]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00a      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004d4a:	4b40      	ldr	r3, [pc, #256]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d50:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d58:	493c      	ldr	r1, [pc, #240]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00a      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d6c:	4b37      	ldr	r3, [pc, #220]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d72:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d7a:	4934      	ldr	r1, [pc, #208]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d011      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004d8e:	4b2f      	ldr	r3, [pc, #188]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d94:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d9c:	492b      	ldr	r1, [pc, #172]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004da8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dac:	d101      	bne.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004dae:	2301      	movs	r3, #1
 8004db0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0308 	and.w	r3, r3, #8
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d001      	beq.n	8004dc2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00a      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004dce:	4b1f      	ldr	r3, [pc, #124]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ddc:	491b      	ldr	r1, [pc, #108]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00b      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004df0:	4b16      	ldr	r3, [pc, #88]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e00:	4912      	ldr	r1, [pc, #72]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00b      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004e14:	4b0d      	ldr	r3, [pc, #52]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e1a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e24:	4909      	ldr	r1, [pc, #36]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00f      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e38:	4b04      	ldr	r3, [pc, #16]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e3e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e48:	e002      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004e4a:	bf00      	nop
 8004e4c:	40023800 	.word	0x40023800
 8004e50:	4986      	ldr	r1, [pc, #536]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00b      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004e64:	4b81      	ldr	r3, [pc, #516]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e6a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e74:	497d      	ldr	r1, [pc, #500]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d006      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f000 80d6 	beq.w	800503c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e90:	4b76      	ldr	r3, [pc, #472]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a75      	ldr	r2, [pc, #468]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e96:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e9c:	f7fc fc4e 	bl	800173c <HAL_GetTick>
 8004ea0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ea2:	e008      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ea4:	f7fc fc4a 	bl	800173c <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b64      	cmp	r3, #100	; 0x64
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e195      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004eb6:	4b6d      	ldr	r3, [pc, #436]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1f0      	bne.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d021      	beq.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d11d      	bne.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004ed6:	4b65      	ldr	r3, [pc, #404]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004edc:	0c1b      	lsrs	r3, r3, #16
 8004ede:	f003 0303 	and.w	r3, r3, #3
 8004ee2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ee4:	4b61      	ldr	r3, [pc, #388]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eea:	0e1b      	lsrs	r3, r3, #24
 8004eec:	f003 030f 	and.w	r3, r3, #15
 8004ef0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	019a      	lsls	r2, r3, #6
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	041b      	lsls	r3, r3, #16
 8004efc:	431a      	orrs	r2, r3
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	061b      	lsls	r3, r3, #24
 8004f02:	431a      	orrs	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	071b      	lsls	r3, r3, #28
 8004f0a:	4958      	ldr	r1, [pc, #352]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d004      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f26:	d00a      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d02e      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f3c:	d129      	bne.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004f3e:	4b4b      	ldr	r3, [pc, #300]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f44:	0c1b      	lsrs	r3, r3, #16
 8004f46:	f003 0303 	and.w	r3, r3, #3
 8004f4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f4c:	4b47      	ldr	r3, [pc, #284]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f52:	0f1b      	lsrs	r3, r3, #28
 8004f54:	f003 0307 	and.w	r3, r3, #7
 8004f58:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	019a      	lsls	r2, r3, #6
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	041b      	lsls	r3, r3, #16
 8004f64:	431a      	orrs	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	061b      	lsls	r3, r3, #24
 8004f6c:	431a      	orrs	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	071b      	lsls	r3, r3, #28
 8004f72:	493e      	ldr	r1, [pc, #248]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004f7a:	4b3c      	ldr	r3, [pc, #240]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f80:	f023 021f 	bic.w	r2, r3, #31
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	4938      	ldr	r1, [pc, #224]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d01d      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f9e:	4b33      	ldr	r3, [pc, #204]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fa4:	0e1b      	lsrs	r3, r3, #24
 8004fa6:	f003 030f 	and.w	r3, r3, #15
 8004faa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004fac:	4b2f      	ldr	r3, [pc, #188]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fb2:	0f1b      	lsrs	r3, r3, #28
 8004fb4:	f003 0307 	and.w	r3, r3, #7
 8004fb8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	019a      	lsls	r2, r3, #6
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	041b      	lsls	r3, r3, #16
 8004fc6:	431a      	orrs	r2, r3
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	061b      	lsls	r3, r3, #24
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	071b      	lsls	r3, r3, #28
 8004fd2:	4926      	ldr	r1, [pc, #152]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d011      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	019a      	lsls	r2, r3, #6
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	041b      	lsls	r3, r3, #16
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	061b      	lsls	r3, r3, #24
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	071b      	lsls	r3, r3, #28
 8005002:	491a      	ldr	r1, [pc, #104]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005004:	4313      	orrs	r3, r2
 8005006:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800500a:	4b18      	ldr	r3, [pc, #96]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a17      	ldr	r2, [pc, #92]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005010:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005014:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005016:	f7fc fb91 	bl	800173c <HAL_GetTick>
 800501a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800501c:	e008      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800501e:	f7fc fb8d 	bl	800173c <HAL_GetTick>
 8005022:	4602      	mov	r2, r0
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	1ad3      	subs	r3, r2, r3
 8005028:	2b64      	cmp	r3, #100	; 0x64
 800502a:	d901      	bls.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e0d8      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005030:	4b0e      	ldr	r3, [pc, #56]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d0f0      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	2b01      	cmp	r3, #1
 8005040:	f040 80ce 	bne.w	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005044:	4b09      	ldr	r3, [pc, #36]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a08      	ldr	r2, [pc, #32]	; (800506c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800504a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800504e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005050:	f7fc fb74 	bl	800173c <HAL_GetTick>
 8005054:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005056:	e00b      	b.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005058:	f7fc fb70 	bl	800173c <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b64      	cmp	r3, #100	; 0x64
 8005064:	d904      	bls.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e0bb      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800506a:	bf00      	nop
 800506c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005070:	4b5e      	ldr	r3, [pc, #376]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005078:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800507c:	d0ec      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800508e:	2b00      	cmp	r3, #0
 8005090:	d009      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800509a:	2b00      	cmp	r3, #0
 800509c:	d02e      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d12a      	bne.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80050a6:	4b51      	ldr	r3, [pc, #324]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ac:	0c1b      	lsrs	r3, r3, #16
 80050ae:	f003 0303 	and.w	r3, r3, #3
 80050b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80050b4:	4b4d      	ldr	r3, [pc, #308]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ba:	0f1b      	lsrs	r3, r3, #28
 80050bc:	f003 0307 	and.w	r3, r3, #7
 80050c0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	019a      	lsls	r2, r3, #6
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	041b      	lsls	r3, r3, #16
 80050cc:	431a      	orrs	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	061b      	lsls	r3, r3, #24
 80050d4:	431a      	orrs	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	071b      	lsls	r3, r3, #28
 80050da:	4944      	ldr	r1, [pc, #272]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050dc:	4313      	orrs	r3, r2
 80050de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80050e2:	4b42      	ldr	r3, [pc, #264]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050e8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f0:	3b01      	subs	r3, #1
 80050f2:	021b      	lsls	r3, r3, #8
 80050f4:	493d      	ldr	r1, [pc, #244]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d022      	beq.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800510c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005110:	d11d      	bne.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005112:	4b36      	ldr	r3, [pc, #216]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005118:	0e1b      	lsrs	r3, r3, #24
 800511a:	f003 030f 	and.w	r3, r3, #15
 800511e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005120:	4b32      	ldr	r3, [pc, #200]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005126:	0f1b      	lsrs	r3, r3, #28
 8005128:	f003 0307 	and.w	r3, r3, #7
 800512c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	019a      	lsls	r2, r3, #6
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	041b      	lsls	r3, r3, #16
 800513a:	431a      	orrs	r2, r3
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	061b      	lsls	r3, r3, #24
 8005140:	431a      	orrs	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	071b      	lsls	r3, r3, #28
 8005146:	4929      	ldr	r1, [pc, #164]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005148:	4313      	orrs	r3, r2
 800514a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0308 	and.w	r3, r3, #8
 8005156:	2b00      	cmp	r3, #0
 8005158:	d028      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800515a:	4b24      	ldr	r3, [pc, #144]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800515c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005160:	0e1b      	lsrs	r3, r3, #24
 8005162:	f003 030f 	and.w	r3, r3, #15
 8005166:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005168:	4b20      	ldr	r3, [pc, #128]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800516a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800516e:	0c1b      	lsrs	r3, r3, #16
 8005170:	f003 0303 	and.w	r3, r3, #3
 8005174:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	019a      	lsls	r2, r3, #6
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	041b      	lsls	r3, r3, #16
 8005180:	431a      	orrs	r2, r3
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	061b      	lsls	r3, r3, #24
 8005186:	431a      	orrs	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	69db      	ldr	r3, [r3, #28]
 800518c:	071b      	lsls	r3, r3, #28
 800518e:	4917      	ldr	r1, [pc, #92]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005190:	4313      	orrs	r3, r2
 8005192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005196:	4b15      	ldr	r3, [pc, #84]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005198:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800519c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a4:	4911      	ldr	r1, [pc, #68]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80051ac:	4b0f      	ldr	r3, [pc, #60]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a0e      	ldr	r2, [pc, #56]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051b8:	f7fc fac0 	bl	800173c <HAL_GetTick>
 80051bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051be:	e008      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80051c0:	f7fc fabc 	bl	800173c <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b64      	cmp	r3, #100	; 0x64
 80051cc:	d901      	bls.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e007      	b.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80051d2:	4b06      	ldr	r3, [pc, #24]	; (80051ec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051de:	d1ef      	bne.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3720      	adds	r7, #32
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	40023800 	.word	0x40023800

080051f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e049      	b.n	8005296 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d106      	bne.n	800521c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f7fc f884 	bl	8001324 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2202      	movs	r2, #2
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	3304      	adds	r3, #4
 800522c:	4619      	mov	r1, r3
 800522e:	4610      	mov	r0, r2
 8005230:	f000 fd28 	bl	8005c84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3708      	adds	r7, #8
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}
	...

080052a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d001      	beq.n	80052b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e054      	b.n	8005362 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2202      	movs	r2, #2
 80052bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68da      	ldr	r2, [r3, #12]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f042 0201 	orr.w	r2, r2, #1
 80052ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a26      	ldr	r2, [pc, #152]	; (8005370 <HAL_TIM_Base_Start_IT+0xd0>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d022      	beq.n	8005320 <HAL_TIM_Base_Start_IT+0x80>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052e2:	d01d      	beq.n	8005320 <HAL_TIM_Base_Start_IT+0x80>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a22      	ldr	r2, [pc, #136]	; (8005374 <HAL_TIM_Base_Start_IT+0xd4>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d018      	beq.n	8005320 <HAL_TIM_Base_Start_IT+0x80>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a21      	ldr	r2, [pc, #132]	; (8005378 <HAL_TIM_Base_Start_IT+0xd8>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d013      	beq.n	8005320 <HAL_TIM_Base_Start_IT+0x80>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a1f      	ldr	r2, [pc, #124]	; (800537c <HAL_TIM_Base_Start_IT+0xdc>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d00e      	beq.n	8005320 <HAL_TIM_Base_Start_IT+0x80>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a1e      	ldr	r2, [pc, #120]	; (8005380 <HAL_TIM_Base_Start_IT+0xe0>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d009      	beq.n	8005320 <HAL_TIM_Base_Start_IT+0x80>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a1c      	ldr	r2, [pc, #112]	; (8005384 <HAL_TIM_Base_Start_IT+0xe4>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d004      	beq.n	8005320 <HAL_TIM_Base_Start_IT+0x80>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a1b      	ldr	r2, [pc, #108]	; (8005388 <HAL_TIM_Base_Start_IT+0xe8>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d115      	bne.n	800534c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	689a      	ldr	r2, [r3, #8]
 8005326:	4b19      	ldr	r3, [pc, #100]	; (800538c <HAL_TIM_Base_Start_IT+0xec>)
 8005328:	4013      	ands	r3, r2
 800532a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2b06      	cmp	r3, #6
 8005330:	d015      	beq.n	800535e <HAL_TIM_Base_Start_IT+0xbe>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005338:	d011      	beq.n	800535e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f042 0201 	orr.w	r2, r2, #1
 8005348:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800534a:	e008      	b.n	800535e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f042 0201 	orr.w	r2, r2, #1
 800535a:	601a      	str	r2, [r3, #0]
 800535c:	e000      	b.n	8005360 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800535e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	40010000 	.word	0x40010000
 8005374:	40000400 	.word	0x40000400
 8005378:	40000800 	.word	0x40000800
 800537c:	40000c00 	.word	0x40000c00
 8005380:	40010400 	.word	0x40010400
 8005384:	40014000 	.word	0x40014000
 8005388:	40001800 	.word	0x40001800
 800538c:	00010007 	.word	0x00010007

08005390 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d101      	bne.n	80053a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e049      	b.n	8005436 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d106      	bne.n	80053bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f841 	bl	800543e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2202      	movs	r2, #2
 80053c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	3304      	adds	r3, #4
 80053cc:	4619      	mov	r1, r3
 80053ce:	4610      	mov	r0, r2
 80053d0:	f000 fc58 	bl	8005c84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	3708      	adds	r7, #8
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}

0800543e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800543e:	b480      	push	{r7}
 8005440:	b083      	sub	sp, #12
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005446:	bf00      	nop
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
	...

08005454 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d109      	bne.n	8005478 <HAL_TIM_PWM_Start+0x24>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b01      	cmp	r3, #1
 800546e:	bf14      	ite	ne
 8005470:	2301      	movne	r3, #1
 8005472:	2300      	moveq	r3, #0
 8005474:	b2db      	uxtb	r3, r3
 8005476:	e03c      	b.n	80054f2 <HAL_TIM_PWM_Start+0x9e>
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	2b04      	cmp	r3, #4
 800547c:	d109      	bne.n	8005492 <HAL_TIM_PWM_Start+0x3e>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b01      	cmp	r3, #1
 8005488:	bf14      	ite	ne
 800548a:	2301      	movne	r3, #1
 800548c:	2300      	moveq	r3, #0
 800548e:	b2db      	uxtb	r3, r3
 8005490:	e02f      	b.n	80054f2 <HAL_TIM_PWM_Start+0x9e>
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	2b08      	cmp	r3, #8
 8005496:	d109      	bne.n	80054ac <HAL_TIM_PWM_Start+0x58>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	bf14      	ite	ne
 80054a4:	2301      	movne	r3, #1
 80054a6:	2300      	moveq	r3, #0
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	e022      	b.n	80054f2 <HAL_TIM_PWM_Start+0x9e>
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	2b0c      	cmp	r3, #12
 80054b0:	d109      	bne.n	80054c6 <HAL_TIM_PWM_Start+0x72>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	bf14      	ite	ne
 80054be:	2301      	movne	r3, #1
 80054c0:	2300      	moveq	r3, #0
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	e015      	b.n	80054f2 <HAL_TIM_PWM_Start+0x9e>
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	2b10      	cmp	r3, #16
 80054ca:	d109      	bne.n	80054e0 <HAL_TIM_PWM_Start+0x8c>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	bf14      	ite	ne
 80054d8:	2301      	movne	r3, #1
 80054da:	2300      	moveq	r3, #0
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	e008      	b.n	80054f2 <HAL_TIM_PWM_Start+0x9e>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	bf14      	ite	ne
 80054ec:	2301      	movne	r3, #1
 80054ee:	2300      	moveq	r3, #0
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d001      	beq.n	80054fa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e092      	b.n	8005620 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d104      	bne.n	800550a <HAL_TIM_PWM_Start+0xb6>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2202      	movs	r2, #2
 8005504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005508:	e023      	b.n	8005552 <HAL_TIM_PWM_Start+0xfe>
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	2b04      	cmp	r3, #4
 800550e:	d104      	bne.n	800551a <HAL_TIM_PWM_Start+0xc6>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2202      	movs	r2, #2
 8005514:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005518:	e01b      	b.n	8005552 <HAL_TIM_PWM_Start+0xfe>
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	2b08      	cmp	r3, #8
 800551e:	d104      	bne.n	800552a <HAL_TIM_PWM_Start+0xd6>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2202      	movs	r2, #2
 8005524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005528:	e013      	b.n	8005552 <HAL_TIM_PWM_Start+0xfe>
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	2b0c      	cmp	r3, #12
 800552e:	d104      	bne.n	800553a <HAL_TIM_PWM_Start+0xe6>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2202      	movs	r2, #2
 8005534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005538:	e00b      	b.n	8005552 <HAL_TIM_PWM_Start+0xfe>
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2b10      	cmp	r3, #16
 800553e:	d104      	bne.n	800554a <HAL_TIM_PWM_Start+0xf6>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2202      	movs	r2, #2
 8005544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005548:	e003      	b.n	8005552 <HAL_TIM_PWM_Start+0xfe>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2202      	movs	r2, #2
 800554e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2201      	movs	r2, #1
 8005558:	6839      	ldr	r1, [r7, #0]
 800555a:	4618      	mov	r0, r3
 800555c:	f000 ff2a 	bl	80063b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a30      	ldr	r2, [pc, #192]	; (8005628 <HAL_TIM_PWM_Start+0x1d4>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d004      	beq.n	8005574 <HAL_TIM_PWM_Start+0x120>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a2f      	ldr	r2, [pc, #188]	; (800562c <HAL_TIM_PWM_Start+0x1d8>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d101      	bne.n	8005578 <HAL_TIM_PWM_Start+0x124>
 8005574:	2301      	movs	r3, #1
 8005576:	e000      	b.n	800557a <HAL_TIM_PWM_Start+0x126>
 8005578:	2300      	movs	r3, #0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d007      	beq.n	800558e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800558c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a25      	ldr	r2, [pc, #148]	; (8005628 <HAL_TIM_PWM_Start+0x1d4>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d022      	beq.n	80055de <HAL_TIM_PWM_Start+0x18a>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055a0:	d01d      	beq.n	80055de <HAL_TIM_PWM_Start+0x18a>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a22      	ldr	r2, [pc, #136]	; (8005630 <HAL_TIM_PWM_Start+0x1dc>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d018      	beq.n	80055de <HAL_TIM_PWM_Start+0x18a>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a20      	ldr	r2, [pc, #128]	; (8005634 <HAL_TIM_PWM_Start+0x1e0>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d013      	beq.n	80055de <HAL_TIM_PWM_Start+0x18a>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a1f      	ldr	r2, [pc, #124]	; (8005638 <HAL_TIM_PWM_Start+0x1e4>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d00e      	beq.n	80055de <HAL_TIM_PWM_Start+0x18a>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a19      	ldr	r2, [pc, #100]	; (800562c <HAL_TIM_PWM_Start+0x1d8>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d009      	beq.n	80055de <HAL_TIM_PWM_Start+0x18a>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a1b      	ldr	r2, [pc, #108]	; (800563c <HAL_TIM_PWM_Start+0x1e8>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d004      	beq.n	80055de <HAL_TIM_PWM_Start+0x18a>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a19      	ldr	r2, [pc, #100]	; (8005640 <HAL_TIM_PWM_Start+0x1ec>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d115      	bne.n	800560a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	689a      	ldr	r2, [r3, #8]
 80055e4:	4b17      	ldr	r3, [pc, #92]	; (8005644 <HAL_TIM_PWM_Start+0x1f0>)
 80055e6:	4013      	ands	r3, r2
 80055e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2b06      	cmp	r3, #6
 80055ee:	d015      	beq.n	800561c <HAL_TIM_PWM_Start+0x1c8>
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055f6:	d011      	beq.n	800561c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f042 0201 	orr.w	r2, r2, #1
 8005606:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005608:	e008      	b.n	800561c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f042 0201 	orr.w	r2, r2, #1
 8005618:	601a      	str	r2, [r3, #0]
 800561a:	e000      	b.n	800561e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800561c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	40010000 	.word	0x40010000
 800562c:	40010400 	.word	0x40010400
 8005630:	40000400 	.word	0x40000400
 8005634:	40000800 	.word	0x40000800
 8005638:	40000c00 	.word	0x40000c00
 800563c:	40014000 	.word	0x40014000
 8005640:	40001800 	.word	0x40001800
 8005644:	00010007 	.word	0x00010007

08005648 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	f003 0302 	and.w	r3, r3, #2
 800565a:	2b02      	cmp	r3, #2
 800565c:	d122      	bne.n	80056a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	f003 0302 	and.w	r3, r3, #2
 8005668:	2b02      	cmp	r3, #2
 800566a:	d11b      	bne.n	80056a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f06f 0202 	mvn.w	r2, #2
 8005674:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2201      	movs	r2, #1
 800567a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	f003 0303 	and.w	r3, r3, #3
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 fadc 	bl	8005c48 <HAL_TIM_IC_CaptureCallback>
 8005690:	e005      	b.n	800569e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 face 	bl	8005c34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 fadf 	bl	8005c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	f003 0304 	and.w	r3, r3, #4
 80056ae:	2b04      	cmp	r3, #4
 80056b0:	d122      	bne.n	80056f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	f003 0304 	and.w	r3, r3, #4
 80056bc:	2b04      	cmp	r3, #4
 80056be:	d11b      	bne.n	80056f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f06f 0204 	mvn.w	r2, #4
 80056c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2202      	movs	r2, #2
 80056ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d003      	beq.n	80056e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 fab2 	bl	8005c48 <HAL_TIM_IC_CaptureCallback>
 80056e4:	e005      	b.n	80056f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 faa4 	bl	8005c34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 fab5 	bl	8005c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	f003 0308 	and.w	r3, r3, #8
 8005702:	2b08      	cmp	r3, #8
 8005704:	d122      	bne.n	800574c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	f003 0308 	and.w	r3, r3, #8
 8005710:	2b08      	cmp	r3, #8
 8005712:	d11b      	bne.n	800574c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f06f 0208 	mvn.w	r2, #8
 800571c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2204      	movs	r2, #4
 8005722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	69db      	ldr	r3, [r3, #28]
 800572a:	f003 0303 	and.w	r3, r3, #3
 800572e:	2b00      	cmp	r3, #0
 8005730:	d003      	beq.n	800573a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 fa88 	bl	8005c48 <HAL_TIM_IC_CaptureCallback>
 8005738:	e005      	b.n	8005746 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 fa7a 	bl	8005c34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 fa8b 	bl	8005c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	f003 0310 	and.w	r3, r3, #16
 8005756:	2b10      	cmp	r3, #16
 8005758:	d122      	bne.n	80057a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f003 0310 	and.w	r3, r3, #16
 8005764:	2b10      	cmp	r3, #16
 8005766:	d11b      	bne.n	80057a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f06f 0210 	mvn.w	r2, #16
 8005770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2208      	movs	r2, #8
 8005776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	69db      	ldr	r3, [r3, #28]
 800577e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005782:	2b00      	cmp	r3, #0
 8005784:	d003      	beq.n	800578e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 fa5e 	bl	8005c48 <HAL_TIM_IC_CaptureCallback>
 800578c:	e005      	b.n	800579a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 fa50 	bl	8005c34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 fa61 	bl	8005c5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	691b      	ldr	r3, [r3, #16]
 80057a6:	f003 0301 	and.w	r3, r3, #1
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d10e      	bne.n	80057cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d107      	bne.n	80057cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f06f 0201 	mvn.w	r2, #1
 80057c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7fb faf0 	bl	8000dac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057d6:	2b80      	cmp	r3, #128	; 0x80
 80057d8:	d10e      	bne.n	80057f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e4:	2b80      	cmp	r3, #128	; 0x80
 80057e6:	d107      	bne.n	80057f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 fe9c 	bl	8006530 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005802:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005806:	d10e      	bne.n	8005826 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005812:	2b80      	cmp	r3, #128	; 0x80
 8005814:	d107      	bne.n	8005826 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800581e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 fe8f 	bl	8006544 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	691b      	ldr	r3, [r3, #16]
 800582c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005830:	2b40      	cmp	r3, #64	; 0x40
 8005832:	d10e      	bne.n	8005852 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583e:	2b40      	cmp	r3, #64	; 0x40
 8005840:	d107      	bne.n	8005852 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800584a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 fa0f 	bl	8005c70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	f003 0320 	and.w	r3, r3, #32
 800585c:	2b20      	cmp	r3, #32
 800585e:	d10e      	bne.n	800587e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	f003 0320 	and.w	r3, r3, #32
 800586a:	2b20      	cmp	r3, #32
 800586c:	d107      	bne.n	800587e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f06f 0220 	mvn.w	r2, #32
 8005876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 fe4f 	bl	800651c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800587e:	bf00      	nop
 8005880:	3708      	adds	r7, #8
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
	...

08005888 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800589a:	2b01      	cmp	r3, #1
 800589c:	d101      	bne.n	80058a2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800589e:	2302      	movs	r3, #2
 80058a0:	e0fd      	b.n	8005a9e <HAL_TIM_PWM_ConfigChannel+0x216>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2b14      	cmp	r3, #20
 80058ae:	f200 80f0 	bhi.w	8005a92 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80058b2:	a201      	add	r2, pc, #4	; (adr r2, 80058b8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80058b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058b8:	0800590d 	.word	0x0800590d
 80058bc:	08005a93 	.word	0x08005a93
 80058c0:	08005a93 	.word	0x08005a93
 80058c4:	08005a93 	.word	0x08005a93
 80058c8:	0800594d 	.word	0x0800594d
 80058cc:	08005a93 	.word	0x08005a93
 80058d0:	08005a93 	.word	0x08005a93
 80058d4:	08005a93 	.word	0x08005a93
 80058d8:	0800598f 	.word	0x0800598f
 80058dc:	08005a93 	.word	0x08005a93
 80058e0:	08005a93 	.word	0x08005a93
 80058e4:	08005a93 	.word	0x08005a93
 80058e8:	080059cf 	.word	0x080059cf
 80058ec:	08005a93 	.word	0x08005a93
 80058f0:	08005a93 	.word	0x08005a93
 80058f4:	08005a93 	.word	0x08005a93
 80058f8:	08005a11 	.word	0x08005a11
 80058fc:	08005a93 	.word	0x08005a93
 8005900:	08005a93 	.word	0x08005a93
 8005904:	08005a93 	.word	0x08005a93
 8005908:	08005a51 	.word	0x08005a51
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68b9      	ldr	r1, [r7, #8]
 8005912:	4618      	mov	r0, r3
 8005914:	f000 fa56 	bl	8005dc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	699a      	ldr	r2, [r3, #24]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f042 0208 	orr.w	r2, r2, #8
 8005926:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	699a      	ldr	r2, [r3, #24]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f022 0204 	bic.w	r2, r2, #4
 8005936:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	6999      	ldr	r1, [r3, #24]
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	691a      	ldr	r2, [r3, #16]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	430a      	orrs	r2, r1
 8005948:	619a      	str	r2, [r3, #24]
      break;
 800594a:	e0a3      	b.n	8005a94 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68b9      	ldr	r1, [r7, #8]
 8005952:	4618      	mov	r0, r3
 8005954:	f000 faa8 	bl	8005ea8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	699a      	ldr	r2, [r3, #24]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005966:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	699a      	ldr	r2, [r3, #24]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005976:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6999      	ldr	r1, [r3, #24]
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	021a      	lsls	r2, r3, #8
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	430a      	orrs	r2, r1
 800598a:	619a      	str	r2, [r3, #24]
      break;
 800598c:	e082      	b.n	8005a94 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68b9      	ldr	r1, [r7, #8]
 8005994:	4618      	mov	r0, r3
 8005996:	f000 faff 	bl	8005f98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	69da      	ldr	r2, [r3, #28]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f042 0208 	orr.w	r2, r2, #8
 80059a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	69da      	ldr	r2, [r3, #28]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f022 0204 	bic.w	r2, r2, #4
 80059b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	69d9      	ldr	r1, [r3, #28]
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	691a      	ldr	r2, [r3, #16]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	430a      	orrs	r2, r1
 80059ca:	61da      	str	r2, [r3, #28]
      break;
 80059cc:	e062      	b.n	8005a94 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68b9      	ldr	r1, [r7, #8]
 80059d4:	4618      	mov	r0, r3
 80059d6:	f000 fb55 	bl	8006084 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	69da      	ldr	r2, [r3, #28]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	69da      	ldr	r2, [r3, #28]
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	69d9      	ldr	r1, [r3, #28]
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	021a      	lsls	r2, r3, #8
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	61da      	str	r2, [r3, #28]
      break;
 8005a0e:	e041      	b.n	8005a94 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68b9      	ldr	r1, [r7, #8]
 8005a16:	4618      	mov	r0, r3
 8005a18:	f000 fb8c 	bl	8006134 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f042 0208 	orr.w	r2, r2, #8
 8005a2a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f022 0204 	bic.w	r2, r2, #4
 8005a3a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	691a      	ldr	r2, [r3, #16]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005a4e:	e021      	b.n	8005a94 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68b9      	ldr	r1, [r7, #8]
 8005a56:	4618      	mov	r0, r3
 8005a58:	f000 fbbe 	bl	80061d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a6a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a7a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	021a      	lsls	r2, r3, #8
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	430a      	orrs	r2, r1
 8005a8e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005a90:	e000      	b.n	8005a94 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005a92:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
 8005aa6:	bf00      	nop

08005aa8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d101      	bne.n	8005ac0 <HAL_TIM_ConfigClockSource+0x18>
 8005abc:	2302      	movs	r3, #2
 8005abe:	e0b3      	b.n	8005c28 <HAL_TIM_ConfigClockSource+0x180>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2202      	movs	r2, #2
 8005acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	4b55      	ldr	r3, [pc, #340]	; (8005c30 <HAL_TIM_ConfigClockSource+0x188>)
 8005adc:	4013      	ands	r3, r2
 8005ade:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ae6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005af8:	d03e      	beq.n	8005b78 <HAL_TIM_ConfigClockSource+0xd0>
 8005afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005afe:	f200 8087 	bhi.w	8005c10 <HAL_TIM_ConfigClockSource+0x168>
 8005b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b06:	f000 8085 	beq.w	8005c14 <HAL_TIM_ConfigClockSource+0x16c>
 8005b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b0e:	d87f      	bhi.n	8005c10 <HAL_TIM_ConfigClockSource+0x168>
 8005b10:	2b70      	cmp	r3, #112	; 0x70
 8005b12:	d01a      	beq.n	8005b4a <HAL_TIM_ConfigClockSource+0xa2>
 8005b14:	2b70      	cmp	r3, #112	; 0x70
 8005b16:	d87b      	bhi.n	8005c10 <HAL_TIM_ConfigClockSource+0x168>
 8005b18:	2b60      	cmp	r3, #96	; 0x60
 8005b1a:	d050      	beq.n	8005bbe <HAL_TIM_ConfigClockSource+0x116>
 8005b1c:	2b60      	cmp	r3, #96	; 0x60
 8005b1e:	d877      	bhi.n	8005c10 <HAL_TIM_ConfigClockSource+0x168>
 8005b20:	2b50      	cmp	r3, #80	; 0x50
 8005b22:	d03c      	beq.n	8005b9e <HAL_TIM_ConfigClockSource+0xf6>
 8005b24:	2b50      	cmp	r3, #80	; 0x50
 8005b26:	d873      	bhi.n	8005c10 <HAL_TIM_ConfigClockSource+0x168>
 8005b28:	2b40      	cmp	r3, #64	; 0x40
 8005b2a:	d058      	beq.n	8005bde <HAL_TIM_ConfigClockSource+0x136>
 8005b2c:	2b40      	cmp	r3, #64	; 0x40
 8005b2e:	d86f      	bhi.n	8005c10 <HAL_TIM_ConfigClockSource+0x168>
 8005b30:	2b30      	cmp	r3, #48	; 0x30
 8005b32:	d064      	beq.n	8005bfe <HAL_TIM_ConfigClockSource+0x156>
 8005b34:	2b30      	cmp	r3, #48	; 0x30
 8005b36:	d86b      	bhi.n	8005c10 <HAL_TIM_ConfigClockSource+0x168>
 8005b38:	2b20      	cmp	r3, #32
 8005b3a:	d060      	beq.n	8005bfe <HAL_TIM_ConfigClockSource+0x156>
 8005b3c:	2b20      	cmp	r3, #32
 8005b3e:	d867      	bhi.n	8005c10 <HAL_TIM_ConfigClockSource+0x168>
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d05c      	beq.n	8005bfe <HAL_TIM_ConfigClockSource+0x156>
 8005b44:	2b10      	cmp	r3, #16
 8005b46:	d05a      	beq.n	8005bfe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005b48:	e062      	b.n	8005c10 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6818      	ldr	r0, [r3, #0]
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	6899      	ldr	r1, [r3, #8]
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	685a      	ldr	r2, [r3, #4]
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	f000 fc0b 	bl	8006374 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005b6c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	609a      	str	r2, [r3, #8]
      break;
 8005b76:	e04e      	b.n	8005c16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6818      	ldr	r0, [r3, #0]
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	6899      	ldr	r1, [r3, #8]
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	f000 fbf4 	bl	8006374 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	689a      	ldr	r2, [r3, #8]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b9a:	609a      	str	r2, [r3, #8]
      break;
 8005b9c:	e03b      	b.n	8005c16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6818      	ldr	r0, [r3, #0]
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	6859      	ldr	r1, [r3, #4]
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	461a      	mov	r2, r3
 8005bac:	f000 fb68 	bl	8006280 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2150      	movs	r1, #80	; 0x50
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f000 fbc1 	bl	800633e <TIM_ITRx_SetConfig>
      break;
 8005bbc:	e02b      	b.n	8005c16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6818      	ldr	r0, [r3, #0]
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	6859      	ldr	r1, [r3, #4]
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	f000 fb87 	bl	80062de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2160      	movs	r1, #96	; 0x60
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f000 fbb1 	bl	800633e <TIM_ITRx_SetConfig>
      break;
 8005bdc:	e01b      	b.n	8005c16 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6818      	ldr	r0, [r3, #0]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	6859      	ldr	r1, [r3, #4]
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	461a      	mov	r2, r3
 8005bec:	f000 fb48 	bl	8006280 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2140      	movs	r1, #64	; 0x40
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f000 fba1 	bl	800633e <TIM_ITRx_SetConfig>
      break;
 8005bfc:	e00b      	b.n	8005c16 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4619      	mov	r1, r3
 8005c08:	4610      	mov	r0, r2
 8005c0a:	f000 fb98 	bl	800633e <TIM_ITRx_SetConfig>
        break;
 8005c0e:	e002      	b.n	8005c16 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005c10:	bf00      	nop
 8005c12:	e000      	b.n	8005c16 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005c14:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3710      	adds	r7, #16
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	fffeff88 	.word	0xfffeff88

08005c34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c3c:	bf00      	nop
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c64:	bf00      	nop
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c78:	bf00      	nop
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a40      	ldr	r2, [pc, #256]	; (8005d98 <TIM_Base_SetConfig+0x114>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d013      	beq.n	8005cc4 <TIM_Base_SetConfig+0x40>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ca2:	d00f      	beq.n	8005cc4 <TIM_Base_SetConfig+0x40>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a3d      	ldr	r2, [pc, #244]	; (8005d9c <TIM_Base_SetConfig+0x118>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d00b      	beq.n	8005cc4 <TIM_Base_SetConfig+0x40>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a3c      	ldr	r2, [pc, #240]	; (8005da0 <TIM_Base_SetConfig+0x11c>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d007      	beq.n	8005cc4 <TIM_Base_SetConfig+0x40>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a3b      	ldr	r2, [pc, #236]	; (8005da4 <TIM_Base_SetConfig+0x120>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d003      	beq.n	8005cc4 <TIM_Base_SetConfig+0x40>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a3a      	ldr	r2, [pc, #232]	; (8005da8 <TIM_Base_SetConfig+0x124>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d108      	bne.n	8005cd6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a2f      	ldr	r2, [pc, #188]	; (8005d98 <TIM_Base_SetConfig+0x114>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d02b      	beq.n	8005d36 <TIM_Base_SetConfig+0xb2>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ce4:	d027      	beq.n	8005d36 <TIM_Base_SetConfig+0xb2>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a2c      	ldr	r2, [pc, #176]	; (8005d9c <TIM_Base_SetConfig+0x118>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d023      	beq.n	8005d36 <TIM_Base_SetConfig+0xb2>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a2b      	ldr	r2, [pc, #172]	; (8005da0 <TIM_Base_SetConfig+0x11c>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d01f      	beq.n	8005d36 <TIM_Base_SetConfig+0xb2>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a2a      	ldr	r2, [pc, #168]	; (8005da4 <TIM_Base_SetConfig+0x120>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d01b      	beq.n	8005d36 <TIM_Base_SetConfig+0xb2>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a29      	ldr	r2, [pc, #164]	; (8005da8 <TIM_Base_SetConfig+0x124>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d017      	beq.n	8005d36 <TIM_Base_SetConfig+0xb2>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a28      	ldr	r2, [pc, #160]	; (8005dac <TIM_Base_SetConfig+0x128>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d013      	beq.n	8005d36 <TIM_Base_SetConfig+0xb2>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a27      	ldr	r2, [pc, #156]	; (8005db0 <TIM_Base_SetConfig+0x12c>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d00f      	beq.n	8005d36 <TIM_Base_SetConfig+0xb2>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a26      	ldr	r2, [pc, #152]	; (8005db4 <TIM_Base_SetConfig+0x130>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d00b      	beq.n	8005d36 <TIM_Base_SetConfig+0xb2>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a25      	ldr	r2, [pc, #148]	; (8005db8 <TIM_Base_SetConfig+0x134>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d007      	beq.n	8005d36 <TIM_Base_SetConfig+0xb2>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a24      	ldr	r2, [pc, #144]	; (8005dbc <TIM_Base_SetConfig+0x138>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d003      	beq.n	8005d36 <TIM_Base_SetConfig+0xb2>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a23      	ldr	r2, [pc, #140]	; (8005dc0 <TIM_Base_SetConfig+0x13c>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d108      	bne.n	8005d48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	68fa      	ldr	r2, [r7, #12]
 8005d5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	689a      	ldr	r2, [r3, #8]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a0a      	ldr	r2, [pc, #40]	; (8005d98 <TIM_Base_SetConfig+0x114>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d003      	beq.n	8005d7c <TIM_Base_SetConfig+0xf8>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a0c      	ldr	r2, [pc, #48]	; (8005da8 <TIM_Base_SetConfig+0x124>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d103      	bne.n	8005d84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	691a      	ldr	r2, [r3, #16]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	615a      	str	r2, [r3, #20]
}
 8005d8a:	bf00      	nop
 8005d8c:	3714      	adds	r7, #20
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	40010000 	.word	0x40010000
 8005d9c:	40000400 	.word	0x40000400
 8005da0:	40000800 	.word	0x40000800
 8005da4:	40000c00 	.word	0x40000c00
 8005da8:	40010400 	.word	0x40010400
 8005dac:	40014000 	.word	0x40014000
 8005db0:	40014400 	.word	0x40014400
 8005db4:	40014800 	.word	0x40014800
 8005db8:	40001800 	.word	0x40001800
 8005dbc:	40001c00 	.word	0x40001c00
 8005dc0:	40002000 	.word	0x40002000

08005dc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b087      	sub	sp, #28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	f023 0201 	bic.w	r2, r3, #1
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	4b2b      	ldr	r3, [pc, #172]	; (8005e9c <TIM_OC1_SetConfig+0xd8>)
 8005df0:	4013      	ands	r3, r2
 8005df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f023 0303 	bic.w	r3, r3, #3
 8005dfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	f023 0302 	bic.w	r3, r3, #2
 8005e0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	697a      	ldr	r2, [r7, #20]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a21      	ldr	r2, [pc, #132]	; (8005ea0 <TIM_OC1_SetConfig+0xdc>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d003      	beq.n	8005e28 <TIM_OC1_SetConfig+0x64>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a20      	ldr	r2, [pc, #128]	; (8005ea4 <TIM_OC1_SetConfig+0xe0>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d10c      	bne.n	8005e42 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	f023 0308 	bic.w	r3, r3, #8
 8005e2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	f023 0304 	bic.w	r3, r3, #4
 8005e40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a16      	ldr	r2, [pc, #88]	; (8005ea0 <TIM_OC1_SetConfig+0xdc>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d003      	beq.n	8005e52 <TIM_OC1_SetConfig+0x8e>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a15      	ldr	r2, [pc, #84]	; (8005ea4 <TIM_OC1_SetConfig+0xe0>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d111      	bne.n	8005e76 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	693a      	ldr	r2, [r7, #16]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	699b      	ldr	r3, [r3, #24]
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	685a      	ldr	r2, [r3, #4]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	621a      	str	r2, [r3, #32]
}
 8005e90:	bf00      	nop
 8005e92:	371c      	adds	r7, #28
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr
 8005e9c:	fffeff8f 	.word	0xfffeff8f
 8005ea0:	40010000 	.word	0x40010000
 8005ea4:	40010400 	.word	0x40010400

08005ea8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b087      	sub	sp, #28
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	f023 0210 	bic.w	r2, r3, #16
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	4b2e      	ldr	r3, [pc, #184]	; (8005f8c <TIM_OC2_SetConfig+0xe4>)
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ede:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	021b      	lsls	r3, r3, #8
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	f023 0320 	bic.w	r3, r3, #32
 8005ef2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	011b      	lsls	r3, r3, #4
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a23      	ldr	r2, [pc, #140]	; (8005f90 <TIM_OC2_SetConfig+0xe8>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d003      	beq.n	8005f10 <TIM_OC2_SetConfig+0x68>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a22      	ldr	r2, [pc, #136]	; (8005f94 <TIM_OC2_SetConfig+0xec>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d10d      	bne.n	8005f2c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	011b      	lsls	r3, r3, #4
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a18      	ldr	r2, [pc, #96]	; (8005f90 <TIM_OC2_SetConfig+0xe8>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d003      	beq.n	8005f3c <TIM_OC2_SetConfig+0x94>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a17      	ldr	r2, [pc, #92]	; (8005f94 <TIM_OC2_SetConfig+0xec>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d113      	bne.n	8005f64 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	695b      	ldr	r3, [r3, #20]
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	693a      	ldr	r2, [r7, #16]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	699b      	ldr	r3, [r3, #24]
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	693a      	ldr	r2, [r7, #16]
 8005f68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	685a      	ldr	r2, [r3, #4]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	621a      	str	r2, [r3, #32]
}
 8005f7e:	bf00      	nop
 8005f80:	371c      	adds	r7, #28
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	feff8fff 	.word	0xfeff8fff
 8005f90:	40010000 	.word	0x40010000
 8005f94:	40010400 	.word	0x40010400

08005f98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b087      	sub	sp, #28
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a1b      	ldr	r3, [r3, #32]
 8005fb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	69db      	ldr	r3, [r3, #28]
 8005fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	4b2d      	ldr	r3, [pc, #180]	; (8006078 <TIM_OC3_SetConfig+0xe0>)
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f023 0303 	bic.w	r3, r3, #3
 8005fce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fe0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	021b      	lsls	r3, r3, #8
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a22      	ldr	r2, [pc, #136]	; (800607c <TIM_OC3_SetConfig+0xe4>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d003      	beq.n	8005ffe <TIM_OC3_SetConfig+0x66>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a21      	ldr	r2, [pc, #132]	; (8006080 <TIM_OC3_SetConfig+0xe8>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d10d      	bne.n	800601a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006004:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	021b      	lsls	r3, r3, #8
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	4313      	orrs	r3, r2
 8006010:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006018:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a17      	ldr	r2, [pc, #92]	; (800607c <TIM_OC3_SetConfig+0xe4>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d003      	beq.n	800602a <TIM_OC3_SetConfig+0x92>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a16      	ldr	r2, [pc, #88]	; (8006080 <TIM_OC3_SetConfig+0xe8>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d113      	bne.n	8006052 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006030:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006038:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	011b      	lsls	r3, r3, #4
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	4313      	orrs	r3, r2
 8006044:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	699b      	ldr	r3, [r3, #24]
 800604a:	011b      	lsls	r3, r3, #4
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	4313      	orrs	r3, r2
 8006050:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	685a      	ldr	r2, [r3, #4]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	697a      	ldr	r2, [r7, #20]
 800606a:	621a      	str	r2, [r3, #32]
}
 800606c:	bf00      	nop
 800606e:	371c      	adds	r7, #28
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr
 8006078:	fffeff8f 	.word	0xfffeff8f
 800607c:	40010000 	.word	0x40010000
 8006080:	40010400 	.word	0x40010400

08006084 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006084:	b480      	push	{r7}
 8006086:	b087      	sub	sp, #28
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	69db      	ldr	r3, [r3, #28]
 80060aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	4b1e      	ldr	r3, [pc, #120]	; (8006128 <TIM_OC4_SetConfig+0xa4>)
 80060b0:	4013      	ands	r3, r2
 80060b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	021b      	lsls	r3, r3, #8
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	031b      	lsls	r3, r3, #12
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	4313      	orrs	r3, r2
 80060da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a13      	ldr	r2, [pc, #76]	; (800612c <TIM_OC4_SetConfig+0xa8>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d003      	beq.n	80060ec <TIM_OC4_SetConfig+0x68>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a12      	ldr	r2, [pc, #72]	; (8006130 <TIM_OC4_SetConfig+0xac>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d109      	bne.n	8006100 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	695b      	ldr	r3, [r3, #20]
 80060f8:	019b      	lsls	r3, r3, #6
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685a      	ldr	r2, [r3, #4]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	693a      	ldr	r2, [r7, #16]
 8006118:	621a      	str	r2, [r3, #32]
}
 800611a:	bf00      	nop
 800611c:	371c      	adds	r7, #28
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	feff8fff 	.word	0xfeff8fff
 800612c:	40010000 	.word	0x40010000
 8006130:	40010400 	.word	0x40010400

08006134 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006134:	b480      	push	{r7}
 8006136:	b087      	sub	sp, #28
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a1b      	ldr	r3, [r3, #32]
 8006142:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800615a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	4b1b      	ldr	r3, [pc, #108]	; (80061cc <TIM_OC5_SetConfig+0x98>)
 8006160:	4013      	ands	r3, r2
 8006162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	4313      	orrs	r3, r2
 800616c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006174:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	041b      	lsls	r3, r3, #16
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	4313      	orrs	r3, r2
 8006180:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a12      	ldr	r2, [pc, #72]	; (80061d0 <TIM_OC5_SetConfig+0x9c>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d003      	beq.n	8006192 <TIM_OC5_SetConfig+0x5e>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4a11      	ldr	r2, [pc, #68]	; (80061d4 <TIM_OC5_SetConfig+0xa0>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d109      	bne.n	80061a6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006198:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	021b      	lsls	r3, r3, #8
 80061a0:	697a      	ldr	r2, [r7, #20]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	685a      	ldr	r2, [r3, #4]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	621a      	str	r2, [r3, #32]
}
 80061c0:	bf00      	nop
 80061c2:	371c      	adds	r7, #28
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr
 80061cc:	fffeff8f 	.word	0xfffeff8f
 80061d0:	40010000 	.word	0x40010000
 80061d4:	40010400 	.word	0x40010400

080061d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80061d8:	b480      	push	{r7}
 80061da:	b087      	sub	sp, #28
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a1b      	ldr	r3, [r3, #32]
 80061e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a1b      	ldr	r3, [r3, #32]
 80061f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	4b1c      	ldr	r3, [pc, #112]	; (8006274 <TIM_OC6_SetConfig+0x9c>)
 8006204:	4013      	ands	r3, r2
 8006206:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	021b      	lsls	r3, r3, #8
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	4313      	orrs	r3, r2
 8006212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800621a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	051b      	lsls	r3, r3, #20
 8006222:	693a      	ldr	r2, [r7, #16]
 8006224:	4313      	orrs	r3, r2
 8006226:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a13      	ldr	r2, [pc, #76]	; (8006278 <TIM_OC6_SetConfig+0xa0>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d003      	beq.n	8006238 <TIM_OC6_SetConfig+0x60>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a12      	ldr	r2, [pc, #72]	; (800627c <TIM_OC6_SetConfig+0xa4>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d109      	bne.n	800624c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800623e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	695b      	ldr	r3, [r3, #20]
 8006244:	029b      	lsls	r3, r3, #10
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	4313      	orrs	r3, r2
 800624a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	685a      	ldr	r2, [r3, #4]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	693a      	ldr	r2, [r7, #16]
 8006264:	621a      	str	r2, [r3, #32]
}
 8006266:	bf00      	nop
 8006268:	371c      	adds	r7, #28
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	feff8fff 	.word	0xfeff8fff
 8006278:	40010000 	.word	0x40010000
 800627c:	40010400 	.word	0x40010400

08006280 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006280:	b480      	push	{r7}
 8006282:	b087      	sub	sp, #28
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6a1b      	ldr	r3, [r3, #32]
 8006290:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6a1b      	ldr	r3, [r3, #32]
 8006296:	f023 0201 	bic.w	r2, r3, #1
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	699b      	ldr	r3, [r3, #24]
 80062a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	011b      	lsls	r3, r3, #4
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	f023 030a 	bic.w	r3, r3, #10
 80062bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	621a      	str	r2, [r3, #32]
}
 80062d2:	bf00      	nop
 80062d4:	371c      	adds	r7, #28
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr

080062de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062de:	b480      	push	{r7}
 80062e0:	b087      	sub	sp, #28
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	60f8      	str	r0, [r7, #12]
 80062e6:	60b9      	str	r1, [r7, #8]
 80062e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	f023 0210 	bic.w	r2, r3, #16
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6a1b      	ldr	r3, [r3, #32]
 8006300:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006308:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	031b      	lsls	r3, r3, #12
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	4313      	orrs	r3, r2
 8006312:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800631a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	011b      	lsls	r3, r3, #4
 8006320:	693a      	ldr	r2, [r7, #16]
 8006322:	4313      	orrs	r3, r2
 8006324:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	697a      	ldr	r2, [r7, #20]
 800632a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	621a      	str	r2, [r3, #32]
}
 8006332:	bf00      	nop
 8006334:	371c      	adds	r7, #28
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800633e:	b480      	push	{r7}
 8006340:	b085      	sub	sp, #20
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
 8006346:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006354:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006356:	683a      	ldr	r2, [r7, #0]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	4313      	orrs	r3, r2
 800635c:	f043 0307 	orr.w	r3, r3, #7
 8006360:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	609a      	str	r2, [r3, #8]
}
 8006368:	bf00      	nop
 800636a:	3714      	adds	r7, #20
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006374:	b480      	push	{r7}
 8006376:	b087      	sub	sp, #28
 8006378:	af00      	add	r7, sp, #0
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	607a      	str	r2, [r7, #4]
 8006380:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800638e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	021a      	lsls	r2, r3, #8
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	431a      	orrs	r2, r3
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	4313      	orrs	r3, r2
 800639c:	697a      	ldr	r2, [r7, #20]
 800639e:	4313      	orrs	r3, r2
 80063a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	609a      	str	r2, [r3, #8]
}
 80063a8:	bf00      	nop
 80063aa:	371c      	adds	r7, #28
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b087      	sub	sp, #28
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	f003 031f 	and.w	r3, r3, #31
 80063c6:	2201      	movs	r2, #1
 80063c8:	fa02 f303 	lsl.w	r3, r2, r3
 80063cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6a1a      	ldr	r2, [r3, #32]
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	43db      	mvns	r3, r3
 80063d6:	401a      	ands	r2, r3
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6a1a      	ldr	r2, [r3, #32]
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	f003 031f 	and.w	r3, r3, #31
 80063e6:	6879      	ldr	r1, [r7, #4]
 80063e8:	fa01 f303 	lsl.w	r3, r1, r3
 80063ec:	431a      	orrs	r2, r3
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	621a      	str	r2, [r3, #32]
}
 80063f2:	bf00      	nop
 80063f4:	371c      	adds	r7, #28
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
	...

08006400 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006400:	b480      	push	{r7}
 8006402:	b085      	sub	sp, #20
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006410:	2b01      	cmp	r3, #1
 8006412:	d101      	bne.n	8006418 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006414:	2302      	movs	r3, #2
 8006416:	e06d      	b.n	80064f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2202      	movs	r2, #2
 8006424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a30      	ldr	r2, [pc, #192]	; (8006500 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d004      	beq.n	800644c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a2f      	ldr	r2, [pc, #188]	; (8006504 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d108      	bne.n	800645e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006452:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	4313      	orrs	r3, r2
 800645c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006464:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	4313      	orrs	r3, r2
 800646e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a20      	ldr	r2, [pc, #128]	; (8006500 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d022      	beq.n	80064c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800648a:	d01d      	beq.n	80064c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a1d      	ldr	r2, [pc, #116]	; (8006508 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d018      	beq.n	80064c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a1c      	ldr	r2, [pc, #112]	; (800650c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d013      	beq.n	80064c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a1a      	ldr	r2, [pc, #104]	; (8006510 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d00e      	beq.n	80064c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a15      	ldr	r2, [pc, #84]	; (8006504 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d009      	beq.n	80064c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a16      	ldr	r2, [pc, #88]	; (8006514 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d004      	beq.n	80064c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a15      	ldr	r2, [pc, #84]	; (8006518 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d10c      	bne.n	80064e2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064ce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68ba      	ldr	r2, [r7, #8]
 80064e0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	3714      	adds	r7, #20
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr
 8006500:	40010000 	.word	0x40010000
 8006504:	40010400 	.word	0x40010400
 8006508:	40000400 	.word	0x40000400
 800650c:	40000800 	.word	0x40000800
 8006510:	40000c00 	.word	0x40000c00
 8006514:	40014000 	.word	0x40014000
 8006518:	40001800 	.word	0x40001800

0800651c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800654c:	bf00      	nop
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d101      	bne.n	800656a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e040      	b.n	80065ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800656e:	2b00      	cmp	r3, #0
 8006570:	d106      	bne.n	8006580 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f7fa ff8e 	bl	800149c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2224      	movs	r2, #36	; 0x24
 8006584:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f022 0201 	bic.w	r2, r2, #1
 8006594:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 fb26 	bl	8006be8 <UART_SetConfig>
 800659c:	4603      	mov	r3, r0
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d101      	bne.n	80065a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e022      	b.n	80065ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d002      	beq.n	80065b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 fd7c 	bl	80070ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	685a      	ldr	r2, [r3, #4]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	689a      	ldr	r2, [r3, #8]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f042 0201 	orr.w	r2, r2, #1
 80065e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 fe03 	bl	80071f0 <UART_CheckIdleState>
 80065ea:	4603      	mov	r3, r0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3708      	adds	r7, #8
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b08a      	sub	sp, #40	; 0x28
 80065f8:	af02      	add	r7, sp, #8
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	603b      	str	r3, [r7, #0]
 8006600:	4613      	mov	r3, r2
 8006602:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006608:	2b20      	cmp	r3, #32
 800660a:	f040 8081 	bne.w	8006710 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d002      	beq.n	800661a <HAL_UART_Transmit+0x26>
 8006614:	88fb      	ldrh	r3, [r7, #6]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d101      	bne.n	800661e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e079      	b.n	8006712 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006624:	2b01      	cmp	r3, #1
 8006626:	d101      	bne.n	800662c <HAL_UART_Transmit+0x38>
 8006628:	2302      	movs	r3, #2
 800662a:	e072      	b.n	8006712 <HAL_UART_Transmit+0x11e>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2200      	movs	r2, #0
 8006638:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2221      	movs	r2, #33	; 0x21
 8006640:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006642:	f7fb f87b 	bl	800173c <HAL_GetTick>
 8006646:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	88fa      	ldrh	r2, [r7, #6]
 800664c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	88fa      	ldrh	r2, [r7, #6]
 8006654:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006660:	d108      	bne.n	8006674 <HAL_UART_Transmit+0x80>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d104      	bne.n	8006674 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800666a:	2300      	movs	r3, #0
 800666c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	61bb      	str	r3, [r7, #24]
 8006672:	e003      	b.n	800667c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006678:	2300      	movs	r3, #0
 800667a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006684:	e02c      	b.n	80066e0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	9300      	str	r3, [sp, #0]
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	2200      	movs	r2, #0
 800668e:	2180      	movs	r1, #128	; 0x80
 8006690:	68f8      	ldr	r0, [r7, #12]
 8006692:	f000 fdf6 	bl	8007282 <UART_WaitOnFlagUntilTimeout>
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d001      	beq.n	80066a0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e038      	b.n	8006712 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80066a0:	69fb      	ldr	r3, [r7, #28]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d10b      	bne.n	80066be <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	881b      	ldrh	r3, [r3, #0]
 80066aa:	461a      	mov	r2, r3
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066b4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	3302      	adds	r3, #2
 80066ba:	61bb      	str	r3, [r7, #24]
 80066bc:	e007      	b.n	80066ce <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	781a      	ldrb	r2, [r3, #0]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	3301      	adds	r3, #1
 80066cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	3b01      	subs	r3, #1
 80066d8:	b29a      	uxth	r2, r3
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1cc      	bne.n	8006686 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	9300      	str	r3, [sp, #0]
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	2200      	movs	r2, #0
 80066f4:	2140      	movs	r1, #64	; 0x40
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f000 fdc3 	bl	8007282 <UART_WaitOnFlagUntilTimeout>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d001      	beq.n	8006706 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006702:	2303      	movs	r3, #3
 8006704:	e005      	b.n	8006712 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2220      	movs	r2, #32
 800670a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800670c:	2300      	movs	r3, #0
 800670e:	e000      	b.n	8006712 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006710:	2302      	movs	r3, #2
  }
}
 8006712:	4618      	mov	r0, r3
 8006714:	3720      	adds	r7, #32
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}

0800671a <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b084      	sub	sp, #16
 800671e:	af00      	add	r7, sp, #0
 8006720:	60f8      	str	r0, [r7, #12]
 8006722:	60b9      	str	r1, [r7, #8]
 8006724:	4613      	mov	r3, r2
 8006726:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800672c:	2b20      	cmp	r3, #32
 800672e:	d12c      	bne.n	800678a <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d002      	beq.n	800673c <HAL_UART_Receive_IT+0x22>
 8006736:	88fb      	ldrh	r3, [r7, #6]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d101      	bne.n	8006740 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e025      	b.n	800678c <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006746:	2b01      	cmp	r3, #1
 8006748:	d101      	bne.n	800674e <HAL_UART_Receive_IT+0x34>
 800674a:	2302      	movs	r3, #2
 800674c:	e01e      	b.n	800678c <HAL_UART_Receive_IT+0x72>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2201      	movs	r2, #1
 8006752:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2200      	movs	r2, #0
 800675a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006766:	2b00      	cmp	r3, #0
 8006768:	d007      	beq.n	800677a <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006778:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800677a:	88fb      	ldrh	r3, [r7, #6]
 800677c:	461a      	mov	r2, r3
 800677e:	68b9      	ldr	r1, [r7, #8]
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	f000 fdfb 	bl	800737c <UART_Start_Receive_IT>
 8006786:	4603      	mov	r3, r0
 8006788:	e000      	b.n	800678c <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 800678a:	2302      	movs	r3, #2
  }
}
 800678c:	4618      	mov	r0, r3
 800678e:	3710      	adds	r7, #16
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b088      	sub	sp, #32
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80067b4:	69fa      	ldr	r2, [r7, #28]
 80067b6:	f640 030f 	movw	r3, #2063	; 0x80f
 80067ba:	4013      	ands	r3, r2
 80067bc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d113      	bne.n	80067ec <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	f003 0320 	and.w	r3, r3, #32
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00e      	beq.n	80067ec <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	f003 0320 	and.w	r3, r3, #32
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d009      	beq.n	80067ec <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 81cc 	beq.w	8006b7a <HAL_UART_IRQHandler+0x3e6>
      {
        huart->RxISR(huart);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	4798      	blx	r3
      }
      return;
 80067ea:	e1c6      	b.n	8006b7a <HAL_UART_IRQHandler+0x3e6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	f000 80e3 	beq.w	80069ba <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d105      	bne.n	800680a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80067fe:	69ba      	ldr	r2, [r7, #24]
 8006800:	4ba5      	ldr	r3, [pc, #660]	; (8006a98 <HAL_UART_IRQHandler+0x304>)
 8006802:	4013      	ands	r3, r2
 8006804:	2b00      	cmp	r3, #0
 8006806:	f000 80d8 	beq.w	80069ba <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	f003 0301 	and.w	r3, r3, #1
 8006810:	2b00      	cmp	r3, #0
 8006812:	d010      	beq.n	8006836 <HAL_UART_IRQHandler+0xa2>
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800681a:	2b00      	cmp	r3, #0
 800681c:	d00b      	beq.n	8006836 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2201      	movs	r2, #1
 8006824:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800682c:	f043 0201 	orr.w	r2, r3, #1
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	f003 0302 	and.w	r3, r3, #2
 800683c:	2b00      	cmp	r3, #0
 800683e:	d010      	beq.n	8006862 <HAL_UART_IRQHandler+0xce>
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00b      	beq.n	8006862 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2202      	movs	r2, #2
 8006850:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006858:	f043 0204 	orr.w	r2, r3, #4
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	f003 0304 	and.w	r3, r3, #4
 8006868:	2b00      	cmp	r3, #0
 800686a:	d010      	beq.n	800688e <HAL_UART_IRQHandler+0xfa>
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	f003 0301 	and.w	r3, r3, #1
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00b      	beq.n	800688e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2204      	movs	r2, #4
 800687c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006884:	f043 0202 	orr.w	r2, r3, #2
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	f003 0308 	and.w	r3, r3, #8
 8006894:	2b00      	cmp	r3, #0
 8006896:	d015      	beq.n	80068c4 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	f003 0320 	and.w	r3, r3, #32
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d104      	bne.n	80068ac <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d00b      	beq.n	80068c4 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2208      	movs	r2, #8
 80068b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068ba:	f043 0208 	orr.w	r2, r3, #8
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d011      	beq.n	80068f2 <HAL_UART_IRQHandler+0x15e>
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d00c      	beq.n	80068f2 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068e8:	f043 0220 	orr.w	r2, r3, #32
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	f000 8140 	beq.w	8006b7e <HAL_UART_IRQHandler+0x3ea>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	f003 0320 	and.w	r3, r3, #32
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00c      	beq.n	8006922 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	f003 0320 	and.w	r3, r3, #32
 800690e:	2b00      	cmp	r3, #0
 8006910:	d007      	beq.n	8006922 <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006916:	2b00      	cmp	r3, #0
 8006918:	d003      	beq.n	8006922 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006928:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006934:	2b40      	cmp	r3, #64	; 0x40
 8006936:	d004      	beq.n	8006942 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800693e:	2b00      	cmp	r3, #0
 8006940:	d031      	beq.n	80069a6 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 fda2 	bl	800748c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006952:	2b40      	cmp	r3, #64	; 0x40
 8006954:	d123      	bne.n	800699e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	689a      	ldr	r2, [r3, #8]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006964:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800696a:	2b00      	cmp	r3, #0
 800696c:	d013      	beq.n	8006996 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006972:	4a4a      	ldr	r2, [pc, #296]	; (8006a9c <HAL_UART_IRQHandler+0x308>)
 8006974:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800697a:	4618      	mov	r0, r3
 800697c:	f7fb fd5b 	bl	8002436 <HAL_DMA_Abort_IT>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d017      	beq.n	80069b6 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800698a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006990:	4610      	mov	r0, r2
 8006992:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006994:	e00f      	b.n	80069b6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 f906 	bl	8006ba8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800699c:	e00b      	b.n	80069b6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 f902 	bl	8006ba8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069a4:	e007      	b.n	80069b6 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 f8fe 	bl	8006ba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80069b4:	e0e3      	b.n	8006b7e <HAL_UART_IRQHandler+0x3ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069b6:	bf00      	nop
    return;
 80069b8:	e0e1      	b.n	8006b7e <HAL_UART_IRQHandler+0x3ea>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069be:	2b01      	cmp	r3, #1
 80069c0:	f040 80a7 	bne.w	8006b12 <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	f003 0310 	and.w	r3, r3, #16
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f000 80a1 	beq.w	8006b12 <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	f003 0310 	and.w	r3, r3, #16
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	f000 809b 	beq.w	8006b12 <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2210      	movs	r2, #16
 80069e2:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ee:	2b40      	cmp	r3, #64	; 0x40
 80069f0:	d156      	bne.n	8006aa0 <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80069fc:	893b      	ldrh	r3, [r7, #8]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	f000 80bf 	beq.w	8006b82 <HAL_UART_IRQHandler+0x3ee>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006a0a:	893a      	ldrh	r2, [r7, #8]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	f080 80b8 	bcs.w	8006b82 <HAL_UART_IRQHandler+0x3ee>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	893a      	ldrh	r2, [r7, #8]
 8006a16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a1e:	69db      	ldr	r3, [r3, #28]
 8006a20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a24:	d02a      	beq.n	8006a7c <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a34:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	689a      	ldr	r2, [r3, #8]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f022 0201 	bic.w	r2, r2, #1
 8006a44:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	689a      	ldr	r2, [r3, #8]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a54:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2220      	movs	r2, #32
 8006a5a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f022 0210 	bic.w	r2, r2, #16
 8006a70:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a76:	4618      	mov	r0, r3
 8006a78:	f7fb fc6d 	bl	8002356 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	4619      	mov	r1, r3
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 f893 	bl	8006bbc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a96:	e074      	b.n	8006b82 <HAL_UART_IRQHandler+0x3ee>
 8006a98:	04000120 	.word	0x04000120
 8006a9c:	080074eb 	.word	0x080074eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	1ad3      	subs	r3, r2, r3
 8006ab0:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d063      	beq.n	8006b86 <HAL_UART_IRQHandler+0x3f2>
          && (nb_rx_data > 0U))
 8006abe:	897b      	ldrh	r3, [r7, #10]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d060      	beq.n	8006b86 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006ad2:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	689a      	ldr	r2, [r3, #8]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f022 0201 	bic.w	r2, r2, #1
 8006ae2:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2220      	movs	r2, #32
 8006ae8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f022 0210 	bic.w	r2, r2, #16
 8006b04:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b06:	897b      	ldrh	r3, [r7, #10]
 8006b08:	4619      	mov	r1, r3
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f856 	bl	8006bbc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b10:	e039      	b.n	8006b86 <HAL_UART_IRQHandler+0x3f2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d00d      	beq.n	8006b38 <HAL_UART_IRQHandler+0x3a4>
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d008      	beq.n	8006b38 <HAL_UART_IRQHandler+0x3a4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006b2e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 f84f 	bl	8006bd4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b36:	e029      	b.n	8006b8c <HAL_UART_IRQHandler+0x3f8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00d      	beq.n	8006b5e <HAL_UART_IRQHandler+0x3ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d008      	beq.n	8006b5e <HAL_UART_IRQHandler+0x3ca>
  {
    if (huart->TxISR != NULL)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d01a      	beq.n	8006b8a <HAL_UART_IRQHandler+0x3f6>
    {
      huart->TxISR(huart);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	4798      	blx	r3
    }
    return;
 8006b5c:	e015      	b.n	8006b8a <HAL_UART_IRQHandler+0x3f6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d011      	beq.n	8006b8c <HAL_UART_IRQHandler+0x3f8>
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00c      	beq.n	8006b8c <HAL_UART_IRQHandler+0x3f8>
  {
    UART_EndTransmit_IT(huart);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f000 fccf 	bl	8007516 <UART_EndTransmit_IT>
    return;
 8006b78:	e008      	b.n	8006b8c <HAL_UART_IRQHandler+0x3f8>
      return;
 8006b7a:	bf00      	nop
 8006b7c:	e006      	b.n	8006b8c <HAL_UART_IRQHandler+0x3f8>
    return;
 8006b7e:	bf00      	nop
 8006b80:	e004      	b.n	8006b8c <HAL_UART_IRQHandler+0x3f8>
      return;
 8006b82:	bf00      	nop
 8006b84:	e002      	b.n	8006b8c <HAL_UART_IRQHandler+0x3f8>
      return;
 8006b86:	bf00      	nop
 8006b88:	e000      	b.n	8006b8c <HAL_UART_IRQHandler+0x3f8>
    return;
 8006b8a:	bf00      	nop
  }

}
 8006b8c:	3720      	adds	r7, #32
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop

08006b94 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006b9c:	bf00      	nop
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006bb0:	bf00      	nop
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006bc8:	bf00      	nop
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006bdc:	bf00      	nop
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b088      	sub	sp, #32
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	689a      	ldr	r2, [r3, #8]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	431a      	orrs	r2, r3
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	695b      	ldr	r3, [r3, #20]
 8006c02:	431a      	orrs	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	69db      	ldr	r3, [r3, #28]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	4ba7      	ldr	r3, [pc, #668]	; (8006eb0 <UART_SetConfig+0x2c8>)
 8006c14:	4013      	ands	r3, r2
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	6812      	ldr	r2, [r2, #0]
 8006c1a:	6979      	ldr	r1, [r7, #20]
 8006c1c:	430b      	orrs	r3, r1
 8006c1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	68da      	ldr	r2, [r3, #12]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	430a      	orrs	r2, r1
 8006c34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	699b      	ldr	r3, [r3, #24]
 8006c3a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a1b      	ldr	r3, [r3, #32]
 8006c40:	697a      	ldr	r2, [r7, #20]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	697a      	ldr	r2, [r7, #20]
 8006c56:	430a      	orrs	r2, r1
 8006c58:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a95      	ldr	r2, [pc, #596]	; (8006eb4 <UART_SetConfig+0x2cc>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d120      	bne.n	8006ca6 <UART_SetConfig+0xbe>
 8006c64:	4b94      	ldr	r3, [pc, #592]	; (8006eb8 <UART_SetConfig+0x2d0>)
 8006c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c6a:	f003 0303 	and.w	r3, r3, #3
 8006c6e:	2b03      	cmp	r3, #3
 8006c70:	d816      	bhi.n	8006ca0 <UART_SetConfig+0xb8>
 8006c72:	a201      	add	r2, pc, #4	; (adr r2, 8006c78 <UART_SetConfig+0x90>)
 8006c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c78:	08006c89 	.word	0x08006c89
 8006c7c:	08006c95 	.word	0x08006c95
 8006c80:	08006c8f 	.word	0x08006c8f
 8006c84:	08006c9b 	.word	0x08006c9b
 8006c88:	2301      	movs	r3, #1
 8006c8a:	77fb      	strb	r3, [r7, #31]
 8006c8c:	e14f      	b.n	8006f2e <UART_SetConfig+0x346>
 8006c8e:	2302      	movs	r3, #2
 8006c90:	77fb      	strb	r3, [r7, #31]
 8006c92:	e14c      	b.n	8006f2e <UART_SetConfig+0x346>
 8006c94:	2304      	movs	r3, #4
 8006c96:	77fb      	strb	r3, [r7, #31]
 8006c98:	e149      	b.n	8006f2e <UART_SetConfig+0x346>
 8006c9a:	2308      	movs	r3, #8
 8006c9c:	77fb      	strb	r3, [r7, #31]
 8006c9e:	e146      	b.n	8006f2e <UART_SetConfig+0x346>
 8006ca0:	2310      	movs	r3, #16
 8006ca2:	77fb      	strb	r3, [r7, #31]
 8006ca4:	e143      	b.n	8006f2e <UART_SetConfig+0x346>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a84      	ldr	r2, [pc, #528]	; (8006ebc <UART_SetConfig+0x2d4>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d132      	bne.n	8006d16 <UART_SetConfig+0x12e>
 8006cb0:	4b81      	ldr	r3, [pc, #516]	; (8006eb8 <UART_SetConfig+0x2d0>)
 8006cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cb6:	f003 030c 	and.w	r3, r3, #12
 8006cba:	2b0c      	cmp	r3, #12
 8006cbc:	d828      	bhi.n	8006d10 <UART_SetConfig+0x128>
 8006cbe:	a201      	add	r2, pc, #4	; (adr r2, 8006cc4 <UART_SetConfig+0xdc>)
 8006cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc4:	08006cf9 	.word	0x08006cf9
 8006cc8:	08006d11 	.word	0x08006d11
 8006ccc:	08006d11 	.word	0x08006d11
 8006cd0:	08006d11 	.word	0x08006d11
 8006cd4:	08006d05 	.word	0x08006d05
 8006cd8:	08006d11 	.word	0x08006d11
 8006cdc:	08006d11 	.word	0x08006d11
 8006ce0:	08006d11 	.word	0x08006d11
 8006ce4:	08006cff 	.word	0x08006cff
 8006ce8:	08006d11 	.word	0x08006d11
 8006cec:	08006d11 	.word	0x08006d11
 8006cf0:	08006d11 	.word	0x08006d11
 8006cf4:	08006d0b 	.word	0x08006d0b
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	77fb      	strb	r3, [r7, #31]
 8006cfc:	e117      	b.n	8006f2e <UART_SetConfig+0x346>
 8006cfe:	2302      	movs	r3, #2
 8006d00:	77fb      	strb	r3, [r7, #31]
 8006d02:	e114      	b.n	8006f2e <UART_SetConfig+0x346>
 8006d04:	2304      	movs	r3, #4
 8006d06:	77fb      	strb	r3, [r7, #31]
 8006d08:	e111      	b.n	8006f2e <UART_SetConfig+0x346>
 8006d0a:	2308      	movs	r3, #8
 8006d0c:	77fb      	strb	r3, [r7, #31]
 8006d0e:	e10e      	b.n	8006f2e <UART_SetConfig+0x346>
 8006d10:	2310      	movs	r3, #16
 8006d12:	77fb      	strb	r3, [r7, #31]
 8006d14:	e10b      	b.n	8006f2e <UART_SetConfig+0x346>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a69      	ldr	r2, [pc, #420]	; (8006ec0 <UART_SetConfig+0x2d8>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d120      	bne.n	8006d62 <UART_SetConfig+0x17a>
 8006d20:	4b65      	ldr	r3, [pc, #404]	; (8006eb8 <UART_SetConfig+0x2d0>)
 8006d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d26:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d2a:	2b30      	cmp	r3, #48	; 0x30
 8006d2c:	d013      	beq.n	8006d56 <UART_SetConfig+0x16e>
 8006d2e:	2b30      	cmp	r3, #48	; 0x30
 8006d30:	d814      	bhi.n	8006d5c <UART_SetConfig+0x174>
 8006d32:	2b20      	cmp	r3, #32
 8006d34:	d009      	beq.n	8006d4a <UART_SetConfig+0x162>
 8006d36:	2b20      	cmp	r3, #32
 8006d38:	d810      	bhi.n	8006d5c <UART_SetConfig+0x174>
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d002      	beq.n	8006d44 <UART_SetConfig+0x15c>
 8006d3e:	2b10      	cmp	r3, #16
 8006d40:	d006      	beq.n	8006d50 <UART_SetConfig+0x168>
 8006d42:	e00b      	b.n	8006d5c <UART_SetConfig+0x174>
 8006d44:	2300      	movs	r3, #0
 8006d46:	77fb      	strb	r3, [r7, #31]
 8006d48:	e0f1      	b.n	8006f2e <UART_SetConfig+0x346>
 8006d4a:	2302      	movs	r3, #2
 8006d4c:	77fb      	strb	r3, [r7, #31]
 8006d4e:	e0ee      	b.n	8006f2e <UART_SetConfig+0x346>
 8006d50:	2304      	movs	r3, #4
 8006d52:	77fb      	strb	r3, [r7, #31]
 8006d54:	e0eb      	b.n	8006f2e <UART_SetConfig+0x346>
 8006d56:	2308      	movs	r3, #8
 8006d58:	77fb      	strb	r3, [r7, #31]
 8006d5a:	e0e8      	b.n	8006f2e <UART_SetConfig+0x346>
 8006d5c:	2310      	movs	r3, #16
 8006d5e:	77fb      	strb	r3, [r7, #31]
 8006d60:	e0e5      	b.n	8006f2e <UART_SetConfig+0x346>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a57      	ldr	r2, [pc, #348]	; (8006ec4 <UART_SetConfig+0x2dc>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d120      	bne.n	8006dae <UART_SetConfig+0x1c6>
 8006d6c:	4b52      	ldr	r3, [pc, #328]	; (8006eb8 <UART_SetConfig+0x2d0>)
 8006d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d72:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d76:	2bc0      	cmp	r3, #192	; 0xc0
 8006d78:	d013      	beq.n	8006da2 <UART_SetConfig+0x1ba>
 8006d7a:	2bc0      	cmp	r3, #192	; 0xc0
 8006d7c:	d814      	bhi.n	8006da8 <UART_SetConfig+0x1c0>
 8006d7e:	2b80      	cmp	r3, #128	; 0x80
 8006d80:	d009      	beq.n	8006d96 <UART_SetConfig+0x1ae>
 8006d82:	2b80      	cmp	r3, #128	; 0x80
 8006d84:	d810      	bhi.n	8006da8 <UART_SetConfig+0x1c0>
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d002      	beq.n	8006d90 <UART_SetConfig+0x1a8>
 8006d8a:	2b40      	cmp	r3, #64	; 0x40
 8006d8c:	d006      	beq.n	8006d9c <UART_SetConfig+0x1b4>
 8006d8e:	e00b      	b.n	8006da8 <UART_SetConfig+0x1c0>
 8006d90:	2300      	movs	r3, #0
 8006d92:	77fb      	strb	r3, [r7, #31]
 8006d94:	e0cb      	b.n	8006f2e <UART_SetConfig+0x346>
 8006d96:	2302      	movs	r3, #2
 8006d98:	77fb      	strb	r3, [r7, #31]
 8006d9a:	e0c8      	b.n	8006f2e <UART_SetConfig+0x346>
 8006d9c:	2304      	movs	r3, #4
 8006d9e:	77fb      	strb	r3, [r7, #31]
 8006da0:	e0c5      	b.n	8006f2e <UART_SetConfig+0x346>
 8006da2:	2308      	movs	r3, #8
 8006da4:	77fb      	strb	r3, [r7, #31]
 8006da6:	e0c2      	b.n	8006f2e <UART_SetConfig+0x346>
 8006da8:	2310      	movs	r3, #16
 8006daa:	77fb      	strb	r3, [r7, #31]
 8006dac:	e0bf      	b.n	8006f2e <UART_SetConfig+0x346>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a45      	ldr	r2, [pc, #276]	; (8006ec8 <UART_SetConfig+0x2e0>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d125      	bne.n	8006e04 <UART_SetConfig+0x21c>
 8006db8:	4b3f      	ldr	r3, [pc, #252]	; (8006eb8 <UART_SetConfig+0x2d0>)
 8006dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006dc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dc6:	d017      	beq.n	8006df8 <UART_SetConfig+0x210>
 8006dc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dcc:	d817      	bhi.n	8006dfe <UART_SetConfig+0x216>
 8006dce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dd2:	d00b      	beq.n	8006dec <UART_SetConfig+0x204>
 8006dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dd8:	d811      	bhi.n	8006dfe <UART_SetConfig+0x216>
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d003      	beq.n	8006de6 <UART_SetConfig+0x1fe>
 8006dde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006de2:	d006      	beq.n	8006df2 <UART_SetConfig+0x20a>
 8006de4:	e00b      	b.n	8006dfe <UART_SetConfig+0x216>
 8006de6:	2300      	movs	r3, #0
 8006de8:	77fb      	strb	r3, [r7, #31]
 8006dea:	e0a0      	b.n	8006f2e <UART_SetConfig+0x346>
 8006dec:	2302      	movs	r3, #2
 8006dee:	77fb      	strb	r3, [r7, #31]
 8006df0:	e09d      	b.n	8006f2e <UART_SetConfig+0x346>
 8006df2:	2304      	movs	r3, #4
 8006df4:	77fb      	strb	r3, [r7, #31]
 8006df6:	e09a      	b.n	8006f2e <UART_SetConfig+0x346>
 8006df8:	2308      	movs	r3, #8
 8006dfa:	77fb      	strb	r3, [r7, #31]
 8006dfc:	e097      	b.n	8006f2e <UART_SetConfig+0x346>
 8006dfe:	2310      	movs	r3, #16
 8006e00:	77fb      	strb	r3, [r7, #31]
 8006e02:	e094      	b.n	8006f2e <UART_SetConfig+0x346>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a30      	ldr	r2, [pc, #192]	; (8006ecc <UART_SetConfig+0x2e4>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d125      	bne.n	8006e5a <UART_SetConfig+0x272>
 8006e0e:	4b2a      	ldr	r3, [pc, #168]	; (8006eb8 <UART_SetConfig+0x2d0>)
 8006e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e1c:	d017      	beq.n	8006e4e <UART_SetConfig+0x266>
 8006e1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e22:	d817      	bhi.n	8006e54 <UART_SetConfig+0x26c>
 8006e24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e28:	d00b      	beq.n	8006e42 <UART_SetConfig+0x25a>
 8006e2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e2e:	d811      	bhi.n	8006e54 <UART_SetConfig+0x26c>
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d003      	beq.n	8006e3c <UART_SetConfig+0x254>
 8006e34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e38:	d006      	beq.n	8006e48 <UART_SetConfig+0x260>
 8006e3a:	e00b      	b.n	8006e54 <UART_SetConfig+0x26c>
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	77fb      	strb	r3, [r7, #31]
 8006e40:	e075      	b.n	8006f2e <UART_SetConfig+0x346>
 8006e42:	2302      	movs	r3, #2
 8006e44:	77fb      	strb	r3, [r7, #31]
 8006e46:	e072      	b.n	8006f2e <UART_SetConfig+0x346>
 8006e48:	2304      	movs	r3, #4
 8006e4a:	77fb      	strb	r3, [r7, #31]
 8006e4c:	e06f      	b.n	8006f2e <UART_SetConfig+0x346>
 8006e4e:	2308      	movs	r3, #8
 8006e50:	77fb      	strb	r3, [r7, #31]
 8006e52:	e06c      	b.n	8006f2e <UART_SetConfig+0x346>
 8006e54:	2310      	movs	r3, #16
 8006e56:	77fb      	strb	r3, [r7, #31]
 8006e58:	e069      	b.n	8006f2e <UART_SetConfig+0x346>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a1c      	ldr	r2, [pc, #112]	; (8006ed0 <UART_SetConfig+0x2e8>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d137      	bne.n	8006ed4 <UART_SetConfig+0x2ec>
 8006e64:	4b14      	ldr	r3, [pc, #80]	; (8006eb8 <UART_SetConfig+0x2d0>)
 8006e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e6a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006e6e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e72:	d017      	beq.n	8006ea4 <UART_SetConfig+0x2bc>
 8006e74:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e78:	d817      	bhi.n	8006eaa <UART_SetConfig+0x2c2>
 8006e7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e7e:	d00b      	beq.n	8006e98 <UART_SetConfig+0x2b0>
 8006e80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e84:	d811      	bhi.n	8006eaa <UART_SetConfig+0x2c2>
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d003      	beq.n	8006e92 <UART_SetConfig+0x2aa>
 8006e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e8e:	d006      	beq.n	8006e9e <UART_SetConfig+0x2b6>
 8006e90:	e00b      	b.n	8006eaa <UART_SetConfig+0x2c2>
 8006e92:	2300      	movs	r3, #0
 8006e94:	77fb      	strb	r3, [r7, #31]
 8006e96:	e04a      	b.n	8006f2e <UART_SetConfig+0x346>
 8006e98:	2302      	movs	r3, #2
 8006e9a:	77fb      	strb	r3, [r7, #31]
 8006e9c:	e047      	b.n	8006f2e <UART_SetConfig+0x346>
 8006e9e:	2304      	movs	r3, #4
 8006ea0:	77fb      	strb	r3, [r7, #31]
 8006ea2:	e044      	b.n	8006f2e <UART_SetConfig+0x346>
 8006ea4:	2308      	movs	r3, #8
 8006ea6:	77fb      	strb	r3, [r7, #31]
 8006ea8:	e041      	b.n	8006f2e <UART_SetConfig+0x346>
 8006eaa:	2310      	movs	r3, #16
 8006eac:	77fb      	strb	r3, [r7, #31]
 8006eae:	e03e      	b.n	8006f2e <UART_SetConfig+0x346>
 8006eb0:	efff69f3 	.word	0xefff69f3
 8006eb4:	40011000 	.word	0x40011000
 8006eb8:	40023800 	.word	0x40023800
 8006ebc:	40004400 	.word	0x40004400
 8006ec0:	40004800 	.word	0x40004800
 8006ec4:	40004c00 	.word	0x40004c00
 8006ec8:	40005000 	.word	0x40005000
 8006ecc:	40011400 	.word	0x40011400
 8006ed0:	40007800 	.word	0x40007800
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a71      	ldr	r2, [pc, #452]	; (80070a0 <UART_SetConfig+0x4b8>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d125      	bne.n	8006f2a <UART_SetConfig+0x342>
 8006ede:	4b71      	ldr	r3, [pc, #452]	; (80070a4 <UART_SetConfig+0x4bc>)
 8006ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ee4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006ee8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006eec:	d017      	beq.n	8006f1e <UART_SetConfig+0x336>
 8006eee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006ef2:	d817      	bhi.n	8006f24 <UART_SetConfig+0x33c>
 8006ef4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ef8:	d00b      	beq.n	8006f12 <UART_SetConfig+0x32a>
 8006efa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006efe:	d811      	bhi.n	8006f24 <UART_SetConfig+0x33c>
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d003      	beq.n	8006f0c <UART_SetConfig+0x324>
 8006f04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f08:	d006      	beq.n	8006f18 <UART_SetConfig+0x330>
 8006f0a:	e00b      	b.n	8006f24 <UART_SetConfig+0x33c>
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	77fb      	strb	r3, [r7, #31]
 8006f10:	e00d      	b.n	8006f2e <UART_SetConfig+0x346>
 8006f12:	2302      	movs	r3, #2
 8006f14:	77fb      	strb	r3, [r7, #31]
 8006f16:	e00a      	b.n	8006f2e <UART_SetConfig+0x346>
 8006f18:	2304      	movs	r3, #4
 8006f1a:	77fb      	strb	r3, [r7, #31]
 8006f1c:	e007      	b.n	8006f2e <UART_SetConfig+0x346>
 8006f1e:	2308      	movs	r3, #8
 8006f20:	77fb      	strb	r3, [r7, #31]
 8006f22:	e004      	b.n	8006f2e <UART_SetConfig+0x346>
 8006f24:	2310      	movs	r3, #16
 8006f26:	77fb      	strb	r3, [r7, #31]
 8006f28:	e001      	b.n	8006f2e <UART_SetConfig+0x346>
 8006f2a:	2310      	movs	r3, #16
 8006f2c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	69db      	ldr	r3, [r3, #28]
 8006f32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f36:	d15b      	bne.n	8006ff0 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8006f38:	7ffb      	ldrb	r3, [r7, #31]
 8006f3a:	2b08      	cmp	r3, #8
 8006f3c:	d827      	bhi.n	8006f8e <UART_SetConfig+0x3a6>
 8006f3e:	a201      	add	r2, pc, #4	; (adr r2, 8006f44 <UART_SetConfig+0x35c>)
 8006f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f44:	08006f69 	.word	0x08006f69
 8006f48:	08006f71 	.word	0x08006f71
 8006f4c:	08006f79 	.word	0x08006f79
 8006f50:	08006f8f 	.word	0x08006f8f
 8006f54:	08006f7f 	.word	0x08006f7f
 8006f58:	08006f8f 	.word	0x08006f8f
 8006f5c:	08006f8f 	.word	0x08006f8f
 8006f60:	08006f8f 	.word	0x08006f8f
 8006f64:	08006f87 	.word	0x08006f87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f68:	f7fd fcf2 	bl	8004950 <HAL_RCC_GetPCLK1Freq>
 8006f6c:	61b8      	str	r0, [r7, #24]
        break;
 8006f6e:	e013      	b.n	8006f98 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f70:	f7fd fd02 	bl	8004978 <HAL_RCC_GetPCLK2Freq>
 8006f74:	61b8      	str	r0, [r7, #24]
        break;
 8006f76:	e00f      	b.n	8006f98 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f78:	4b4b      	ldr	r3, [pc, #300]	; (80070a8 <UART_SetConfig+0x4c0>)
 8006f7a:	61bb      	str	r3, [r7, #24]
        break;
 8006f7c:	e00c      	b.n	8006f98 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f7e:	f7fd fbf9 	bl	8004774 <HAL_RCC_GetSysClockFreq>
 8006f82:	61b8      	str	r0, [r7, #24]
        break;
 8006f84:	e008      	b.n	8006f98 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f8a:	61bb      	str	r3, [r7, #24]
        break;
 8006f8c:	e004      	b.n	8006f98 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	77bb      	strb	r3, [r7, #30]
        break;
 8006f96:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d074      	beq.n	8007088 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	005a      	lsls	r2, r3, #1
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	085b      	lsrs	r3, r3, #1
 8006fa8:	441a      	add	r2, r3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	2b0f      	cmp	r3, #15
 8006fba:	d916      	bls.n	8006fea <UART_SetConfig+0x402>
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fc2:	d212      	bcs.n	8006fea <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	f023 030f 	bic.w	r3, r3, #15
 8006fcc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	085b      	lsrs	r3, r3, #1
 8006fd2:	b29b      	uxth	r3, r3
 8006fd4:	f003 0307 	and.w	r3, r3, #7
 8006fd8:	b29a      	uxth	r2, r3
 8006fda:	89fb      	ldrh	r3, [r7, #14]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	89fa      	ldrh	r2, [r7, #14]
 8006fe6:	60da      	str	r2, [r3, #12]
 8006fe8:	e04e      	b.n	8007088 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	77bb      	strb	r3, [r7, #30]
 8006fee:	e04b      	b.n	8007088 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ff0:	7ffb      	ldrb	r3, [r7, #31]
 8006ff2:	2b08      	cmp	r3, #8
 8006ff4:	d827      	bhi.n	8007046 <UART_SetConfig+0x45e>
 8006ff6:	a201      	add	r2, pc, #4	; (adr r2, 8006ffc <UART_SetConfig+0x414>)
 8006ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ffc:	08007021 	.word	0x08007021
 8007000:	08007029 	.word	0x08007029
 8007004:	08007031 	.word	0x08007031
 8007008:	08007047 	.word	0x08007047
 800700c:	08007037 	.word	0x08007037
 8007010:	08007047 	.word	0x08007047
 8007014:	08007047 	.word	0x08007047
 8007018:	08007047 	.word	0x08007047
 800701c:	0800703f 	.word	0x0800703f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007020:	f7fd fc96 	bl	8004950 <HAL_RCC_GetPCLK1Freq>
 8007024:	61b8      	str	r0, [r7, #24]
        break;
 8007026:	e013      	b.n	8007050 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007028:	f7fd fca6 	bl	8004978 <HAL_RCC_GetPCLK2Freq>
 800702c:	61b8      	str	r0, [r7, #24]
        break;
 800702e:	e00f      	b.n	8007050 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007030:	4b1d      	ldr	r3, [pc, #116]	; (80070a8 <UART_SetConfig+0x4c0>)
 8007032:	61bb      	str	r3, [r7, #24]
        break;
 8007034:	e00c      	b.n	8007050 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007036:	f7fd fb9d 	bl	8004774 <HAL_RCC_GetSysClockFreq>
 800703a:	61b8      	str	r0, [r7, #24]
        break;
 800703c:	e008      	b.n	8007050 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800703e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007042:	61bb      	str	r3, [r7, #24]
        break;
 8007044:	e004      	b.n	8007050 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8007046:	2300      	movs	r3, #0
 8007048:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	77bb      	strb	r3, [r7, #30]
        break;
 800704e:	bf00      	nop
    }

    if (pclk != 0U)
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d018      	beq.n	8007088 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	085a      	lsrs	r2, r3, #1
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	441a      	add	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	fbb2 f3f3 	udiv	r3, r2, r3
 8007068:	b29b      	uxth	r3, r3
 800706a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	2b0f      	cmp	r3, #15
 8007070:	d908      	bls.n	8007084 <UART_SetConfig+0x49c>
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007078:	d204      	bcs.n	8007084 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	693a      	ldr	r2, [r7, #16]
 8007080:	60da      	str	r2, [r3, #12]
 8007082:	e001      	b.n	8007088 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007094:	7fbb      	ldrb	r3, [r7, #30]
}
 8007096:	4618      	mov	r0, r3
 8007098:	3720      	adds	r7, #32
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	40007c00 	.word	0x40007c00
 80070a4:	40023800 	.word	0x40023800
 80070a8:	00f42400 	.word	0x00f42400

080070ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b8:	f003 0301 	and.w	r3, r3, #1
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d00a      	beq.n	80070d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	430a      	orrs	r2, r1
 80070d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070da:	f003 0302 	and.w	r3, r3, #2
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00a      	beq.n	80070f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	430a      	orrs	r2, r1
 80070f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fc:	f003 0304 	and.w	r3, r3, #4
 8007100:	2b00      	cmp	r3, #0
 8007102:	d00a      	beq.n	800711a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	430a      	orrs	r2, r1
 8007118:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711e:	f003 0308 	and.w	r3, r3, #8
 8007122:	2b00      	cmp	r3, #0
 8007124:	d00a      	beq.n	800713c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	430a      	orrs	r2, r1
 800713a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007140:	f003 0310 	and.w	r3, r3, #16
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00a      	beq.n	800715e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	430a      	orrs	r2, r1
 800715c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007162:	f003 0320 	and.w	r3, r3, #32
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00a      	beq.n	8007180 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	430a      	orrs	r2, r1
 800717e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007188:	2b00      	cmp	r3, #0
 800718a:	d01a      	beq.n	80071c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	430a      	orrs	r2, r1
 80071a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80071aa:	d10a      	bne.n	80071c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	430a      	orrs	r2, r1
 80071c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00a      	beq.n	80071e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	430a      	orrs	r2, r1
 80071e2:	605a      	str	r2, [r3, #4]
  }
}
 80071e4:	bf00      	nop
 80071e6:	370c      	adds	r7, #12
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b086      	sub	sp, #24
 80071f4:	af02      	add	r7, sp, #8
 80071f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007200:	f7fa fa9c 	bl	800173c <HAL_GetTick>
 8007204:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 0308 	and.w	r3, r3, #8
 8007210:	2b08      	cmp	r3, #8
 8007212:	d10e      	bne.n	8007232 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007214:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007218:	9300      	str	r3, [sp, #0]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f82d 	bl	8007282 <UART_WaitOnFlagUntilTimeout>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d001      	beq.n	8007232 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800722e:	2303      	movs	r3, #3
 8007230:	e023      	b.n	800727a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 0304 	and.w	r3, r3, #4
 800723c:	2b04      	cmp	r3, #4
 800723e:	d10e      	bne.n	800725e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007240:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007244:	9300      	str	r3, [sp, #0]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 f817 	bl	8007282 <UART_WaitOnFlagUntilTimeout>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d001      	beq.n	800725e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800725a:	2303      	movs	r3, #3
 800725c:	e00d      	b.n	800727a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2220      	movs	r2, #32
 8007262:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2220      	movs	r2, #32
 8007268:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007282:	b580      	push	{r7, lr}
 8007284:	b084      	sub	sp, #16
 8007286:	af00      	add	r7, sp, #0
 8007288:	60f8      	str	r0, [r7, #12]
 800728a:	60b9      	str	r1, [r7, #8]
 800728c:	603b      	str	r3, [r7, #0]
 800728e:	4613      	mov	r3, r2
 8007290:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007292:	e05e      	b.n	8007352 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800729a:	d05a      	beq.n	8007352 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800729c:	f7fa fa4e 	bl	800173c <HAL_GetTick>
 80072a0:	4602      	mov	r2, r0
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	69ba      	ldr	r2, [r7, #24]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	d302      	bcc.n	80072b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d11b      	bne.n	80072ea <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80072c0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	689a      	ldr	r2, [r3, #8]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f022 0201 	bic.w	r2, r2, #1
 80072d0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2220      	movs	r2, #32
 80072d6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2220      	movs	r2, #32
 80072dc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80072e6:	2303      	movs	r3, #3
 80072e8:	e043      	b.n	8007372 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 0304 	and.w	r3, r3, #4
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d02c      	beq.n	8007352 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	69db      	ldr	r3, [r3, #28]
 80072fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007302:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007306:	d124      	bne.n	8007352 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007310:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007320:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	689a      	ldr	r2, [r3, #8]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f022 0201 	bic.w	r2, r2, #1
 8007330:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2220      	movs	r2, #32
 8007336:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2220      	movs	r2, #32
 800733c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2220      	movs	r2, #32
 8007342:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2200      	movs	r2, #0
 800734a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800734e:	2303      	movs	r3, #3
 8007350:	e00f      	b.n	8007372 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	69da      	ldr	r2, [r3, #28]
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	4013      	ands	r3, r2
 800735c:	68ba      	ldr	r2, [r7, #8]
 800735e:	429a      	cmp	r2, r3
 8007360:	bf0c      	ite	eq
 8007362:	2301      	moveq	r3, #1
 8007364:	2300      	movne	r3, #0
 8007366:	b2db      	uxtb	r3, r3
 8007368:	461a      	mov	r2, r3
 800736a:	79fb      	ldrb	r3, [r7, #7]
 800736c:	429a      	cmp	r2, r3
 800736e:	d091      	beq.n	8007294 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
	...

0800737c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800737c:	b480      	push	{r7}
 800737e:	b085      	sub	sp, #20
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	4613      	mov	r3, r2
 8007388:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	68ba      	ldr	r2, [r7, #8]
 800738e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	88fa      	ldrh	r2, [r7, #6]
 8007394:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	88fa      	ldrh	r2, [r7, #6]
 800739c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073ae:	d10e      	bne.n	80073ce <UART_Start_Receive_IT+0x52>
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	691b      	ldr	r3, [r3, #16]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d105      	bne.n	80073c4 <UART_Start_Receive_IT+0x48>
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f240 12ff 	movw	r2, #511	; 0x1ff
 80073be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80073c2:	e02d      	b.n	8007420 <UART_Start_Receive_IT+0xa4>
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	22ff      	movs	r2, #255	; 0xff
 80073c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80073cc:	e028      	b.n	8007420 <UART_Start_Receive_IT+0xa4>
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d10d      	bne.n	80073f2 <UART_Start_Receive_IT+0x76>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d104      	bne.n	80073e8 <UART_Start_Receive_IT+0x6c>
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	22ff      	movs	r2, #255	; 0xff
 80073e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80073e6:	e01b      	b.n	8007420 <UART_Start_Receive_IT+0xa4>
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	227f      	movs	r2, #127	; 0x7f
 80073ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80073f0:	e016      	b.n	8007420 <UART_Start_Receive_IT+0xa4>
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073fa:	d10d      	bne.n	8007418 <UART_Start_Receive_IT+0x9c>
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d104      	bne.n	800740e <UART_Start_Receive_IT+0x92>
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	227f      	movs	r2, #127	; 0x7f
 8007408:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800740c:	e008      	b.n	8007420 <UART_Start_Receive_IT+0xa4>
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	223f      	movs	r2, #63	; 0x3f
 8007412:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007416:	e003      	b.n	8007420 <UART_Start_Receive_IT+0xa4>
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2200      	movs	r2, #0
 800741c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2200      	movs	r2, #0
 8007424:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2222      	movs	r2, #34	; 0x22
 800742c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	689a      	ldr	r2, [r3, #8]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f042 0201 	orr.w	r2, r2, #1
 800743c:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007446:	d107      	bne.n	8007458 <UART_Start_Receive_IT+0xdc>
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d103      	bne.n	8007458 <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	4a0c      	ldr	r2, [pc, #48]	; (8007484 <UART_Start_Receive_IT+0x108>)
 8007454:	665a      	str	r2, [r3, #100]	; 0x64
 8007456:	e002      	b.n	800745e <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	4a0b      	ldr	r2, [pc, #44]	; (8007488 <UART_Start_Receive_IT+0x10c>)
 800745c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8007474:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	3714      	adds	r7, #20
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr
 8007484:	0800761d 	.word	0x0800761d
 8007488:	08007549 	.word	0x08007549

0800748c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80074a2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	689a      	ldr	r2, [r3, #8]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f022 0201 	bic.w	r2, r2, #1
 80074b2:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d107      	bne.n	80074cc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	681a      	ldr	r2, [r3, #0]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f022 0210 	bic.w	r2, r2, #16
 80074ca:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2220      	movs	r2, #32
 80074d0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	665a      	str	r2, [r3, #100]	; 0x64
}
 80074de:	bf00      	nop
 80074e0:	370c      	adds	r7, #12
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr

080074ea <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074ea:	b580      	push	{r7, lr}
 80074ec:	b084      	sub	sp, #16
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2200      	movs	r2, #0
 8007504:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007508:	68f8      	ldr	r0, [r7, #12]
 800750a:	f7ff fb4d 	bl	8006ba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800750e:	bf00      	nop
 8007510:	3710      	adds	r7, #16
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b082      	sub	sp, #8
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800752c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2220      	movs	r2, #32
 8007532:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f7ff fb2a 	bl	8006b94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007540:	bf00      	nop
 8007542:	3708      	adds	r7, #8
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007556:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800755c:	2b22      	cmp	r3, #34	; 0x22
 800755e:	d151      	bne.n	8007604 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007566:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007568:	89bb      	ldrh	r3, [r7, #12]
 800756a:	b2d9      	uxtb	r1, r3
 800756c:	89fb      	ldrh	r3, [r7, #14]
 800756e:	b2da      	uxtb	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007574:	400a      	ands	r2, r1
 8007576:	b2d2      	uxtb	r2, r2
 8007578:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800757e:	1c5a      	adds	r2, r3, #1
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800758a:	b29b      	uxth	r3, r3
 800758c:	3b01      	subs	r3, #1
 800758e:	b29a      	uxth	r2, r3
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800759c:	b29b      	uxth	r3, r3
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d138      	bne.n	8007614 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80075b0:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	689a      	ldr	r2, [r3, #8]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f022 0201 	bic.w	r2, r2, #1
 80075c0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2220      	movs	r2, #32
 80075c6:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d10f      	bne.n	80075f6 <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f022 0210 	bic.w	r2, r2, #16
 80075e4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80075ec:	4619      	mov	r1, r3
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f7ff fae4 	bl	8006bbc <HAL_UARTEx_RxEventCallback>
 80075f4:	e002      	b.n	80075fc <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f7f9 fb42 	bl	8000c80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007602:	e007      	b.n	8007614 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	699a      	ldr	r2, [r3, #24]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f042 0208 	orr.w	r2, r2, #8
 8007612:	619a      	str	r2, [r3, #24]
}
 8007614:	bf00      	nop
 8007616:	3710      	adds	r7, #16
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800762a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007630:	2b22      	cmp	r3, #34	; 0x22
 8007632:	d151      	bne.n	80076d8 <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007640:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8007642:	89ba      	ldrh	r2, [r7, #12]
 8007644:	89fb      	ldrh	r3, [r7, #14]
 8007646:	4013      	ands	r3, r2
 8007648:	b29a      	uxth	r2, r3
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007652:	1c9a      	adds	r2, r3, #2
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800765e:	b29b      	uxth	r3, r3
 8007660:	3b01      	subs	r3, #1
 8007662:	b29a      	uxth	r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007670:	b29b      	uxth	r3, r3
 8007672:	2b00      	cmp	r3, #0
 8007674:	d138      	bne.n	80076e8 <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007684:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	689a      	ldr	r2, [r3, #8]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f022 0201 	bic.w	r2, r2, #1
 8007694:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2220      	movs	r2, #32
 800769a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d10f      	bne.n	80076ca <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f022 0210 	bic.w	r2, r2, #16
 80076b8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80076c0:	4619      	mov	r1, r3
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f7ff fa7a 	bl	8006bbc <HAL_UARTEx_RxEventCallback>
 80076c8:	e002      	b.n	80076d0 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f7f9 fad8 	bl	8000c80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076d6:	e007      	b.n	80076e8 <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	699a      	ldr	r2, [r3, #24]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f042 0208 	orr.w	r2, r2, #8
 80076e6:	619a      	str	r2, [r3, #24]
}
 80076e8:	bf00      	nop
 80076ea:	3710      	adds	r7, #16
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80076f0:	b084      	sub	sp, #16
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b084      	sub	sp, #16
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
 80076fa:	f107 001c 	add.w	r0, r7, #28
 80076fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007704:	2b01      	cmp	r3, #1
 8007706:	d120      	bne.n	800774a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800770c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	68da      	ldr	r2, [r3, #12]
 8007718:	4b20      	ldr	r3, [pc, #128]	; (800779c <USB_CoreInit+0xac>)
 800771a:	4013      	ands	r3, r2
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800772c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800772e:	2b01      	cmp	r3, #1
 8007730:	d105      	bne.n	800773e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 fa5a 	bl	8007bf8 <USB_CoreReset>
 8007744:	4603      	mov	r3, r0
 8007746:	73fb      	strb	r3, [r7, #15]
 8007748:	e010      	b.n	800776c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 fa4e 	bl	8007bf8 <USB_CoreReset>
 800775c:	4603      	mov	r3, r0
 800775e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007764:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800776c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800776e:	2b01      	cmp	r3, #1
 8007770:	d10b      	bne.n	800778a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	f043 0206 	orr.w	r2, r3, #6
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	f043 0220 	orr.w	r2, r3, #32
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800778a:	7bfb      	ldrb	r3, [r7, #15]
}
 800778c:	4618      	mov	r0, r3
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007796:	b004      	add	sp, #16
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	ffbdffbf 	.word	0xffbdffbf

080077a0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	f023 0201 	bic.w	r2, r3, #1
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	370c      	adds	r7, #12
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr

080077c2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b082      	sub	sp, #8
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
 80077ca:	460b      	mov	r3, r1
 80077cc:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80077da:	78fb      	ldrb	r3, [r7, #3]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d106      	bne.n	80077ee <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	60da      	str	r2, [r3, #12]
 80077ec:	e00b      	b.n	8007806 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80077ee:	78fb      	ldrb	r3, [r7, #3]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d106      	bne.n	8007802 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	60da      	str	r2, [r3, #12]
 8007800:	e001      	b.n	8007806 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007802:	2301      	movs	r3, #1
 8007804:	e003      	b.n	800780e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007806:	2032      	movs	r0, #50	; 0x32
 8007808:	f7f9 ffa4 	bl	8001754 <HAL_Delay>

  return HAL_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3708      	adds	r7, #8
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
	...

08007818 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007818:	b084      	sub	sp, #16
 800781a:	b580      	push	{r7, lr}
 800781c:	b086      	sub	sp, #24
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
 8007822:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007826:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800782a:	2300      	movs	r3, #0
 800782c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007832:	2300      	movs	r3, #0
 8007834:	613b      	str	r3, [r7, #16]
 8007836:	e009      	b.n	800784c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	3340      	adds	r3, #64	; 0x40
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	4413      	add	r3, r2
 8007842:	2200      	movs	r2, #0
 8007844:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	3301      	adds	r3, #1
 800784a:	613b      	str	r3, [r7, #16]
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	2b0e      	cmp	r3, #14
 8007850:	d9f2      	bls.n	8007838 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007854:	2b00      	cmp	r3, #0
 8007856:	d11c      	bne.n	8007892 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	68fa      	ldr	r2, [r7, #12]
 8007862:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007866:	f043 0302 	orr.w	r3, r3, #2
 800786a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007870:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	601a      	str	r2, [r3, #0]
 8007890:	e005      	b.n	800789e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007896:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80078a4:	461a      	mov	r2, r3
 80078a6:	2300      	movs	r3, #0
 80078a8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078b0:	4619      	mov	r1, r3
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078b8:	461a      	mov	r2, r3
 80078ba:	680b      	ldr	r3, [r1, #0]
 80078bc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80078be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d10c      	bne.n	80078de <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80078c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d104      	bne.n	80078d4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80078ca:	2100      	movs	r1, #0
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 f959 	bl	8007b84 <USB_SetDevSpeed>
 80078d2:	e018      	b.n	8007906 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80078d4:	2101      	movs	r1, #1
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 f954 	bl	8007b84 <USB_SetDevSpeed>
 80078dc:	e013      	b.n	8007906 <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80078de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e0:	2b03      	cmp	r3, #3
 80078e2:	d10c      	bne.n	80078fe <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80078e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d104      	bne.n	80078f4 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80078ea:	2100      	movs	r1, #0
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 f949 	bl	8007b84 <USB_SetDevSpeed>
 80078f2:	e008      	b.n	8007906 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80078f4:	2101      	movs	r1, #1
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 f944 	bl	8007b84 <USB_SetDevSpeed>
 80078fc:	e003      	b.n	8007906 <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80078fe:	2103      	movs	r1, #3
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 f93f 	bl	8007b84 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007906:	2110      	movs	r1, #16
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 f8f3 	bl	8007af4 <USB_FlushTxFifo>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d001      	beq.n	8007918 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 f911 	bl	8007b40 <USB_FlushRxFifo>
 800791e:	4603      	mov	r3, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	d001      	beq.n	8007928 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800792e:	461a      	mov	r2, r3
 8007930:	2300      	movs	r3, #0
 8007932:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800793a:	461a      	mov	r2, r3
 800793c:	2300      	movs	r3, #0
 800793e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007946:	461a      	mov	r2, r3
 8007948:	2300      	movs	r3, #0
 800794a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800794c:	2300      	movs	r3, #0
 800794e:	613b      	str	r3, [r7, #16]
 8007950:	e043      	b.n	80079da <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	015a      	lsls	r2, r3, #5
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	4413      	add	r3, r2
 800795a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007964:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007968:	d118      	bne.n	800799c <USB_DevInit+0x184>
    {
      if (i == 0U)
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d10a      	bne.n	8007986 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	015a      	lsls	r2, r3, #5
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	4413      	add	r3, r2
 8007978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800797c:	461a      	mov	r2, r3
 800797e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007982:	6013      	str	r3, [r2, #0]
 8007984:	e013      	b.n	80079ae <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	015a      	lsls	r2, r3, #5
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	4413      	add	r3, r2
 800798e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007992:	461a      	mov	r2, r3
 8007994:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007998:	6013      	str	r3, [r2, #0]
 800799a:	e008      	b.n	80079ae <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	015a      	lsls	r2, r3, #5
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	4413      	add	r3, r2
 80079a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079a8:	461a      	mov	r2, r3
 80079aa:	2300      	movs	r3, #0
 80079ac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	015a      	lsls	r2, r3, #5
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	4413      	add	r3, r2
 80079b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079ba:	461a      	mov	r2, r3
 80079bc:	2300      	movs	r3, #0
 80079be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	015a      	lsls	r2, r3, #5
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	4413      	add	r3, r2
 80079c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079cc:	461a      	mov	r2, r3
 80079ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80079d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	3301      	adds	r3, #1
 80079d8:	613b      	str	r3, [r7, #16]
 80079da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079dc:	693a      	ldr	r2, [r7, #16]
 80079de:	429a      	cmp	r2, r3
 80079e0:	d3b7      	bcc.n	8007952 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079e2:	2300      	movs	r3, #0
 80079e4:	613b      	str	r3, [r7, #16]
 80079e6:	e043      	b.n	8007a70 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	015a      	lsls	r2, r3, #5
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	4413      	add	r3, r2
 80079f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079fe:	d118      	bne.n	8007a32 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d10a      	bne.n	8007a1c <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	015a      	lsls	r2, r3, #5
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a12:	461a      	mov	r2, r3
 8007a14:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007a18:	6013      	str	r3, [r2, #0]
 8007a1a:	e013      	b.n	8007a44 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	015a      	lsls	r2, r3, #5
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	4413      	add	r3, r2
 8007a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a28:	461a      	mov	r2, r3
 8007a2a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007a2e:	6013      	str	r3, [r2, #0]
 8007a30:	e008      	b.n	8007a44 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	015a      	lsls	r2, r3, #5
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	4413      	add	r3, r2
 8007a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a3e:	461a      	mov	r2, r3
 8007a40:	2300      	movs	r3, #0
 8007a42:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	015a      	lsls	r2, r3, #5
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a50:	461a      	mov	r2, r3
 8007a52:	2300      	movs	r3, #0
 8007a54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007a56:	693b      	ldr	r3, [r7, #16]
 8007a58:	015a      	lsls	r2, r3, #5
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a62:	461a      	mov	r2, r3
 8007a64:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a68:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	613b      	str	r3, [r7, #16]
 8007a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a72:	693a      	ldr	r2, [r7, #16]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d3b7      	bcc.n	80079e8 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a7e:	691b      	ldr	r3, [r3, #16]
 8007a80:	68fa      	ldr	r2, [r7, #12]
 8007a82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a8a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007a98:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d105      	bne.n	8007aac <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	699b      	ldr	r3, [r3, #24]
 8007aa4:	f043 0210 	orr.w	r2, r3, #16
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	699a      	ldr	r2, [r3, #24]
 8007ab0:	4b0e      	ldr	r3, [pc, #56]	; (8007aec <USB_DevInit+0x2d4>)
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d005      	beq.n	8007aca <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	699b      	ldr	r3, [r3, #24]
 8007ac2:	f043 0208 	orr.w	r2, r3, #8
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d105      	bne.n	8007adc <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	699a      	ldr	r2, [r3, #24]
 8007ad4:	4b06      	ldr	r3, [pc, #24]	; (8007af0 <USB_DevInit+0x2d8>)
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3718      	adds	r7, #24
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ae8:	b004      	add	sp, #16
 8007aea:	4770      	bx	lr
 8007aec:	803c3800 	.word	0x803c3800
 8007af0:	40000004 	.word	0x40000004

08007af4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b085      	sub	sp, #20
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007afe:	2300      	movs	r3, #0
 8007b00:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	019b      	lsls	r3, r3, #6
 8007b06:	f043 0220 	orr.w	r2, r3, #32
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	3301      	adds	r3, #1
 8007b12:	60fb      	str	r3, [r7, #12]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	4a09      	ldr	r2, [pc, #36]	; (8007b3c <USB_FlushTxFifo+0x48>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d901      	bls.n	8007b20 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007b1c:	2303      	movs	r3, #3
 8007b1e:	e006      	b.n	8007b2e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	f003 0320 	and.w	r3, r3, #32
 8007b28:	2b20      	cmp	r3, #32
 8007b2a:	d0f0      	beq.n	8007b0e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3714      	adds	r7, #20
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop
 8007b3c:	00030d40 	.word	0x00030d40

08007b40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b085      	sub	sp, #20
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2210      	movs	r2, #16
 8007b50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	3301      	adds	r3, #1
 8007b56:	60fb      	str	r3, [r7, #12]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	4a09      	ldr	r2, [pc, #36]	; (8007b80 <USB_FlushRxFifo+0x40>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d901      	bls.n	8007b64 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007b60:	2303      	movs	r3, #3
 8007b62:	e006      	b.n	8007b72 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	f003 0310 	and.w	r3, r3, #16
 8007b6c:	2b10      	cmp	r3, #16
 8007b6e:	d0f0      	beq.n	8007b52 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3714      	adds	r7, #20
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr
 8007b7e:	bf00      	nop
 8007b80:	00030d40 	.word	0x00030d40

08007b84 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	78fb      	ldrb	r3, [r7, #3]
 8007b9e:	68f9      	ldr	r1, [r7, #12]
 8007ba0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3714      	adds	r7, #20
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr

08007bb6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007bb6:	b480      	push	{r7}
 8007bb8:	b085      	sub	sp, #20
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007bd0:	f023 0303 	bic.w	r3, r3, #3
 8007bd4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007be4:	f043 0302 	orr.w	r3, r3, #2
 8007be8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3714      	adds	r7, #20
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b085      	sub	sp, #20
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007c00:	2300      	movs	r3, #0
 8007c02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	3301      	adds	r3, #1
 8007c08:	60fb      	str	r3, [r7, #12]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	4a13      	ldr	r2, [pc, #76]	; (8007c5c <USB_CoreReset+0x64>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d901      	bls.n	8007c16 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007c12:	2303      	movs	r3, #3
 8007c14:	e01b      	b.n	8007c4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	daf2      	bge.n	8007c04 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	f043 0201 	orr.w	r2, r3, #1
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	3301      	adds	r3, #1
 8007c32:	60fb      	str	r3, [r7, #12]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	4a09      	ldr	r2, [pc, #36]	; (8007c5c <USB_CoreReset+0x64>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d901      	bls.n	8007c40 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007c3c:	2303      	movs	r3, #3
 8007c3e:	e006      	b.n	8007c4e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	691b      	ldr	r3, [r3, #16]
 8007c44:	f003 0301 	and.w	r3, r3, #1
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d0f0      	beq.n	8007c2e <USB_CoreReset+0x36>

  return HAL_OK;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3714      	adds	r7, #20
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop
 8007c5c:	00030d40 	.word	0x00030d40

08007c60 <arm_pid_init_f32>:
 8007c60:	ed90 7a08 	vldr	s14, [r0, #32]
 8007c64:	edd0 7a06 	vldr	s15, [r0, #24]
 8007c68:	ed90 6a07 	vldr	s12, [r0, #28]
 8007c6c:	eef1 6a67 	vneg.f32	s13, s15
 8007c70:	ed80 7a02 	vstr	s14, [r0, #8]
 8007c74:	ee77 7a86 	vadd.f32	s15, s15, s12
 8007c78:	ee37 6a07 	vadd.f32	s12, s14, s14
 8007c7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007c80:	ee36 7ac6 	vsub.f32	s14, s13, s12
 8007c84:	edc0 7a00 	vstr	s15, [r0]
 8007c88:	ed80 7a01 	vstr	s14, [r0, #4]
 8007c8c:	b901      	cbnz	r1, 8007c90 <arm_pid_init_f32+0x30>
 8007c8e:	4770      	bx	lr
 8007c90:	2300      	movs	r3, #0
 8007c92:	60c3      	str	r3, [r0, #12]
 8007c94:	6103      	str	r3, [r0, #16]
 8007c96:	6143      	str	r3, [r0, #20]
 8007c98:	4770      	bx	lr
 8007c9a:	bf00      	nop

08007c9c <__errno>:
 8007c9c:	4b01      	ldr	r3, [pc, #4]	; (8007ca4 <__errno+0x8>)
 8007c9e:	6818      	ldr	r0, [r3, #0]
 8007ca0:	4770      	bx	lr
 8007ca2:	bf00      	nop
 8007ca4:	2000001c 	.word	0x2000001c

08007ca8 <__libc_init_array>:
 8007ca8:	b570      	push	{r4, r5, r6, lr}
 8007caa:	4d0d      	ldr	r5, [pc, #52]	; (8007ce0 <__libc_init_array+0x38>)
 8007cac:	4c0d      	ldr	r4, [pc, #52]	; (8007ce4 <__libc_init_array+0x3c>)
 8007cae:	1b64      	subs	r4, r4, r5
 8007cb0:	10a4      	asrs	r4, r4, #2
 8007cb2:	2600      	movs	r6, #0
 8007cb4:	42a6      	cmp	r6, r4
 8007cb6:	d109      	bne.n	8007ccc <__libc_init_array+0x24>
 8007cb8:	4d0b      	ldr	r5, [pc, #44]	; (8007ce8 <__libc_init_array+0x40>)
 8007cba:	4c0c      	ldr	r4, [pc, #48]	; (8007cec <__libc_init_array+0x44>)
 8007cbc:	f000 fc4e 	bl	800855c <_init>
 8007cc0:	1b64      	subs	r4, r4, r5
 8007cc2:	10a4      	asrs	r4, r4, #2
 8007cc4:	2600      	movs	r6, #0
 8007cc6:	42a6      	cmp	r6, r4
 8007cc8:	d105      	bne.n	8007cd6 <__libc_init_array+0x2e>
 8007cca:	bd70      	pop	{r4, r5, r6, pc}
 8007ccc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cd0:	4798      	blx	r3
 8007cd2:	3601      	adds	r6, #1
 8007cd4:	e7ee      	b.n	8007cb4 <__libc_init_array+0xc>
 8007cd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cda:	4798      	blx	r3
 8007cdc:	3601      	adds	r6, #1
 8007cde:	e7f2      	b.n	8007cc6 <__libc_init_array+0x1e>
 8007ce0:	080085f8 	.word	0x080085f8
 8007ce4:	080085f8 	.word	0x080085f8
 8007ce8:	080085f8 	.word	0x080085f8
 8007cec:	080085fc 	.word	0x080085fc

08007cf0 <memset>:
 8007cf0:	4402      	add	r2, r0
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d100      	bne.n	8007cfa <memset+0xa>
 8007cf8:	4770      	bx	lr
 8007cfa:	f803 1b01 	strb.w	r1, [r3], #1
 8007cfe:	e7f9      	b.n	8007cf4 <memset+0x4>

08007d00 <siprintf>:
 8007d00:	b40e      	push	{r1, r2, r3}
 8007d02:	b500      	push	{lr}
 8007d04:	b09c      	sub	sp, #112	; 0x70
 8007d06:	ab1d      	add	r3, sp, #116	; 0x74
 8007d08:	9002      	str	r0, [sp, #8]
 8007d0a:	9006      	str	r0, [sp, #24]
 8007d0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007d10:	4809      	ldr	r0, [pc, #36]	; (8007d38 <siprintf+0x38>)
 8007d12:	9107      	str	r1, [sp, #28]
 8007d14:	9104      	str	r1, [sp, #16]
 8007d16:	4909      	ldr	r1, [pc, #36]	; (8007d3c <siprintf+0x3c>)
 8007d18:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d1c:	9105      	str	r1, [sp, #20]
 8007d1e:	6800      	ldr	r0, [r0, #0]
 8007d20:	9301      	str	r3, [sp, #4]
 8007d22:	a902      	add	r1, sp, #8
 8007d24:	f000 f868 	bl	8007df8 <_svfiprintf_r>
 8007d28:	9b02      	ldr	r3, [sp, #8]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	701a      	strb	r2, [r3, #0]
 8007d2e:	b01c      	add	sp, #112	; 0x70
 8007d30:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d34:	b003      	add	sp, #12
 8007d36:	4770      	bx	lr
 8007d38:	2000001c 	.word	0x2000001c
 8007d3c:	ffff0208 	.word	0xffff0208

08007d40 <__ssputs_r>:
 8007d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d44:	688e      	ldr	r6, [r1, #8]
 8007d46:	429e      	cmp	r6, r3
 8007d48:	4682      	mov	sl, r0
 8007d4a:	460c      	mov	r4, r1
 8007d4c:	4690      	mov	r8, r2
 8007d4e:	461f      	mov	r7, r3
 8007d50:	d838      	bhi.n	8007dc4 <__ssputs_r+0x84>
 8007d52:	898a      	ldrh	r2, [r1, #12]
 8007d54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007d58:	d032      	beq.n	8007dc0 <__ssputs_r+0x80>
 8007d5a:	6825      	ldr	r5, [r4, #0]
 8007d5c:	6909      	ldr	r1, [r1, #16]
 8007d5e:	eba5 0901 	sub.w	r9, r5, r1
 8007d62:	6965      	ldr	r5, [r4, #20]
 8007d64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	444b      	add	r3, r9
 8007d70:	106d      	asrs	r5, r5, #1
 8007d72:	429d      	cmp	r5, r3
 8007d74:	bf38      	it	cc
 8007d76:	461d      	movcc	r5, r3
 8007d78:	0553      	lsls	r3, r2, #21
 8007d7a:	d531      	bpl.n	8007de0 <__ssputs_r+0xa0>
 8007d7c:	4629      	mov	r1, r5
 8007d7e:	f000 fb47 	bl	8008410 <_malloc_r>
 8007d82:	4606      	mov	r6, r0
 8007d84:	b950      	cbnz	r0, 8007d9c <__ssputs_r+0x5c>
 8007d86:	230c      	movs	r3, #12
 8007d88:	f8ca 3000 	str.w	r3, [sl]
 8007d8c:	89a3      	ldrh	r3, [r4, #12]
 8007d8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d92:	81a3      	strh	r3, [r4, #12]
 8007d94:	f04f 30ff 	mov.w	r0, #4294967295
 8007d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d9c:	6921      	ldr	r1, [r4, #16]
 8007d9e:	464a      	mov	r2, r9
 8007da0:	f000 fabe 	bl	8008320 <memcpy>
 8007da4:	89a3      	ldrh	r3, [r4, #12]
 8007da6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dae:	81a3      	strh	r3, [r4, #12]
 8007db0:	6126      	str	r6, [r4, #16]
 8007db2:	6165      	str	r5, [r4, #20]
 8007db4:	444e      	add	r6, r9
 8007db6:	eba5 0509 	sub.w	r5, r5, r9
 8007dba:	6026      	str	r6, [r4, #0]
 8007dbc:	60a5      	str	r5, [r4, #8]
 8007dbe:	463e      	mov	r6, r7
 8007dc0:	42be      	cmp	r6, r7
 8007dc2:	d900      	bls.n	8007dc6 <__ssputs_r+0x86>
 8007dc4:	463e      	mov	r6, r7
 8007dc6:	4632      	mov	r2, r6
 8007dc8:	6820      	ldr	r0, [r4, #0]
 8007dca:	4641      	mov	r1, r8
 8007dcc:	f000 fab6 	bl	800833c <memmove>
 8007dd0:	68a3      	ldr	r3, [r4, #8]
 8007dd2:	6822      	ldr	r2, [r4, #0]
 8007dd4:	1b9b      	subs	r3, r3, r6
 8007dd6:	4432      	add	r2, r6
 8007dd8:	60a3      	str	r3, [r4, #8]
 8007dda:	6022      	str	r2, [r4, #0]
 8007ddc:	2000      	movs	r0, #0
 8007dde:	e7db      	b.n	8007d98 <__ssputs_r+0x58>
 8007de0:	462a      	mov	r2, r5
 8007de2:	f000 fb6f 	bl	80084c4 <_realloc_r>
 8007de6:	4606      	mov	r6, r0
 8007de8:	2800      	cmp	r0, #0
 8007dea:	d1e1      	bne.n	8007db0 <__ssputs_r+0x70>
 8007dec:	6921      	ldr	r1, [r4, #16]
 8007dee:	4650      	mov	r0, sl
 8007df0:	f000 fabe 	bl	8008370 <_free_r>
 8007df4:	e7c7      	b.n	8007d86 <__ssputs_r+0x46>
	...

08007df8 <_svfiprintf_r>:
 8007df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dfc:	4698      	mov	r8, r3
 8007dfe:	898b      	ldrh	r3, [r1, #12]
 8007e00:	061b      	lsls	r3, r3, #24
 8007e02:	b09d      	sub	sp, #116	; 0x74
 8007e04:	4607      	mov	r7, r0
 8007e06:	460d      	mov	r5, r1
 8007e08:	4614      	mov	r4, r2
 8007e0a:	d50e      	bpl.n	8007e2a <_svfiprintf_r+0x32>
 8007e0c:	690b      	ldr	r3, [r1, #16]
 8007e0e:	b963      	cbnz	r3, 8007e2a <_svfiprintf_r+0x32>
 8007e10:	2140      	movs	r1, #64	; 0x40
 8007e12:	f000 fafd 	bl	8008410 <_malloc_r>
 8007e16:	6028      	str	r0, [r5, #0]
 8007e18:	6128      	str	r0, [r5, #16]
 8007e1a:	b920      	cbnz	r0, 8007e26 <_svfiprintf_r+0x2e>
 8007e1c:	230c      	movs	r3, #12
 8007e1e:	603b      	str	r3, [r7, #0]
 8007e20:	f04f 30ff 	mov.w	r0, #4294967295
 8007e24:	e0d1      	b.n	8007fca <_svfiprintf_r+0x1d2>
 8007e26:	2340      	movs	r3, #64	; 0x40
 8007e28:	616b      	str	r3, [r5, #20]
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	9309      	str	r3, [sp, #36]	; 0x24
 8007e2e:	2320      	movs	r3, #32
 8007e30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e34:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e38:	2330      	movs	r3, #48	; 0x30
 8007e3a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007fe4 <_svfiprintf_r+0x1ec>
 8007e3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e42:	f04f 0901 	mov.w	r9, #1
 8007e46:	4623      	mov	r3, r4
 8007e48:	469a      	mov	sl, r3
 8007e4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e4e:	b10a      	cbz	r2, 8007e54 <_svfiprintf_r+0x5c>
 8007e50:	2a25      	cmp	r2, #37	; 0x25
 8007e52:	d1f9      	bne.n	8007e48 <_svfiprintf_r+0x50>
 8007e54:	ebba 0b04 	subs.w	fp, sl, r4
 8007e58:	d00b      	beq.n	8007e72 <_svfiprintf_r+0x7a>
 8007e5a:	465b      	mov	r3, fp
 8007e5c:	4622      	mov	r2, r4
 8007e5e:	4629      	mov	r1, r5
 8007e60:	4638      	mov	r0, r7
 8007e62:	f7ff ff6d 	bl	8007d40 <__ssputs_r>
 8007e66:	3001      	adds	r0, #1
 8007e68:	f000 80aa 	beq.w	8007fc0 <_svfiprintf_r+0x1c8>
 8007e6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e6e:	445a      	add	r2, fp
 8007e70:	9209      	str	r2, [sp, #36]	; 0x24
 8007e72:	f89a 3000 	ldrb.w	r3, [sl]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	f000 80a2 	beq.w	8007fc0 <_svfiprintf_r+0x1c8>
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8007e82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e86:	f10a 0a01 	add.w	sl, sl, #1
 8007e8a:	9304      	str	r3, [sp, #16]
 8007e8c:	9307      	str	r3, [sp, #28]
 8007e8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e92:	931a      	str	r3, [sp, #104]	; 0x68
 8007e94:	4654      	mov	r4, sl
 8007e96:	2205      	movs	r2, #5
 8007e98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e9c:	4851      	ldr	r0, [pc, #324]	; (8007fe4 <_svfiprintf_r+0x1ec>)
 8007e9e:	f7f8 f9cf 	bl	8000240 <memchr>
 8007ea2:	9a04      	ldr	r2, [sp, #16]
 8007ea4:	b9d8      	cbnz	r0, 8007ede <_svfiprintf_r+0xe6>
 8007ea6:	06d0      	lsls	r0, r2, #27
 8007ea8:	bf44      	itt	mi
 8007eaa:	2320      	movmi	r3, #32
 8007eac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007eb0:	0711      	lsls	r1, r2, #28
 8007eb2:	bf44      	itt	mi
 8007eb4:	232b      	movmi	r3, #43	; 0x2b
 8007eb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007eba:	f89a 3000 	ldrb.w	r3, [sl]
 8007ebe:	2b2a      	cmp	r3, #42	; 0x2a
 8007ec0:	d015      	beq.n	8007eee <_svfiprintf_r+0xf6>
 8007ec2:	9a07      	ldr	r2, [sp, #28]
 8007ec4:	4654      	mov	r4, sl
 8007ec6:	2000      	movs	r0, #0
 8007ec8:	f04f 0c0a 	mov.w	ip, #10
 8007ecc:	4621      	mov	r1, r4
 8007ece:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ed2:	3b30      	subs	r3, #48	; 0x30
 8007ed4:	2b09      	cmp	r3, #9
 8007ed6:	d94e      	bls.n	8007f76 <_svfiprintf_r+0x17e>
 8007ed8:	b1b0      	cbz	r0, 8007f08 <_svfiprintf_r+0x110>
 8007eda:	9207      	str	r2, [sp, #28]
 8007edc:	e014      	b.n	8007f08 <_svfiprintf_r+0x110>
 8007ede:	eba0 0308 	sub.w	r3, r0, r8
 8007ee2:	fa09 f303 	lsl.w	r3, r9, r3
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	9304      	str	r3, [sp, #16]
 8007eea:	46a2      	mov	sl, r4
 8007eec:	e7d2      	b.n	8007e94 <_svfiprintf_r+0x9c>
 8007eee:	9b03      	ldr	r3, [sp, #12]
 8007ef0:	1d19      	adds	r1, r3, #4
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	9103      	str	r1, [sp, #12]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	bfbb      	ittet	lt
 8007efa:	425b      	neglt	r3, r3
 8007efc:	f042 0202 	orrlt.w	r2, r2, #2
 8007f00:	9307      	strge	r3, [sp, #28]
 8007f02:	9307      	strlt	r3, [sp, #28]
 8007f04:	bfb8      	it	lt
 8007f06:	9204      	strlt	r2, [sp, #16]
 8007f08:	7823      	ldrb	r3, [r4, #0]
 8007f0a:	2b2e      	cmp	r3, #46	; 0x2e
 8007f0c:	d10c      	bne.n	8007f28 <_svfiprintf_r+0x130>
 8007f0e:	7863      	ldrb	r3, [r4, #1]
 8007f10:	2b2a      	cmp	r3, #42	; 0x2a
 8007f12:	d135      	bne.n	8007f80 <_svfiprintf_r+0x188>
 8007f14:	9b03      	ldr	r3, [sp, #12]
 8007f16:	1d1a      	adds	r2, r3, #4
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	9203      	str	r2, [sp, #12]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	bfb8      	it	lt
 8007f20:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f24:	3402      	adds	r4, #2
 8007f26:	9305      	str	r3, [sp, #20]
 8007f28:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007ff4 <_svfiprintf_r+0x1fc>
 8007f2c:	7821      	ldrb	r1, [r4, #0]
 8007f2e:	2203      	movs	r2, #3
 8007f30:	4650      	mov	r0, sl
 8007f32:	f7f8 f985 	bl	8000240 <memchr>
 8007f36:	b140      	cbz	r0, 8007f4a <_svfiprintf_r+0x152>
 8007f38:	2340      	movs	r3, #64	; 0x40
 8007f3a:	eba0 000a 	sub.w	r0, r0, sl
 8007f3e:	fa03 f000 	lsl.w	r0, r3, r0
 8007f42:	9b04      	ldr	r3, [sp, #16]
 8007f44:	4303      	orrs	r3, r0
 8007f46:	3401      	adds	r4, #1
 8007f48:	9304      	str	r3, [sp, #16]
 8007f4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f4e:	4826      	ldr	r0, [pc, #152]	; (8007fe8 <_svfiprintf_r+0x1f0>)
 8007f50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f54:	2206      	movs	r2, #6
 8007f56:	f7f8 f973 	bl	8000240 <memchr>
 8007f5a:	2800      	cmp	r0, #0
 8007f5c:	d038      	beq.n	8007fd0 <_svfiprintf_r+0x1d8>
 8007f5e:	4b23      	ldr	r3, [pc, #140]	; (8007fec <_svfiprintf_r+0x1f4>)
 8007f60:	bb1b      	cbnz	r3, 8007faa <_svfiprintf_r+0x1b2>
 8007f62:	9b03      	ldr	r3, [sp, #12]
 8007f64:	3307      	adds	r3, #7
 8007f66:	f023 0307 	bic.w	r3, r3, #7
 8007f6a:	3308      	adds	r3, #8
 8007f6c:	9303      	str	r3, [sp, #12]
 8007f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f70:	4433      	add	r3, r6
 8007f72:	9309      	str	r3, [sp, #36]	; 0x24
 8007f74:	e767      	b.n	8007e46 <_svfiprintf_r+0x4e>
 8007f76:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f7a:	460c      	mov	r4, r1
 8007f7c:	2001      	movs	r0, #1
 8007f7e:	e7a5      	b.n	8007ecc <_svfiprintf_r+0xd4>
 8007f80:	2300      	movs	r3, #0
 8007f82:	3401      	adds	r4, #1
 8007f84:	9305      	str	r3, [sp, #20]
 8007f86:	4619      	mov	r1, r3
 8007f88:	f04f 0c0a 	mov.w	ip, #10
 8007f8c:	4620      	mov	r0, r4
 8007f8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f92:	3a30      	subs	r2, #48	; 0x30
 8007f94:	2a09      	cmp	r2, #9
 8007f96:	d903      	bls.n	8007fa0 <_svfiprintf_r+0x1a8>
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d0c5      	beq.n	8007f28 <_svfiprintf_r+0x130>
 8007f9c:	9105      	str	r1, [sp, #20]
 8007f9e:	e7c3      	b.n	8007f28 <_svfiprintf_r+0x130>
 8007fa0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fa4:	4604      	mov	r4, r0
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e7f0      	b.n	8007f8c <_svfiprintf_r+0x194>
 8007faa:	ab03      	add	r3, sp, #12
 8007fac:	9300      	str	r3, [sp, #0]
 8007fae:	462a      	mov	r2, r5
 8007fb0:	4b0f      	ldr	r3, [pc, #60]	; (8007ff0 <_svfiprintf_r+0x1f8>)
 8007fb2:	a904      	add	r1, sp, #16
 8007fb4:	4638      	mov	r0, r7
 8007fb6:	f3af 8000 	nop.w
 8007fba:	1c42      	adds	r2, r0, #1
 8007fbc:	4606      	mov	r6, r0
 8007fbe:	d1d6      	bne.n	8007f6e <_svfiprintf_r+0x176>
 8007fc0:	89ab      	ldrh	r3, [r5, #12]
 8007fc2:	065b      	lsls	r3, r3, #25
 8007fc4:	f53f af2c 	bmi.w	8007e20 <_svfiprintf_r+0x28>
 8007fc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fca:	b01d      	add	sp, #116	; 0x74
 8007fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fd0:	ab03      	add	r3, sp, #12
 8007fd2:	9300      	str	r3, [sp, #0]
 8007fd4:	462a      	mov	r2, r5
 8007fd6:	4b06      	ldr	r3, [pc, #24]	; (8007ff0 <_svfiprintf_r+0x1f8>)
 8007fd8:	a904      	add	r1, sp, #16
 8007fda:	4638      	mov	r0, r7
 8007fdc:	f000 f87a 	bl	80080d4 <_printf_i>
 8007fe0:	e7eb      	b.n	8007fba <_svfiprintf_r+0x1c2>
 8007fe2:	bf00      	nop
 8007fe4:	080085bc 	.word	0x080085bc
 8007fe8:	080085c6 	.word	0x080085c6
 8007fec:	00000000 	.word	0x00000000
 8007ff0:	08007d41 	.word	0x08007d41
 8007ff4:	080085c2 	.word	0x080085c2

08007ff8 <_printf_common>:
 8007ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ffc:	4616      	mov	r6, r2
 8007ffe:	4699      	mov	r9, r3
 8008000:	688a      	ldr	r2, [r1, #8]
 8008002:	690b      	ldr	r3, [r1, #16]
 8008004:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008008:	4293      	cmp	r3, r2
 800800a:	bfb8      	it	lt
 800800c:	4613      	movlt	r3, r2
 800800e:	6033      	str	r3, [r6, #0]
 8008010:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008014:	4607      	mov	r7, r0
 8008016:	460c      	mov	r4, r1
 8008018:	b10a      	cbz	r2, 800801e <_printf_common+0x26>
 800801a:	3301      	adds	r3, #1
 800801c:	6033      	str	r3, [r6, #0]
 800801e:	6823      	ldr	r3, [r4, #0]
 8008020:	0699      	lsls	r1, r3, #26
 8008022:	bf42      	ittt	mi
 8008024:	6833      	ldrmi	r3, [r6, #0]
 8008026:	3302      	addmi	r3, #2
 8008028:	6033      	strmi	r3, [r6, #0]
 800802a:	6825      	ldr	r5, [r4, #0]
 800802c:	f015 0506 	ands.w	r5, r5, #6
 8008030:	d106      	bne.n	8008040 <_printf_common+0x48>
 8008032:	f104 0a19 	add.w	sl, r4, #25
 8008036:	68e3      	ldr	r3, [r4, #12]
 8008038:	6832      	ldr	r2, [r6, #0]
 800803a:	1a9b      	subs	r3, r3, r2
 800803c:	42ab      	cmp	r3, r5
 800803e:	dc26      	bgt.n	800808e <_printf_common+0x96>
 8008040:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008044:	1e13      	subs	r3, r2, #0
 8008046:	6822      	ldr	r2, [r4, #0]
 8008048:	bf18      	it	ne
 800804a:	2301      	movne	r3, #1
 800804c:	0692      	lsls	r2, r2, #26
 800804e:	d42b      	bmi.n	80080a8 <_printf_common+0xb0>
 8008050:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008054:	4649      	mov	r1, r9
 8008056:	4638      	mov	r0, r7
 8008058:	47c0      	blx	r8
 800805a:	3001      	adds	r0, #1
 800805c:	d01e      	beq.n	800809c <_printf_common+0xa4>
 800805e:	6823      	ldr	r3, [r4, #0]
 8008060:	68e5      	ldr	r5, [r4, #12]
 8008062:	6832      	ldr	r2, [r6, #0]
 8008064:	f003 0306 	and.w	r3, r3, #6
 8008068:	2b04      	cmp	r3, #4
 800806a:	bf08      	it	eq
 800806c:	1aad      	subeq	r5, r5, r2
 800806e:	68a3      	ldr	r3, [r4, #8]
 8008070:	6922      	ldr	r2, [r4, #16]
 8008072:	bf0c      	ite	eq
 8008074:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008078:	2500      	movne	r5, #0
 800807a:	4293      	cmp	r3, r2
 800807c:	bfc4      	itt	gt
 800807e:	1a9b      	subgt	r3, r3, r2
 8008080:	18ed      	addgt	r5, r5, r3
 8008082:	2600      	movs	r6, #0
 8008084:	341a      	adds	r4, #26
 8008086:	42b5      	cmp	r5, r6
 8008088:	d11a      	bne.n	80080c0 <_printf_common+0xc8>
 800808a:	2000      	movs	r0, #0
 800808c:	e008      	b.n	80080a0 <_printf_common+0xa8>
 800808e:	2301      	movs	r3, #1
 8008090:	4652      	mov	r2, sl
 8008092:	4649      	mov	r1, r9
 8008094:	4638      	mov	r0, r7
 8008096:	47c0      	blx	r8
 8008098:	3001      	adds	r0, #1
 800809a:	d103      	bne.n	80080a4 <_printf_common+0xac>
 800809c:	f04f 30ff 	mov.w	r0, #4294967295
 80080a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080a4:	3501      	adds	r5, #1
 80080a6:	e7c6      	b.n	8008036 <_printf_common+0x3e>
 80080a8:	18e1      	adds	r1, r4, r3
 80080aa:	1c5a      	adds	r2, r3, #1
 80080ac:	2030      	movs	r0, #48	; 0x30
 80080ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80080b2:	4422      	add	r2, r4
 80080b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80080b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80080bc:	3302      	adds	r3, #2
 80080be:	e7c7      	b.n	8008050 <_printf_common+0x58>
 80080c0:	2301      	movs	r3, #1
 80080c2:	4622      	mov	r2, r4
 80080c4:	4649      	mov	r1, r9
 80080c6:	4638      	mov	r0, r7
 80080c8:	47c0      	blx	r8
 80080ca:	3001      	adds	r0, #1
 80080cc:	d0e6      	beq.n	800809c <_printf_common+0xa4>
 80080ce:	3601      	adds	r6, #1
 80080d0:	e7d9      	b.n	8008086 <_printf_common+0x8e>
	...

080080d4 <_printf_i>:
 80080d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080d8:	460c      	mov	r4, r1
 80080da:	4691      	mov	r9, r2
 80080dc:	7e27      	ldrb	r7, [r4, #24]
 80080de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80080e0:	2f78      	cmp	r7, #120	; 0x78
 80080e2:	4680      	mov	r8, r0
 80080e4:	469a      	mov	sl, r3
 80080e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080ea:	d807      	bhi.n	80080fc <_printf_i+0x28>
 80080ec:	2f62      	cmp	r7, #98	; 0x62
 80080ee:	d80a      	bhi.n	8008106 <_printf_i+0x32>
 80080f0:	2f00      	cmp	r7, #0
 80080f2:	f000 80d8 	beq.w	80082a6 <_printf_i+0x1d2>
 80080f6:	2f58      	cmp	r7, #88	; 0x58
 80080f8:	f000 80a3 	beq.w	8008242 <_printf_i+0x16e>
 80080fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008100:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008104:	e03a      	b.n	800817c <_printf_i+0xa8>
 8008106:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800810a:	2b15      	cmp	r3, #21
 800810c:	d8f6      	bhi.n	80080fc <_printf_i+0x28>
 800810e:	a001      	add	r0, pc, #4	; (adr r0, 8008114 <_printf_i+0x40>)
 8008110:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008114:	0800816d 	.word	0x0800816d
 8008118:	08008181 	.word	0x08008181
 800811c:	080080fd 	.word	0x080080fd
 8008120:	080080fd 	.word	0x080080fd
 8008124:	080080fd 	.word	0x080080fd
 8008128:	080080fd 	.word	0x080080fd
 800812c:	08008181 	.word	0x08008181
 8008130:	080080fd 	.word	0x080080fd
 8008134:	080080fd 	.word	0x080080fd
 8008138:	080080fd 	.word	0x080080fd
 800813c:	080080fd 	.word	0x080080fd
 8008140:	0800828d 	.word	0x0800828d
 8008144:	080081b1 	.word	0x080081b1
 8008148:	0800826f 	.word	0x0800826f
 800814c:	080080fd 	.word	0x080080fd
 8008150:	080080fd 	.word	0x080080fd
 8008154:	080082af 	.word	0x080082af
 8008158:	080080fd 	.word	0x080080fd
 800815c:	080081b1 	.word	0x080081b1
 8008160:	080080fd 	.word	0x080080fd
 8008164:	080080fd 	.word	0x080080fd
 8008168:	08008277 	.word	0x08008277
 800816c:	680b      	ldr	r3, [r1, #0]
 800816e:	1d1a      	adds	r2, r3, #4
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	600a      	str	r2, [r1, #0]
 8008174:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008178:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800817c:	2301      	movs	r3, #1
 800817e:	e0a3      	b.n	80082c8 <_printf_i+0x1f4>
 8008180:	6825      	ldr	r5, [r4, #0]
 8008182:	6808      	ldr	r0, [r1, #0]
 8008184:	062e      	lsls	r6, r5, #24
 8008186:	f100 0304 	add.w	r3, r0, #4
 800818a:	d50a      	bpl.n	80081a2 <_printf_i+0xce>
 800818c:	6805      	ldr	r5, [r0, #0]
 800818e:	600b      	str	r3, [r1, #0]
 8008190:	2d00      	cmp	r5, #0
 8008192:	da03      	bge.n	800819c <_printf_i+0xc8>
 8008194:	232d      	movs	r3, #45	; 0x2d
 8008196:	426d      	negs	r5, r5
 8008198:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800819c:	485e      	ldr	r0, [pc, #376]	; (8008318 <_printf_i+0x244>)
 800819e:	230a      	movs	r3, #10
 80081a0:	e019      	b.n	80081d6 <_printf_i+0x102>
 80081a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80081a6:	6805      	ldr	r5, [r0, #0]
 80081a8:	600b      	str	r3, [r1, #0]
 80081aa:	bf18      	it	ne
 80081ac:	b22d      	sxthne	r5, r5
 80081ae:	e7ef      	b.n	8008190 <_printf_i+0xbc>
 80081b0:	680b      	ldr	r3, [r1, #0]
 80081b2:	6825      	ldr	r5, [r4, #0]
 80081b4:	1d18      	adds	r0, r3, #4
 80081b6:	6008      	str	r0, [r1, #0]
 80081b8:	0628      	lsls	r0, r5, #24
 80081ba:	d501      	bpl.n	80081c0 <_printf_i+0xec>
 80081bc:	681d      	ldr	r5, [r3, #0]
 80081be:	e002      	b.n	80081c6 <_printf_i+0xf2>
 80081c0:	0669      	lsls	r1, r5, #25
 80081c2:	d5fb      	bpl.n	80081bc <_printf_i+0xe8>
 80081c4:	881d      	ldrh	r5, [r3, #0]
 80081c6:	4854      	ldr	r0, [pc, #336]	; (8008318 <_printf_i+0x244>)
 80081c8:	2f6f      	cmp	r7, #111	; 0x6f
 80081ca:	bf0c      	ite	eq
 80081cc:	2308      	moveq	r3, #8
 80081ce:	230a      	movne	r3, #10
 80081d0:	2100      	movs	r1, #0
 80081d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80081d6:	6866      	ldr	r6, [r4, #4]
 80081d8:	60a6      	str	r6, [r4, #8]
 80081da:	2e00      	cmp	r6, #0
 80081dc:	bfa2      	ittt	ge
 80081de:	6821      	ldrge	r1, [r4, #0]
 80081e0:	f021 0104 	bicge.w	r1, r1, #4
 80081e4:	6021      	strge	r1, [r4, #0]
 80081e6:	b90d      	cbnz	r5, 80081ec <_printf_i+0x118>
 80081e8:	2e00      	cmp	r6, #0
 80081ea:	d04d      	beq.n	8008288 <_printf_i+0x1b4>
 80081ec:	4616      	mov	r6, r2
 80081ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80081f2:	fb03 5711 	mls	r7, r3, r1, r5
 80081f6:	5dc7      	ldrb	r7, [r0, r7]
 80081f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80081fc:	462f      	mov	r7, r5
 80081fe:	42bb      	cmp	r3, r7
 8008200:	460d      	mov	r5, r1
 8008202:	d9f4      	bls.n	80081ee <_printf_i+0x11a>
 8008204:	2b08      	cmp	r3, #8
 8008206:	d10b      	bne.n	8008220 <_printf_i+0x14c>
 8008208:	6823      	ldr	r3, [r4, #0]
 800820a:	07df      	lsls	r7, r3, #31
 800820c:	d508      	bpl.n	8008220 <_printf_i+0x14c>
 800820e:	6923      	ldr	r3, [r4, #16]
 8008210:	6861      	ldr	r1, [r4, #4]
 8008212:	4299      	cmp	r1, r3
 8008214:	bfde      	ittt	le
 8008216:	2330      	movle	r3, #48	; 0x30
 8008218:	f806 3c01 	strble.w	r3, [r6, #-1]
 800821c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008220:	1b92      	subs	r2, r2, r6
 8008222:	6122      	str	r2, [r4, #16]
 8008224:	f8cd a000 	str.w	sl, [sp]
 8008228:	464b      	mov	r3, r9
 800822a:	aa03      	add	r2, sp, #12
 800822c:	4621      	mov	r1, r4
 800822e:	4640      	mov	r0, r8
 8008230:	f7ff fee2 	bl	8007ff8 <_printf_common>
 8008234:	3001      	adds	r0, #1
 8008236:	d14c      	bne.n	80082d2 <_printf_i+0x1fe>
 8008238:	f04f 30ff 	mov.w	r0, #4294967295
 800823c:	b004      	add	sp, #16
 800823e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008242:	4835      	ldr	r0, [pc, #212]	; (8008318 <_printf_i+0x244>)
 8008244:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008248:	6823      	ldr	r3, [r4, #0]
 800824a:	680e      	ldr	r6, [r1, #0]
 800824c:	061f      	lsls	r7, r3, #24
 800824e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008252:	600e      	str	r6, [r1, #0]
 8008254:	d514      	bpl.n	8008280 <_printf_i+0x1ac>
 8008256:	07d9      	lsls	r1, r3, #31
 8008258:	bf44      	itt	mi
 800825a:	f043 0320 	orrmi.w	r3, r3, #32
 800825e:	6023      	strmi	r3, [r4, #0]
 8008260:	b91d      	cbnz	r5, 800826a <_printf_i+0x196>
 8008262:	6823      	ldr	r3, [r4, #0]
 8008264:	f023 0320 	bic.w	r3, r3, #32
 8008268:	6023      	str	r3, [r4, #0]
 800826a:	2310      	movs	r3, #16
 800826c:	e7b0      	b.n	80081d0 <_printf_i+0xfc>
 800826e:	6823      	ldr	r3, [r4, #0]
 8008270:	f043 0320 	orr.w	r3, r3, #32
 8008274:	6023      	str	r3, [r4, #0]
 8008276:	2378      	movs	r3, #120	; 0x78
 8008278:	4828      	ldr	r0, [pc, #160]	; (800831c <_printf_i+0x248>)
 800827a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800827e:	e7e3      	b.n	8008248 <_printf_i+0x174>
 8008280:	065e      	lsls	r6, r3, #25
 8008282:	bf48      	it	mi
 8008284:	b2ad      	uxthmi	r5, r5
 8008286:	e7e6      	b.n	8008256 <_printf_i+0x182>
 8008288:	4616      	mov	r6, r2
 800828a:	e7bb      	b.n	8008204 <_printf_i+0x130>
 800828c:	680b      	ldr	r3, [r1, #0]
 800828e:	6826      	ldr	r6, [r4, #0]
 8008290:	6960      	ldr	r0, [r4, #20]
 8008292:	1d1d      	adds	r5, r3, #4
 8008294:	600d      	str	r5, [r1, #0]
 8008296:	0635      	lsls	r5, r6, #24
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	d501      	bpl.n	80082a0 <_printf_i+0x1cc>
 800829c:	6018      	str	r0, [r3, #0]
 800829e:	e002      	b.n	80082a6 <_printf_i+0x1d2>
 80082a0:	0671      	lsls	r1, r6, #25
 80082a2:	d5fb      	bpl.n	800829c <_printf_i+0x1c8>
 80082a4:	8018      	strh	r0, [r3, #0]
 80082a6:	2300      	movs	r3, #0
 80082a8:	6123      	str	r3, [r4, #16]
 80082aa:	4616      	mov	r6, r2
 80082ac:	e7ba      	b.n	8008224 <_printf_i+0x150>
 80082ae:	680b      	ldr	r3, [r1, #0]
 80082b0:	1d1a      	adds	r2, r3, #4
 80082b2:	600a      	str	r2, [r1, #0]
 80082b4:	681e      	ldr	r6, [r3, #0]
 80082b6:	6862      	ldr	r2, [r4, #4]
 80082b8:	2100      	movs	r1, #0
 80082ba:	4630      	mov	r0, r6
 80082bc:	f7f7 ffc0 	bl	8000240 <memchr>
 80082c0:	b108      	cbz	r0, 80082c6 <_printf_i+0x1f2>
 80082c2:	1b80      	subs	r0, r0, r6
 80082c4:	6060      	str	r0, [r4, #4]
 80082c6:	6863      	ldr	r3, [r4, #4]
 80082c8:	6123      	str	r3, [r4, #16]
 80082ca:	2300      	movs	r3, #0
 80082cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082d0:	e7a8      	b.n	8008224 <_printf_i+0x150>
 80082d2:	6923      	ldr	r3, [r4, #16]
 80082d4:	4632      	mov	r2, r6
 80082d6:	4649      	mov	r1, r9
 80082d8:	4640      	mov	r0, r8
 80082da:	47d0      	blx	sl
 80082dc:	3001      	adds	r0, #1
 80082de:	d0ab      	beq.n	8008238 <_printf_i+0x164>
 80082e0:	6823      	ldr	r3, [r4, #0]
 80082e2:	079b      	lsls	r3, r3, #30
 80082e4:	d413      	bmi.n	800830e <_printf_i+0x23a>
 80082e6:	68e0      	ldr	r0, [r4, #12]
 80082e8:	9b03      	ldr	r3, [sp, #12]
 80082ea:	4298      	cmp	r0, r3
 80082ec:	bfb8      	it	lt
 80082ee:	4618      	movlt	r0, r3
 80082f0:	e7a4      	b.n	800823c <_printf_i+0x168>
 80082f2:	2301      	movs	r3, #1
 80082f4:	4632      	mov	r2, r6
 80082f6:	4649      	mov	r1, r9
 80082f8:	4640      	mov	r0, r8
 80082fa:	47d0      	blx	sl
 80082fc:	3001      	adds	r0, #1
 80082fe:	d09b      	beq.n	8008238 <_printf_i+0x164>
 8008300:	3501      	adds	r5, #1
 8008302:	68e3      	ldr	r3, [r4, #12]
 8008304:	9903      	ldr	r1, [sp, #12]
 8008306:	1a5b      	subs	r3, r3, r1
 8008308:	42ab      	cmp	r3, r5
 800830a:	dcf2      	bgt.n	80082f2 <_printf_i+0x21e>
 800830c:	e7eb      	b.n	80082e6 <_printf_i+0x212>
 800830e:	2500      	movs	r5, #0
 8008310:	f104 0619 	add.w	r6, r4, #25
 8008314:	e7f5      	b.n	8008302 <_printf_i+0x22e>
 8008316:	bf00      	nop
 8008318:	080085cd 	.word	0x080085cd
 800831c:	080085de 	.word	0x080085de

08008320 <memcpy>:
 8008320:	440a      	add	r2, r1
 8008322:	4291      	cmp	r1, r2
 8008324:	f100 33ff 	add.w	r3, r0, #4294967295
 8008328:	d100      	bne.n	800832c <memcpy+0xc>
 800832a:	4770      	bx	lr
 800832c:	b510      	push	{r4, lr}
 800832e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008332:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008336:	4291      	cmp	r1, r2
 8008338:	d1f9      	bne.n	800832e <memcpy+0xe>
 800833a:	bd10      	pop	{r4, pc}

0800833c <memmove>:
 800833c:	4288      	cmp	r0, r1
 800833e:	b510      	push	{r4, lr}
 8008340:	eb01 0402 	add.w	r4, r1, r2
 8008344:	d902      	bls.n	800834c <memmove+0x10>
 8008346:	4284      	cmp	r4, r0
 8008348:	4623      	mov	r3, r4
 800834a:	d807      	bhi.n	800835c <memmove+0x20>
 800834c:	1e43      	subs	r3, r0, #1
 800834e:	42a1      	cmp	r1, r4
 8008350:	d008      	beq.n	8008364 <memmove+0x28>
 8008352:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008356:	f803 2f01 	strb.w	r2, [r3, #1]!
 800835a:	e7f8      	b.n	800834e <memmove+0x12>
 800835c:	4402      	add	r2, r0
 800835e:	4601      	mov	r1, r0
 8008360:	428a      	cmp	r2, r1
 8008362:	d100      	bne.n	8008366 <memmove+0x2a>
 8008364:	bd10      	pop	{r4, pc}
 8008366:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800836a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800836e:	e7f7      	b.n	8008360 <memmove+0x24>

08008370 <_free_r>:
 8008370:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008372:	2900      	cmp	r1, #0
 8008374:	d048      	beq.n	8008408 <_free_r+0x98>
 8008376:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800837a:	9001      	str	r0, [sp, #4]
 800837c:	2b00      	cmp	r3, #0
 800837e:	f1a1 0404 	sub.w	r4, r1, #4
 8008382:	bfb8      	it	lt
 8008384:	18e4      	addlt	r4, r4, r3
 8008386:	f000 f8d3 	bl	8008530 <__malloc_lock>
 800838a:	4a20      	ldr	r2, [pc, #128]	; (800840c <_free_r+0x9c>)
 800838c:	9801      	ldr	r0, [sp, #4]
 800838e:	6813      	ldr	r3, [r2, #0]
 8008390:	4615      	mov	r5, r2
 8008392:	b933      	cbnz	r3, 80083a2 <_free_r+0x32>
 8008394:	6063      	str	r3, [r4, #4]
 8008396:	6014      	str	r4, [r2, #0]
 8008398:	b003      	add	sp, #12
 800839a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800839e:	f000 b8cd 	b.w	800853c <__malloc_unlock>
 80083a2:	42a3      	cmp	r3, r4
 80083a4:	d90b      	bls.n	80083be <_free_r+0x4e>
 80083a6:	6821      	ldr	r1, [r4, #0]
 80083a8:	1862      	adds	r2, r4, r1
 80083aa:	4293      	cmp	r3, r2
 80083ac:	bf04      	itt	eq
 80083ae:	681a      	ldreq	r2, [r3, #0]
 80083b0:	685b      	ldreq	r3, [r3, #4]
 80083b2:	6063      	str	r3, [r4, #4]
 80083b4:	bf04      	itt	eq
 80083b6:	1852      	addeq	r2, r2, r1
 80083b8:	6022      	streq	r2, [r4, #0]
 80083ba:	602c      	str	r4, [r5, #0]
 80083bc:	e7ec      	b.n	8008398 <_free_r+0x28>
 80083be:	461a      	mov	r2, r3
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	b10b      	cbz	r3, 80083c8 <_free_r+0x58>
 80083c4:	42a3      	cmp	r3, r4
 80083c6:	d9fa      	bls.n	80083be <_free_r+0x4e>
 80083c8:	6811      	ldr	r1, [r2, #0]
 80083ca:	1855      	adds	r5, r2, r1
 80083cc:	42a5      	cmp	r5, r4
 80083ce:	d10b      	bne.n	80083e8 <_free_r+0x78>
 80083d0:	6824      	ldr	r4, [r4, #0]
 80083d2:	4421      	add	r1, r4
 80083d4:	1854      	adds	r4, r2, r1
 80083d6:	42a3      	cmp	r3, r4
 80083d8:	6011      	str	r1, [r2, #0]
 80083da:	d1dd      	bne.n	8008398 <_free_r+0x28>
 80083dc:	681c      	ldr	r4, [r3, #0]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	6053      	str	r3, [r2, #4]
 80083e2:	4421      	add	r1, r4
 80083e4:	6011      	str	r1, [r2, #0]
 80083e6:	e7d7      	b.n	8008398 <_free_r+0x28>
 80083e8:	d902      	bls.n	80083f0 <_free_r+0x80>
 80083ea:	230c      	movs	r3, #12
 80083ec:	6003      	str	r3, [r0, #0]
 80083ee:	e7d3      	b.n	8008398 <_free_r+0x28>
 80083f0:	6825      	ldr	r5, [r4, #0]
 80083f2:	1961      	adds	r1, r4, r5
 80083f4:	428b      	cmp	r3, r1
 80083f6:	bf04      	itt	eq
 80083f8:	6819      	ldreq	r1, [r3, #0]
 80083fa:	685b      	ldreq	r3, [r3, #4]
 80083fc:	6063      	str	r3, [r4, #4]
 80083fe:	bf04      	itt	eq
 8008400:	1949      	addeq	r1, r1, r5
 8008402:	6021      	streq	r1, [r4, #0]
 8008404:	6054      	str	r4, [r2, #4]
 8008406:	e7c7      	b.n	8008398 <_free_r+0x28>
 8008408:	b003      	add	sp, #12
 800840a:	bd30      	pop	{r4, r5, pc}
 800840c:	200000bc 	.word	0x200000bc

08008410 <_malloc_r>:
 8008410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008412:	1ccd      	adds	r5, r1, #3
 8008414:	f025 0503 	bic.w	r5, r5, #3
 8008418:	3508      	adds	r5, #8
 800841a:	2d0c      	cmp	r5, #12
 800841c:	bf38      	it	cc
 800841e:	250c      	movcc	r5, #12
 8008420:	2d00      	cmp	r5, #0
 8008422:	4606      	mov	r6, r0
 8008424:	db01      	blt.n	800842a <_malloc_r+0x1a>
 8008426:	42a9      	cmp	r1, r5
 8008428:	d903      	bls.n	8008432 <_malloc_r+0x22>
 800842a:	230c      	movs	r3, #12
 800842c:	6033      	str	r3, [r6, #0]
 800842e:	2000      	movs	r0, #0
 8008430:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008432:	f000 f87d 	bl	8008530 <__malloc_lock>
 8008436:	4921      	ldr	r1, [pc, #132]	; (80084bc <_malloc_r+0xac>)
 8008438:	680a      	ldr	r2, [r1, #0]
 800843a:	4614      	mov	r4, r2
 800843c:	b99c      	cbnz	r4, 8008466 <_malloc_r+0x56>
 800843e:	4f20      	ldr	r7, [pc, #128]	; (80084c0 <_malloc_r+0xb0>)
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	b923      	cbnz	r3, 800844e <_malloc_r+0x3e>
 8008444:	4621      	mov	r1, r4
 8008446:	4630      	mov	r0, r6
 8008448:	f000 f862 	bl	8008510 <_sbrk_r>
 800844c:	6038      	str	r0, [r7, #0]
 800844e:	4629      	mov	r1, r5
 8008450:	4630      	mov	r0, r6
 8008452:	f000 f85d 	bl	8008510 <_sbrk_r>
 8008456:	1c43      	adds	r3, r0, #1
 8008458:	d123      	bne.n	80084a2 <_malloc_r+0x92>
 800845a:	230c      	movs	r3, #12
 800845c:	6033      	str	r3, [r6, #0]
 800845e:	4630      	mov	r0, r6
 8008460:	f000 f86c 	bl	800853c <__malloc_unlock>
 8008464:	e7e3      	b.n	800842e <_malloc_r+0x1e>
 8008466:	6823      	ldr	r3, [r4, #0]
 8008468:	1b5b      	subs	r3, r3, r5
 800846a:	d417      	bmi.n	800849c <_malloc_r+0x8c>
 800846c:	2b0b      	cmp	r3, #11
 800846e:	d903      	bls.n	8008478 <_malloc_r+0x68>
 8008470:	6023      	str	r3, [r4, #0]
 8008472:	441c      	add	r4, r3
 8008474:	6025      	str	r5, [r4, #0]
 8008476:	e004      	b.n	8008482 <_malloc_r+0x72>
 8008478:	6863      	ldr	r3, [r4, #4]
 800847a:	42a2      	cmp	r2, r4
 800847c:	bf0c      	ite	eq
 800847e:	600b      	streq	r3, [r1, #0]
 8008480:	6053      	strne	r3, [r2, #4]
 8008482:	4630      	mov	r0, r6
 8008484:	f000 f85a 	bl	800853c <__malloc_unlock>
 8008488:	f104 000b 	add.w	r0, r4, #11
 800848c:	1d23      	adds	r3, r4, #4
 800848e:	f020 0007 	bic.w	r0, r0, #7
 8008492:	1ac2      	subs	r2, r0, r3
 8008494:	d0cc      	beq.n	8008430 <_malloc_r+0x20>
 8008496:	1a1b      	subs	r3, r3, r0
 8008498:	50a3      	str	r3, [r4, r2]
 800849a:	e7c9      	b.n	8008430 <_malloc_r+0x20>
 800849c:	4622      	mov	r2, r4
 800849e:	6864      	ldr	r4, [r4, #4]
 80084a0:	e7cc      	b.n	800843c <_malloc_r+0x2c>
 80084a2:	1cc4      	adds	r4, r0, #3
 80084a4:	f024 0403 	bic.w	r4, r4, #3
 80084a8:	42a0      	cmp	r0, r4
 80084aa:	d0e3      	beq.n	8008474 <_malloc_r+0x64>
 80084ac:	1a21      	subs	r1, r4, r0
 80084ae:	4630      	mov	r0, r6
 80084b0:	f000 f82e 	bl	8008510 <_sbrk_r>
 80084b4:	3001      	adds	r0, #1
 80084b6:	d1dd      	bne.n	8008474 <_malloc_r+0x64>
 80084b8:	e7cf      	b.n	800845a <_malloc_r+0x4a>
 80084ba:	bf00      	nop
 80084bc:	200000bc 	.word	0x200000bc
 80084c0:	200000c0 	.word	0x200000c0

080084c4 <_realloc_r>:
 80084c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084c6:	4607      	mov	r7, r0
 80084c8:	4614      	mov	r4, r2
 80084ca:	460e      	mov	r6, r1
 80084cc:	b921      	cbnz	r1, 80084d8 <_realloc_r+0x14>
 80084ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80084d2:	4611      	mov	r1, r2
 80084d4:	f7ff bf9c 	b.w	8008410 <_malloc_r>
 80084d8:	b922      	cbnz	r2, 80084e4 <_realloc_r+0x20>
 80084da:	f7ff ff49 	bl	8008370 <_free_r>
 80084de:	4625      	mov	r5, r4
 80084e0:	4628      	mov	r0, r5
 80084e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084e4:	f000 f830 	bl	8008548 <_malloc_usable_size_r>
 80084e8:	42a0      	cmp	r0, r4
 80084ea:	d20f      	bcs.n	800850c <_realloc_r+0x48>
 80084ec:	4621      	mov	r1, r4
 80084ee:	4638      	mov	r0, r7
 80084f0:	f7ff ff8e 	bl	8008410 <_malloc_r>
 80084f4:	4605      	mov	r5, r0
 80084f6:	2800      	cmp	r0, #0
 80084f8:	d0f2      	beq.n	80084e0 <_realloc_r+0x1c>
 80084fa:	4631      	mov	r1, r6
 80084fc:	4622      	mov	r2, r4
 80084fe:	f7ff ff0f 	bl	8008320 <memcpy>
 8008502:	4631      	mov	r1, r6
 8008504:	4638      	mov	r0, r7
 8008506:	f7ff ff33 	bl	8008370 <_free_r>
 800850a:	e7e9      	b.n	80084e0 <_realloc_r+0x1c>
 800850c:	4635      	mov	r5, r6
 800850e:	e7e7      	b.n	80084e0 <_realloc_r+0x1c>

08008510 <_sbrk_r>:
 8008510:	b538      	push	{r3, r4, r5, lr}
 8008512:	4d06      	ldr	r5, [pc, #24]	; (800852c <_sbrk_r+0x1c>)
 8008514:	2300      	movs	r3, #0
 8008516:	4604      	mov	r4, r0
 8008518:	4608      	mov	r0, r1
 800851a:	602b      	str	r3, [r5, #0]
 800851c:	f7f8 fda4 	bl	8001068 <_sbrk>
 8008520:	1c43      	adds	r3, r0, #1
 8008522:	d102      	bne.n	800852a <_sbrk_r+0x1a>
 8008524:	682b      	ldr	r3, [r5, #0]
 8008526:	b103      	cbz	r3, 800852a <_sbrk_r+0x1a>
 8008528:	6023      	str	r3, [r4, #0]
 800852a:	bd38      	pop	{r3, r4, r5, pc}
 800852c:	2000073c 	.word	0x2000073c

08008530 <__malloc_lock>:
 8008530:	4801      	ldr	r0, [pc, #4]	; (8008538 <__malloc_lock+0x8>)
 8008532:	f000 b811 	b.w	8008558 <__retarget_lock_acquire_recursive>
 8008536:	bf00      	nop
 8008538:	20000744 	.word	0x20000744

0800853c <__malloc_unlock>:
 800853c:	4801      	ldr	r0, [pc, #4]	; (8008544 <__malloc_unlock+0x8>)
 800853e:	f000 b80c 	b.w	800855a <__retarget_lock_release_recursive>
 8008542:	bf00      	nop
 8008544:	20000744 	.word	0x20000744

08008548 <_malloc_usable_size_r>:
 8008548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800854c:	1f18      	subs	r0, r3, #4
 800854e:	2b00      	cmp	r3, #0
 8008550:	bfbc      	itt	lt
 8008552:	580b      	ldrlt	r3, [r1, r0]
 8008554:	18c0      	addlt	r0, r0, r3
 8008556:	4770      	bx	lr

08008558 <__retarget_lock_acquire_recursive>:
 8008558:	4770      	bx	lr

0800855a <__retarget_lock_release_recursive>:
 800855a:	4770      	bx	lr

0800855c <_init>:
 800855c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800855e:	bf00      	nop
 8008560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008562:	bc08      	pop	{r3}
 8008564:	469e      	mov	lr, r3
 8008566:	4770      	bx	lr

08008568 <_fini>:
 8008568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800856a:	bf00      	nop
 800856c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800856e:	bc08      	pop	{r3}
 8008570:	469e      	mov	lr, r3
 8008572:	4770      	bx	lr
